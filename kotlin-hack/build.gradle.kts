import com.github.jengelman.gradle.plugins.shadow.relocation.RelocateClassContext
import com.github.jengelman.gradle.plugins.shadow.relocation.RelocatePathContext
import com.github.jengelman.gradle.plugins.shadow.relocation.Relocator
import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar
import java.net.URI

plugins {
  java
  `java-library`
  `maven-publish`
  id("signing")
  id("com.github.johnrengelman.shadow") version "8.1.1"
  id("org.jetbrains.kotlin.jvm") version "1.9.21"
}

fun properties(key: String) = project.findProperty(key).toString()
group = properties("libraryGroup")
version = properties("libraryVersion")

repositories {
  mavenCentral {
    metadataSources {
      mavenPom()
      artifact()
    }
  }
  maven(url = "https://maven.pkg.jetbrains.space/kotlin/p/kotlin/kotlin-ide-plugin-dependencies")
}

//val kVersion = "1.9.21"
//val kGroup = "org.jetbrains.kotlin"
dependencies {
//  implementation(kGroup, name = "kotlin-compiler-cli-for-ide", version = "1.9.21-631") { isTransitive = false }


  implementation(kotlin("stdlib"))
  implementation(kotlin("scripting-jsr223"))
  implementation(kotlin("scripting-jvm"))
  implementation(kotlin("scripting-jvm-host"))
  implementation(kotlin("script-runtime"))
  implementation(kotlin("scripting-compiler-embeddable"))
  implementation(kotlin("compiler-embeddable"))

//  implementation(kGroup, name = "kotlin-compiler-embeddable", version = kVersion)
//  implementation(kGroup, name = "kotlin-scripting-compiler-embeddable", version = kVersion)
//  implementation(kGroup, name = "kotlin-scripting-compiler-impl-embeddable", version = kVersion)
//  implementation(kGroup, name = "kotlin-scripting-jsr223", version = kVersion)
//  implementation(kGroup, name = "kotlin-scripting-jvm", version = kVersion)
//  implementation(kGroup, name = "kotlin-scripting-jvm-host", version = kVersion)
//  implementation(kGroup, name = "kotlin-scripting-common", version = kVersion)
}

val outputPackagePrefix = "aicoder"

val verbose = false

fun shouldRelocate(path: String) = when {
  path.startsWith("META-INF/") -> false
  path.startsWith("kotlin/") -> false

  // We want to maintain this interface:
  path.contains("/KotlinJsr223") -> false
  path.contains("/ScriptArgsWithTypes") -> false
  path.startsWith("kotlin/script/experimental/jsr223") -> false
  path.startsWith("kotlin/script/experimental/jvm") -> false
  path.startsWith("kotlin/script/experimental/jvmhost/jsr223") -> false

  isOverride(path) -> true
  else -> false
}

fun FileVisitDetails.relocations() = when {
  path.startsWith("org/jetbrains/kotlin/com/") -> path.removePrefix("org/jetbrains/kotlin/")
  path.startsWith("org/jetbrains/kotlin/org/") -> path.removePrefix("org/jetbrains/kotlin/")
  path.startsWith("org/jetbrains/kotlin/it/") -> path.removePrefix("org/jetbrains/kotlin/")
  path.startsWith("org/jetbrains/org/") -> path.removePrefix("org/jetbrains/")
  path.startsWith("org/jetbrains/com/") -> path.removePrefix("org/jetbrains/")
  else -> path
}

fun ShadowJar.relocations() {
  relocate("org.jetbrains.kotlin.com.", "com.")
  relocate("org.jetbrains.org.", "org.")
  relocate("org.jetbrains.kotlin.org.", "org.")
  relocate("org.jetbrains.kotlin.it.", "it.")
}

tasks.register("fullShadowJar", ShadowJar::class) {
  archiveClassifier.set("full")
  isZip64 = true
  mergeServiceFiles()
  dependsOn("jar")
  configurations = listOf(project.configurations.getByName("runtimeClasspath"))
  doFirst {
    relocations()
  }
}

// Filtering and assembly
val shadowJarStage1 by tasks.registering(ShadowJar::class) {
  archiveClassifier.set("stage1")
  isZip64 = true
  mergeServiceFiles()
  dependsOn("jar")
  configurations = listOf(project.configurations.getByName("runtimeClasspath"))
  doFirst {
    this@registering.includedDependencies.forEach { file ->
      try {
        zipTree(file).visit {
          if (this.isDirectory) return@visit
          // Adjust the path so we can express rules based on the desired final paths
          val path = relocations()
          if (isConflicting(path)) {
            if (verbose) println("${this.path} excluded conflict from plugin: ${file.name} as $path")
            exclude(this.path)
          } else if (isPruned(path)) {
            if (verbose) println("${this.path} pruned from plugin:${file.name} as $path")
            exclude(this.path)
          } else {
            if (verbose) println("${this.path} included in plugin:${file.name} as $path")
          }
        }
      } catch (e: Exception) {
        println("Error processing $file")
        e.printStackTrace()
        throw e
      }
    }
  }
}

// Cannonicalization - previously relocated classes should be moved back to their original locations
val shadowJarStage2 by tasks.registering(ShadowJar::class) {
  archiveClassifier.set("stage2")
  isZip64 = true
  dependsOn(shadowJarStage1)
  doFirst {
    from(zipTree(shadowJarStage1.get().archiveFile))
    relocations()
  }
}

// Class isolations to avoid conflicts with the IntelliJ classpath
val shadowJarFinalStage by tasks.registering(ShadowJar::class) {
  val verbose = false
  archiveClassifier.set("")
  isZip64 = true
  dependsOn(shadowJarStage2)
  doFirst {
    from(zipTree(shadowJarStage2.get().archiveFile))
    val inputFiles: MutableSet<String> = mutableSetOf()
    zipTree(shadowJarStage2.get().archiveFile).visit {
      if (!this.isDirectory) inputFiles.add(this.relativePath.toString())
    }
    relocate(object : Relocator {

      override fun canRelocatePath(path: String?) = true
      fun shouldRelocatePath(path: String?) = when {
        null == path -> false
        !inputFiles.contains(path) -> false
        shouldRelocate(path) -> true
        else -> false
      }

      override fun relocatePath(context: RelocatePathContext?) = context?.path?.let { from ->
        if (shouldRelocatePath(from + ".class")) {
          val to = outputPackagePrefix + "/" + from
          if (verbose) println("""path relocate("$from", "$to")""")
          to
        } else {
          if (verbose) println("""leaving path "$from" as-is""")
          from
        }
      }

      override fun canRelocateClass(className: String?) = true

      fun shouldRelocateClass(className: String?) = shouldRelocatePath(className?.replace(".", "/") + ".class")

      override fun relocateClass(context: RelocateClassContext?) =
        context?.className?.let { from ->
          if (shouldRelocateClass(from)) {
            val to = outputPackagePrefix + "." + from
            if (verbose) println("""class relocate("$from", "$to")""")
            to
          } else {
            if (verbose) println("""leaving class "$from" as-is""")
            from
          }
        }

      override fun applyToSourceContent(sourceContent: String?) = sourceContent
    })
  }
}

val platformJarStage1 by tasks.registering(ShadowJar::class) {
  archiveClassifier.set("platform-1")
  isZip64 = true
  mergeServiceFiles()
  dependsOn("jar")
  configurations = listOf(project.configurations.getByName("runtimeClasspath"))
  doFirst {
    this@registering.includedDependencies.forEach { file ->
      try {
        zipTree(file).visit {
          if (this.isDirectory) return@visit
          val path = relocations()
          if (!isConflicting(path)) {
            if (verbose) println("${this.path} excluded from platform: ${file.name} as $path")
            exclude(this.path)
          } else {
            if (verbose) println("${this.path} included conflict in platform:${file.name} as $path")
          }
        }
      } catch (e: Exception) {
        println("Error processing $file")
        e.printStackTrace()
        throw e
      }
    }
  }
}

val platformJarStage2 by tasks.registering(ShadowJar::class) {
  archiveClassifier.set("platform")
  isZip64 = true
  dependsOn(platformJarStage1)
  doFirst {
    from(zipTree(platformJarStage1.get().archiveFile))
    relocations()
  }
}

tasks.named("build") {
  dependsOn(shadowJarFinalStage, platformJarStage2)
}

val javadocJar by tasks.registering(Jar::class) {
  archiveClassifier.set("javadoc")
  from(tasks.javadoc)
}

val sourcesJar by tasks.registering(Jar::class) {
  archiveClassifier.set("sources")
  from(sourceSets.main.get().allSource)
}

publishing {
  publications {
    create<MavenPublication>("plugin") {
      artifactId = "plugin"
      //from(components["java"])
      artifact(shadowJarFinalStage.get())
      artifact(sourcesJar.get())
      artifact(javadocJar.get())
      versionMapping {
        usage("java-api") {
          fromResolutionOf("runtimeClasspath")
        }
        usage("java-runtime") {
          fromResolutionResult()
        }
      }
      pom {
        name.set("SkyeNet Kotlin Hacks")
        description.set("Repackaging workaround needed to run Kotlin scripts in IntelliJ")
        url.set("https://github.com/SimiaCryptus/SkyeNet")
        licenses {
          license {
            name.set("The Apache License, Version 2.0")
            url.set("http://www.apache.org/licenses/LICENSE-2.0.txt")
          }
        }
        developers {
          developer {
            id.set("acharneski")
            name.set("Andrew Charneski")
            email.set("acharneski@gmail.com")
          }
        }
        scm {
          connection.set("scm:git:git://git@github.com/SimiaCryptus/SkyeNet.git")
          developerConnection.set("scm:git:ssh://git@github.com/SimiaCryptus/SkyeNet.git")
          url.set("https://github.com/SimiaCryptus/SkyeNet")
        }
      }
    }
    create<MavenPublication>("platform") {
      artifactId = "platform"
      //from(components["java"])
      artifact(platformJarStage2.get())
      artifact(sourcesJar.get())
      artifact(javadocJar.get())
      versionMapping {
        usage("java-api") {
          fromResolutionOf("runtimeClasspath")
        }
        usage("java-runtime") {
          fromResolutionResult()
        }
      }
      pom {
        name.set("SkyeNet Kotlin Hacks")
        description.set("Repackaging workaround needed to run Kotlin scripts in IntelliJ")
        url.set("https://github.com/SimiaCryptus/SkyeNet")
        licenses {
          license {
            name.set("The Apache License, Version 2.0")
            url.set("http://www.apache.org/licenses/LICENSE-2.0.txt")
          }
        }
        developers {
          developer {
            id.set("acharneski")
            name.set("Andrew Charneski")
            email.set("acharneski@gmail.com")
          }
        }
        scm {
          connection.set("scm:git:git://git@github.com/SimiaCryptus/SkyeNet.git")
          developerConnection.set("scm:git:ssh://git@github.com/SimiaCryptus/SkyeNet.git")
          url.set("https://github.com/SimiaCryptus/SkyeNet")
        }
      }
    }
  }
  repositories {
    maven {
      val releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
      val snapshotsRepoUrl = "https://oss.sonatype.org/mask/repositories/snapshots"
      url = URI(if (version.toString().endsWith("SNAPSHOT")) snapshotsRepoUrl else releasesRepoUrl)
      credentials {
        username = System.getenv("OSSRH_USERNAME") ?: System.getProperty("ossrhUsername")
            ?: properties("ossrhUsername")
        password = System.getenv("OSSRH_PASSWORD") ?: System.getProperty("ossrhPassword")
            ?: properties("ossrhPassword")
      }
    }
  }
  if (System.getenv("GPG_PRIVATE_KEY") != null && System.getenv("GPG_PASSPHRASE") != null) afterEvaluate {
    signing {
      sign(publications["plugin"])
      sign(publications["platform"])
    }
  }
}

if (System.getenv("GPG_PRIVATE_KEY") != null && System.getenv("GPG_PASSPHRASE") != null) {
  apply<SigningPlugin>()
  configure<SigningExtension> {
    useInMemoryPgpKeys(System.getenv("GPG_PRIVATE_KEY"), System.getenv("GPG_PASSPHRASE"))
    sign(configurations.archives.get())
  }
}
/*
fun isConflicting(path: String) = false
fun isPruned(path: String) = false
fun isOverride(path: String) = false
*/

// GENERATED CODE

// Conflicts: 5858
// Pruned: 1425
// Required Classes: 34650
// Override Classes: 15784

// Conflicts:
fun isConflicting(path: String) = when {
  path.startsWith("i") -> true
  path.startsWith("kotlin/c") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/metadata/P") -> true
  path.startsWith("kotlin/t") -> true
  path.startsWith("kotlin/i") -> true
  path.startsWith("kotlin/jvm/i") -> true
  path.startsWith("com/google/common/b") -> true
  path.startsWith("kotlin/se") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/p") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/descriptors/i") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/u") -> true
  path.startsWith("kotlin/ra") -> true
  path.startsWith("com/f") -> true
  path.startsWith("com/google/common/collect/A") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/ren") -> true
  path.startsWith("com/google/common/collect/MapM") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/types/c") -> true
  path.startsWith("com/intellij/util/x") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/resolve/s") -> true
  path.startsWith("com/intellij/util/containers/T") -> true
  path.startsWith("com/google/common/collect/L") -> true
  path.startsWith("com/google/common/collect/ImmutableM") -> true
  path.startsWith("com/google/common/collect/C") -> true
  path.startsWith("kotlin/reflect/jvm/internal/KP") -> true
  path.startsWith("com/intellij/util/containers/J") -> true
  path.startsWith("com/google/common/collect/R") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/st") -> true
  path.startsWith("kotlin/U") -> true
  path.startsWith("com/google/common/collect/Sy") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/typeEnhancement/P") -> true
  path.startsWith("kotlin/reflect/jvm/internal/calls/C") -> true
  path.startsWith("kotlin/reflect/jvm/internal/KClassI") -> true
  path.startsWith("org/i") -> true
  path.startsWith("kotlin/jvm/f") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/metadata/jvm/J") -> true
  path.startsWith("com/google/common/collect/Multis") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/descriptors/a") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/J") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/serialization/deserialization/descriptors/DeserializedM") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/descriptors/D") -> true
  path.startsWith("com/google/common/collect/MultimapB") -> true
  path.startsWith("com/intellij/openapi/util/t") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/types/Ab") -> true
  path.startsWith("com/google/common/p") -> true
  path.startsWith("com/intellij/util/conc") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/lazy/descriptors/LazyJavaC") -> true
  path.startsWith("com/google/common/collect/So") -> true
  path.startsWith("com/google/common/collect/T") -> true
  path.startsWith("com/intellij/openapi/d") -> true
  path.startsWith("com/intellij/util/containers/I") -> true
  path.startsWith("org/c") -> true
  path.startsWith("com/google/common/collect/St") -> true
  path.startsWith("com/intellij/util/containers/F") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/descriptors/V") -> true
  path.startsWith("com/intellij/openapi/extensions/E") -> true
  path.startsWith("com/intellij/util/containers/ConcurrentW") -> true
  path.startsWith("com/intellij/util/d") -> true
  path.startsWith("gnu/trove/TH") -> true
  path.startsWith("kotlin/jvm/J") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/descriptors/runtime/c") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/metadata/d") -> true
  path.startsWith("com/intellij/util/containers/ConcurrentI") -> true
  path.startsWith("com/intellij/util/containers/ConcurrentL") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/components/J") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/resolve/O") -> true
  path.startsWith("com/google/common/collect/ImmutableR") -> true
  path.startsWith("com/intellij/util/containers/U") -> true
  path.startsWith("com/intellij/util/containers/h") -> true
  path.startsWith("kotlin/reflect/jvm/internal/J") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/descriptors/C") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/descriptors/P") -> true
  path.startsWith("com/google/common/collect/Maps\$F") -> true
  path.startsWith("kotlin/reflect/jvm/internal/R") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/lazy/descriptors/LazyJavaP") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/kotlin/K") -> true
  path.startsWith("com/google/common/collect/Fo") -> true
  path.startsWith("com/google/common/collect/ImmutableSe") -> true
  path.startsWith("com/intellij/openapi/util/Co") -> true
  path.startsWith("com/intellij/patterns/O") -> true
  path.startsWith("com/intellij/util/io/PersistentMapI") -> true
  path.startsWith("com/intellij/util/io/k") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/descriptors/S") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/descriptors/runtime/structure/ReflectJavaC") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/kotlin/J") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/n") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/types/TypeC") -> true
  path.startsWith("com/google/common/g") -> true
  path.startsWith("com/intellij/ic") -> true
  path.startsWith("com/intellij/openapi/editor/e") -> true
  path.startsWith("com/intellij/openapi/util/R") -> true
  path.startsWith("com/intellij/psi/util/CachedValueP") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/types/t") -> true
  path.startsWith("com/intellij/openapi/util/A") -> true
  path.startsWith("com/intellij/openapi/util/N") -> true
  path.startsWith("com/intellij/seri") -> true
  path.startsWith("kotlin/S") -> true
  path.startsWith("kotlin/reflect/jvm/internal/KCa") -> true
  path.startsWith("kotlin/reflect/jvm/internal/KT") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/S") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/types/D") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/types/S") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/types/TypeSu") -> true
  path.startsWith("com/intellij/psi/codeStyle/T") -> true
  path.startsWith("com/intellij/util/containers/M") -> true
  path.startsWith("com/intellij/util/containers/R") -> true
  path.startsWith("com/intellij/util/io/C") -> true
  path.startsWith("com/intellij/util/io/Wa") -> true
  path.startsWith("kotlin/D") -> true
  path.startsWith("kotlin/reflect/jvm/internal/KD") -> true
  path.startsWith("kotlin/reflect/jvm/internal/KM") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/descriptors/d") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/i") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/descriptors/J") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/kotlin/D") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/resolve/constants/I") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/serialization/deserialization/C") -> true
  path.startsWith("org/jdom/C") -> true
  path.startsWith("com/google/common/collect/ImmutableL") -> true
  path.startsWith("com/google/common/m") -> true
  path.startsWith("com/intellij/patterns/S") -> true
  path.startsWith("com/intellij/util/containers/ConcurrentS") -> true
  path.startsWith("kotlin/N") -> true
  path.startsWith("kotlin/p") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/lazy/L") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/serialization/deserialization/A") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/serialization/deserialization/P") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/serialization/deserialization/T") -> true
  path.startsWith("com/google/common/collect/FilteredK") -> true
  path.startsWith("com/google/common/collect/ImmutableE") -> true
  path.startsWith("com/google/common/h") -> true
  path.startsWith("com/intellij/openapi/util/L") -> true
  path.startsWith("gnu/trove/TIntI") -> true
  path.startsWith("kotlin/E") -> true
  path.startsWith("kotlin/L") -> true
  path.startsWith("kotlin/P") -> true
  path.startsWith("kotlin/R") -> true
  path.startsWith("kotlin/reflect/KC") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/descriptors/M") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/B") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/resolve/j") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/serialization/deserialization/descriptors/DeserializedClassDescriptor\$D") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/types/K") -> true
  path.startsWith("org/jetbrains/a") -> true
  path.startsWith("com/google/common/collect/D") -> true
  path.startsWith("com/google/common/collect/E") -> true
  path.startsWith("com/google/common/collect/J") -> true
  path.startsWith("com/intellij/openapi/extensions/S") -> true
  path.startsWith("com/intellij/openapi/util/T") -> true
  path.startsWith("com/intellij/openapi/util/U") -> true
  path.startsWith("com/intellij/util/containers/L") -> true
  path.startsWith("com/intellij/util/containers/So") -> true
  path.startsWith("com/intellij/util/containers/W") -> true
  path.startsWith("com/intellij/util/io/E") -> true
  path.startsWith("com/intellij/util/io/PersistentB") -> true
  path.startsWith("com/intellij/util/lang/ClassP") -> true
  path.startsWith("com/intellij/util/p") -> true
  path.startsWith("gnu/trove/TIntH") -> true
  path.startsWith("gnu/trove/TIntO") -> true
  path.startsWith("gnu/trove/TLongH") -> true
  path.startsWith("gnu/trove/TObjectIn") -> true
  path.startsWith("gnu/trove/TObjectL") -> true
  path.startsWith("kotlin/a") -> true
  path.startsWith("kotlin/reflect/KT") -> true
  path.startsWith("kotlin/reflect/T") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/builtins/K") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/builtins/jvm/JvmBuiltIns\$") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/descriptors/F") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/descriptors/N") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/descriptors/T") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/descriptors/runtime/structure/J") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/resolve/ca") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/serialization/deserialization/b") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/types/I") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/types/TypeA") -> true
  path.startsWith("com/google/common/collect/FilteredEntryMultimap\$A") -> true
  path.startsWith("com/google/common/collect/Fl") -> true
  path.startsWith("com/google/common/collect/ImmutableSortedS") -> true
  path.startsWith("com/google/common/collect/Maps\$1") -> true
  path.startsWith("com/google/common/collect/Maps\$E") -> true
  path.startsWith("com/google/common/collect/O") -> true
  path.startsWith("com/google/common/i") -> true
  path.startsWith("com/google/common/u") -> true
  path.startsWith("com/intellij/openapi/editor/m") -> true
  path.startsWith("com/intellij/openapi/util/r") -> true
  path.startsWith("com/intellij/openapi/vfs/impl/A") -> true
  path.startsWith("com/intellij/psi/ResolveS") -> true
  path.startsWith("com/intellij/util/Com") -> true
  path.startsWith("com/intellij/util/S") -> true
  path.startsWith("com/intellij/util/io/Da") -> true
  path.startsWith("com/intellij/util/messages/M") -> true
  path.startsWith("com/intellij/util/text/Ch") -> true
  path.startsWith("com/intellij/util/text/I") -> true
  path.startsWith("kotlin/K") -> true
  path.startsWith("kotlin/T") -> true
  path.startsWith("kotlin/m") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/lazy/types/J") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/structure/JavaC") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/typeEnhancement/J") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/metadata/jvm/deserialization/JvmM") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/resolve/constants/K") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/resolve/constants/U") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/types/F") -> true
  path.startsWith("kotlin/st") -> true
  path.startsWith("org/jdom/A") -> true
  path.startsWith("com/google/common/collect/B") -> true
  path.startsWith("com/google/common/collect/H") -> true
  path.startsWith("com/google/common/collect/ImmutableB") -> true
  path.startsWith("com/google/common/collect/Maps\$U") -> true
  path.startsWith("com/google/common/collect/Multimaps\$C") -> true
  path.startsWith("com/google/common/collect/Sets\$5") -> true
  path.startsWith("com/google/common/collect/U") -> true
  path.startsWith("com/intellij/ide/plugins/Mo") -> true
  path.startsWith("com/intellij/openapi/extensions/P") -> true
  path.startsWith("com/intellij/openapi/util/D") -> true
  path.startsWith("com/intellij/openapi/util/io/FileSystemUtil\$J") -> true
  path.startsWith("com/intellij/util/T") -> true
  path.startsWith("com/intellij/util/io/PersistentEnumeratorC") -> true
  path.startsWith("com/intellij/util/io/PersistentHashMapValueStorage\$R") -> true
  path.startsWith("com/intellij/util/r") -> true
  path.startsWith("com/intellij/util/text/V") -> true
  path.startsWith("gnu/trove/TIntLongH") -> true
  path.startsWith("gnu/trove/TLongIntH") -> true
  path.startsWith("gnu/trove/TLongObjectH") -> true
  path.startsWith("gnu/trove/TObjectH") -> true
  path.startsWith("kotlin/C") -> true
  path.startsWith("kotlin/reflect/jvm/R") -> true
  path.startsWith("kotlin/reflect/jvm/internal/KF") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/builtins/B") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/builtins/P") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/builtins/R") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/builtins/jvm/JvmBuiltInC") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/descriptors/I") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/descriptors/j") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/N") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/lazy/JavaR") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/lazy/descriptors/LazyJavaA") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/typeEnhancement/SignatureEnhancement\$e") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/typeEnhancement/TypeE") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/kotlin/M") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/resolve/constants/E") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/serialization/deserialization/DeserializedP") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/serialization/deserialization/descriptors/DeserializedClassDescriptor\$E") -> true
  path.startsWith("com/google/common/collect/Iterators\$1") -> true
  path.startsWith("com/google/common/collect/Maps\$S") -> true
  path.startsWith("com/google/common/collect/Maps\$T") -> true
  path.startsWith("com/google/common/collect/Maps\$V") -> true
  path.startsWith("com/google/common/collect/Multimaps\$K") -> true
  path.startsWith("com/google/common/collect/Multimaps\$M") -> true
  path.startsWith("com/google/common/collect/N") -> true
  path.startsWith("com/google/common/collect/Ser") -> true
  path.startsWith("com/google/common/collect/Sets\$F") -> true
  path.startsWith("com/google/common/collect/Sets\$S") -> true
  path.startsWith("com/google/common/collect/Si") -> true
  path.startsWith("com/intellij/diagnostic/A") -> true
  path.startsWith("com/intellij/diagnostic/L") -> true
  path.startsWith("com/intellij/openapi/components/C") -> true
  path.startsWith("com/intellij/openapi/editor/R") -> true
  path.startsWith("com/intellij/openapi/editor/impl/L") -> true
  path.startsWith("com/intellij/openapi/extensions/L") -> true
  path.startsWith("com/intellij/openapi/extensions/impl/I") -> true
  path.startsWith("com/intellij/openapi/util/Cle") -> true
  path.startsWith("com/intellij/openapi/util/Sh") -> true
  path.startsWith("com/intellij/openapi/util/io/B") -> true
  path.startsWith("com/intellij/openapi/util/io/FileA") -> true
  path.startsWith("com/intellij/openapi/util/io/FileUtil\$") -> true
  path.startsWith("com/intellij/openapi/util/io/FileUtilRt\$C") -> true
  path.startsWith("com/intellij/openapi/vfs/impl/ZipH") -> true
  path.startsWith("com/intellij/patterns/Pa") -> true
  path.startsWith("com/intellij/patterns/T") -> true
  path.startsWith("com/intellij/psi/codeStyle/F") -> true
  path.startsWith("com/intellij/psi/codeStyle/M") -> true
  path.startsWith("com/intellij/psi/codeStyle/S") -> true
  path.startsWith("com/intellij/psi/impl/source/Ch") -> true
  path.startsWith("com/intellij/util/Ar") -> true
  path.startsWith("com/intellij/util/O") -> true
  path.startsWith("com/intellij/util/Pai") -> true
  path.startsWith("com/intellij/util/W") -> true
  path.startsWith("com/intellij/util/containers/ConcurrentRefV") -> true
  path.startsWith("com/intellij/util/containers/D") -> true
  path.startsWith("com/intellij/util/containers/E") -> true
  path.startsWith("com/intellij/util/containers/Si") -> true
  path.startsWith("com/intellij/util/graph/G") -> true
  path.startsWith("com/intellij/util/io/A") -> true
  path.startsWith("com/intellij/util/io/B") -> true
  path.startsWith("com/intellij/util/io/FileA") -> true
  path.startsWith("com/intellij/util/io/PersistentMapWalP") -> true
  path.startsWith("com/intellij/util/io/S") -> true
  path.startsWith("com/intellij/util/io/Uns") -> true
  path.startsWith("com/intellij/util/lang/ClassL") -> true
  path.startsWith("com/intellij/util/messages/impl/Met") -> true
  path.startsWith("com/intellij/util/text/O") -> true
  path.startsWith("com/intellij/util/u") -> true
  path.startsWith("kotlin/O") -> true
  path.startsWith("kotlin/reflect/KPa") -> true
  path.startsWith("kotlin/reflect/KProperty\$") -> true
  path.startsWith("kotlin/reflect/full/KCa") -> true
  path.startsWith("kotlin/reflect/jvm/K") -> true
  path.startsWith("kotlin/reflect/jvm/internal/U") -> true
  path.startsWith("kotlin/reflect/jvm/internal/calls/Int") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/builtins/S") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/builtins/U") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/builtins/jvm/Ja") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/builtins/jvm/JvmBuiltInsCustomizer\$c") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/descriptors/runtime/structure/ReflectC") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/descriptors/runtime/structure/ReflectJavaAnnotationA") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/descriptors/runtime/structure/ReflectJavaT") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/E") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/components/D") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/components/S") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/lazy/C") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/lazy/descriptors/J") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/lazy/descriptors/LazyJavaScope\$d") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/lazy/descriptors/LazyJavaStaticClassScope\$c") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/typeEnhancement/SignatureEnhancementB") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/kotlin/AbstractBinaryClassAnnotationAndConstantLoader\$loadA") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/kotlin/TypeMappingM") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/kotlin/header/K") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/kotlin/header/ReadKotlinClassHeaderAnnotationVisitor\$O") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/metadata/b") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/resolve/E") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/resolve/M") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/serialization/deserialization/MemberDeserializer\$g") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/serialization/deserialization/descriptors/DeserializedT") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/types/TypeP") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/types/model/C") -> true
  path.startsWith("org/jdom/I") -> true
  path.startsWith("com/google/common/collect/FilteredM") -> true
  path.startsWith("com/google/common/collect/ImmutableA") -> true
  path.startsWith("com/google/common/collect/ImmutableC") -> true
  path.startsWith("com/google/common/collect/ImmutableSortedMap\$1E") -> true
  path.startsWith("com/google/common/collect/In") -> true
  path.startsWith("com/google/common/collect/Iterables\$6") -> true
  path.startsWith("com/google/common/collect/MapD") -> true
  path.startsWith("com/google/common/collect/Maps\$As") -> true
  path.startsWith("com/google/common/collect/Maps\$D") -> true
  path.startsWith("com/google/common/collect/Maps\$I") -> true
  path.startsWith("com/google/common/collect/Maps\$N") -> true
  path.startsWith("com/google/common/collect/Multimaps\$UnmodifiableS") -> true
  path.startsWith("com/google/common/collect/P") -> true
  path.startsWith("com/google/common/collect/Sets\$1") -> true
  path.startsWith("com/google/common/collect/Sets\$2") -> true
  path.startsWith("com/google/common/collect/Sets\$3") -> true
  path.startsWith("com/google/common/collect/Sets\$4") -> true
  path.startsWith("com/google/common/collect/Sets\$C") -> true
  path.startsWith("com/google/common/collect/Sets\$P") -> true
  path.startsWith("com/intellij/A") -> true
  path.startsWith("com/intellij/diagnostic/T") -> true
  path.startsWith("com/intellij/lang/folding/F") -> true
  path.startsWith("com/intellij/lang/jvm/annotation/JvmAnnotationAt") -> true
  path.startsWith("com/intellij/lexer/LexerP") -> true
  path.startsWith("com/intellij/openapi/D") -> true
  path.startsWith("com/intellij/openapi/application/Ac") -> true
  path.startsWith("com/intellij/openapi/application/B") -> true
  path.startsWith("com/intellij/openapi/application/ex/ApplicationI") -> true
  path.startsWith("com/intellij/openapi/editor/a") -> true
  path.startsWith("com/intellij/openapi/editor/impl/DocumentW") -> true
  path.startsWith("com/intellij/openapi/editor/impl/Re") -> true
  path.startsWith("com/intellij/openapi/progress/C") -> true
  path.startsWith("com/intellij/openapi/util/E") -> true
  path.startsWith("com/intellij/openapi/util/J") -> true
  path.startsWith("com/intellij/openapi/util/KeyW") -> true
  path.startsWith("com/intellij/openapi/util/M") -> true
  path.startsWith("com/intellij/openapi/util/O") -> true
  path.startsWith("com/intellij/openapi/util/Sy") -> true
  path.startsWith("com/intellij/openapi/util/io/FileUtilRt\$F") -> true
  path.startsWith("com/intellij/openapi/util/io/N") -> true
  path.startsWith("com/intellij/openapi/util/o") -> true
  path.startsWith("com/intellij/openapi/vfs/Ch") -> true
  path.startsWith("com/intellij/patterns/In") -> true
  path.startsWith("com/intellij/psi/codeStyle/D") -> true
  path.startsWith("com/intellij/psi/util/Pa") -> true
  path.startsWith("com/intellij/ui/i") -> true
  path.startsWith("com/intellij/util/Exc") -> true
  path.startsWith("com/intellij/util/L") -> true
  path.startsWith("com/intellij/util/Not") -> true
  path.startsWith("com/intellij/util/PathUtilR") -> true
  path.startsWith("com/intellij/util/Pl") -> true
  path.startsWith("com/intellij/util/containers/B") -> true
  path.startsWith("com/intellij/util/containers/Col") -> true
  path.startsWith("com/intellij/util/containers/ConcurrentRefHashMap\$E") -> true
  path.startsWith("com/intellij/util/containers/ContainerUtilR") -> true
  path.startsWith("com/intellij/util/containers/Conv") -> true
  path.startsWith("com/intellij/util/containers/H") -> true
  path.startsWith("com/intellij/util/containers/N") -> true
  path.startsWith("com/intellij/util/containers/O") -> true
  path.startsWith("com/intellij/util/containers/SLRUC") -> true
  path.startsWith("com/intellij/util/containers/Sm") -> true
  path.startsWith("com/intellij/util/graph/DFSTBuilder\$T") -> true
  path.startsWith("com/intellij/util/io/FileP") -> true
  path.startsWith("com/intellij/util/io/IOU") -> true
  path.startsWith("com/intellij/util/io/IntToIntBtree\$BtreeI") -> true
  path.startsWith("com/intellij/util/io/K") -> true
  path.startsWith("com/intellij/util/io/Paged") -> true
  path.startsWith("com/intellij/util/io/PersistentEnumeratorBase\$R") -> true
  path.startsWith("com/intellij/util/io/PersistentHashMapValueStorage\$C") -> true
  path.startsWith("com/intellij/util/io/PersistentMapB") -> true
  path.startsWith("com/intellij/util/io/Re") -> true
  path.startsWith("com/intellij/util/lang/F") -> true
  path.startsWith("com/intellij/util/lang/Ja") -> true
  path.startsWith("com/intellij/util/lang/R") -> true
  path.startsWith("com/intellij/util/lang/Z") -> true
  path.startsWith("com/intellij/util/messages/T") -> true
  path.startsWith("com/intellij/util/text/M") -> true
  path.startsWith("gnu/trove/TByteA") -> true
  path.startsWith("gnu/trove/TIntA") -> true
  path.startsWith("gnu/trove/TLongA") -> true
  path.startsWith("gnu/trove/TP") -> true
  path.startsWith("kotlin/M") -> true
  path.startsWith("kotlin/enums/EnumEntriesS") -> true
  path.startsWith("kotlin/experimental/ExperimentalO") -> true
  path.startsWith("kotlin/jvm/S") -> true
  path.startsWith("kotlin/jvm/T") -> true
  path.startsWith("kotlin/reflect/KF") -> true
  path.startsWith("kotlin/reflect/KV") -> true
  path.startsWith("kotlin/reflect/P") -> true
  path.startsWith("kotlin/reflect/W") -> true
  path.startsWith("kotlin/reflect/full/I") -> true
  path.startsWith("kotlin/reflect/full/J") -> true
  path.startsWith("kotlin/reflect/full/KClasses\$i") -> true
  path.startsWith("kotlin/reflect/full/KClassi") -> true
  path.startsWith("kotlin/reflect/jvm/internal/F") -> true
  path.startsWith("kotlin/reflect/jvm/internal/calls/AnnotationConstructorCaller\$") -> true
  path.startsWith("kotlin/reflect/jvm/internal/calls/AnnotationConstructorCallerKt\$createAnnotationInstance\$t") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/S") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/builtins/C") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/builtins/D") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/builtins/F") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/builtins/functions/FunctionI") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/builtins/jvm/C") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/builtins/jvm/F") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/builtins/jvm/JvmBuiltInsP") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/descriptors/runtime/structure/ReflectJavaAr") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/descriptors/runtime/structure/ReflectJavaE") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/descriptors/runtime/structure/ReflectJavaMe") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/descriptors/runtime/structure/ReflectJavaP") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/AnnotationQ") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/C") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/F") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/R") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/lazy/T") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/lazy/descriptors/C") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/lazy/descriptors/D") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/lazy/descriptors/LazyJavaScope\$f") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/lazy/descriptors/LazyJavaScope\$p") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/lazy/types/RawT") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/so") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/structure/JavaAnnotationA") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/structure/JavaAr") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/structure/JavaE") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/structure/JavaL") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/structure/JavaP") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/structure/JavaTypeP") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/typeEnhancement/E") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/typeEnhancement/Nu") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/typeEnhancement/TypeC") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/kotlin/P") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/kotlin/S") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/resolve/DescriptorF") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/resolve/R") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/resolve/constants/A") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/resolve/constants/B") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/resolve/constants/S") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/serialization/deserialization/E") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/serialization/deserialization/F") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/serialization/deserialization/L") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/serialization/deserialization/descriptors/DeserializedClassDescriptor\$c") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/serialization/deserialization/descriptors/DeserializedCo") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/serialization/deserialization/descriptors/DeserializedP") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/types/Cl") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/types/L") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/types/TypeU") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/types/TypeW") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/types/model/D") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/types/model/S") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/types/model/TypeA") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/types/model/TypeSystemContextK") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/types/model/TypeV") -> true
  path.startsWith("kotlin/sy") -> true
  path.startsWith("org/a") -> true
  path.startsWith("org/jdom/D") -> true
  path.startsWith("org/jdom/E") -> true
  path.startsWith("org/jdom/N") -> true
  path.startsWith("org/jdom/P") -> true
  path.startsWith("com/google/common/collect/FilteredEntryMultimap\$Keys\$1.") -> true
  path.startsWith("com/google/common/collect/FilteredEntryMultimap\$Keys.") -> true
  path.startsWith("com/google/common/collect/FilteredEntryMultimap\$V") -> true
  path.startsWith("com/google/common/collect/FilteredEntryMultimap.") -> true
  path.startsWith("com/google/common/collect/FilteredEntryS") -> true
  path.startsWith("com/google/common/collect/FilteredS") -> true
  path.startsWith("com/google/common/collect/ImmutableSortedA") -> true
  path.startsWith("com/google/common/collect/ImmutableSortedMap\$B") -> true
  path.startsWith("com/google/common/collect/ImmutableSortedMap\$S") -> true
  path.startsWith("com/google/common/collect/ImmutableSortedMap.") -> true
  path.startsWith("com/google/common/collect/ImmutableSortedMapF") -> true
  path.startsWith("com/google/common/collect/Iterables\$1.") -> true
  path.startsWith("com/google/common/collect/Iterables\$2") -> true
  path.startsWith("com/google/common/collect/Iterables\$3") -> true
  path.startsWith("com/google/common/collect/Iterables\$4") -> true
  path.startsWith("com/google/common/collect/Iterables\$5") -> true
  path.startsWith("com/google/common/collect/Iterables\$7") -> true
  path.startsWith("com/google/common/collect/Iterables\$8") -> true
  path.startsWith("com/google/common/collect/Iterables\$9") -> true
  path.startsWith("com/google/common/collect/Iterables\$U") -> true
  path.startsWith("com/google/common/collect/Iterables.") -> true
  path.startsWith("com/google/common/collect/Iterators\$2") -> true
  path.startsWith("com/google/common/collect/Iterators\$3") -> true
  path.startsWith("com/google/common/collect/Iterators\$4") -> true
  path.startsWith("com/google/common/collect/Iterators\$5") -> true
  path.startsWith("com/google/common/collect/Iterators\$6") -> true
  path.startsWith("com/google/common/collect/Iterators\$7") -> true
  path.startsWith("com/google/common/collect/Iterators\$8") -> true
  path.startsWith("com/google/common/collect/Iterators\$9") -> true
  path.startsWith("com/google/common/collect/Iterators\$A") -> true
  path.startsWith("com/google/common/collect/Iterators\$C") -> true
  path.startsWith("com/google/common/collect/Iterators\$E") -> true
  path.startsWith("com/google/common/collect/Iterators\$MergingIterator.") -> true
  path.startsWith("com/google/common/collect/Iterators\$P") -> true
  path.startsWith("com/google/common/collect/Iterators.") -> true
  path.startsWith("com/google/common/collect/Maps\$2") -> true
  path.startsWith("com/google/common/collect/Maps\$3") -> true
  path.startsWith("com/google/common/collect/Maps\$4") -> true
  path.startsWith("com/google/common/collect/Maps\$5") -> true
  path.startsWith("com/google/common/collect/Maps\$6") -> true
  path.startsWith("com/google/common/collect/Maps\$7") -> true
  path.startsWith("com/google/common/collect/Maps\$8") -> true
  path.startsWith("com/google/common/collect/Maps\$9") -> true
  path.startsWith("com/google/common/collect/Maps\$Ab") -> true
  path.startsWith("com/google/common/collect/Maps\$B") -> true
  path.startsWith("com/google/common/collect/Maps\$K") -> true
  path.startsWith("com/google/common/collect/Maps\$M") -> true
  path.startsWith("com/google/common/collect/Maps.") -> true
  path.startsWith("com/google/common/collect/Multimap.") -> true
  path.startsWith("com/google/common/collect/Multimaps\$AsMap\$EntrySet.") -> true
  path.startsWith("com/google/common/collect/Multimaps\$AsMap.") -> true
  path.startsWith("com/google/common/collect/Multimaps\$E") -> true
  path.startsWith("com/google/common/collect/Multimaps\$TransformedEntriesL") -> true
  path.startsWith("com/google/common/collect/Multimaps\$TransformedEntriesMultimap.") -> true
  path.startsWith("com/google/common/collect/Multimaps\$UnmodifiableL") -> true
  path.startsWith("com/google/common/collect/Multimaps\$UnmodifiableMultimap.") -> true
  path.startsWith("com/google/common/collect/Multimaps.") -> true
  path.startsWith("com/google/common/collect/SetM") -> true
  path.startsWith("com/google/common/collect/Sets\$I") -> true
  path.startsWith("com/google/common/collect/Sets\$U") -> true
  path.startsWith("com/google/common/collect/Sets.") -> true
  path.startsWith("com/intellij/B") -> true
  path.startsWith("com/intellij/U") -> true
  path.startsWith("com/intellij/codeInsight/CodeInsightUtilCore.") -> true
  path.startsWith("com/intellij/codeInsight/Con") -> true
  path.startsWith("com/intellij/codeInsight/F") -> true
  path.startsWith("com/intellij/codeInsight/folding/C") -> true
  path.startsWith("com/intellij/con") -> true
  path.startsWith("com/intellij/diagnostic/I") -> true
  path.startsWith("com/intellij/diagnostic/S") -> true
  path.startsWith("com/intellij/f") -> true
  path.startsWith("com/intellij/ide/IconL") -> true
  path.startsWith("com/intellij/ide/plugins/C") -> true
  path.startsWith("com/intellij/ide/plugins/IdeaPluginDescriptor.") -> true
  path.startsWith("com/intellij/ide/plugins/Im") -> true
  path.startsWith("com/intellij/ide/plugins/Re") -> true
  path.startsWith("com/intellij/ide/plugins/c") -> true
  path.startsWith("com/intellij/injected/editor/D") -> true
  path.startsWith("com/intellij/j") -> true
  path.startsWith("com/intellij/lang/Com") -> true
  path.startsWith("com/intellij/lang/jvm/annotation/JvmAnnotationCo") -> true
  path.startsWith("com/intellij/lang/jvm/annotation/JvmAnnotationE") -> true
  path.startsWith("com/intellij/mock/MockDumbU") -> true
  path.startsWith("com/intellij/model/S") -> true
  path.startsWith("com/intellij/navigation/C") -> true
  path.startsWith("com/intellij/navigation/ItemPresentation.") -> true
  path.startsWith("com/intellij/navigation/ItemPresentationProvider.") -> true
  path.startsWith("com/intellij/navigation/N") -> true
  path.startsWith("com/intellij/openapi/F") -> true
  path.startsWith("com/intellij/openapi/application/ApplicationI") -> true
  path.startsWith("com/intellij/openapi/application/ApplicationL") -> true
  path.startsWith("com/intellij/openapi/application/ApplicationN") -> true
  path.startsWith("com/intellij/openapi/application/C") -> true
  path.startsWith("com/intellij/openapi/application/E") -> true
  path.startsWith("com/intellij/openapi/application/ModalityI") -> true
  path.startsWith("com/intellij/openapi/application/ModalityStateL") -> true
  path.startsWith("com/intellij/openapi/application/P") -> true
  path.startsWith("com/intellij/openapi/command/CommandT") -> true
  path.startsWith("com/intellij/openapi/command/U") -> true
  path.startsWith("com/intellij/openapi/command/impl/Com") -> true
  path.startsWith("com/intellij/openapi/command/undo/UndoC") -> true
  path.startsWith("com/intellij/openapi/components/Service.") -> true
  path.startsWith("com/intellij/openapi/components/ServiceDescriptor\$P") -> true
  path.startsWith("com/intellij/openapi/components/ServiceDescriptor.") -> true
  path.startsWith("com/intellij/openapi/editor/Document.") -> true
  path.startsWith("com/intellij/openapi/editor/colors/Col") -> true
  path.startsWith("com/intellij/openapi/editor/impl/F") -> true
  path.startsWith("com/intellij/openapi/editor/impl/PersistentRangeMarkerU") -> true
  path.startsWith("com/intellij/openapi/editor/impl/S") -> true
  path.startsWith("com/intellij/openapi/editor/impl/e") -> true
  path.startsWith("com/intellij/openapi/extensions/A") -> true
  path.startsWith("com/intellij/openapi/extensions/B") -> true
  path.startsWith("com/intellij/openapi/extensions/D") -> true
  path.startsWith("com/intellij/openapi/extensions/I") -> true
  path.startsWith("com/intellij/openapi/extensions/impl/B") -> true
  path.startsWith("com/intellij/openapi/extensions/impl/ExtensionC") -> true
  path.startsWith("com/intellij/openapi/extensions/impl/ExtensionPointImpl\$1") -> true
  path.startsWith("com/intellij/openapi/extensions/impl/ExtensionPointImpl\$O") -> true
  path.startsWith("com/intellij/openapi/extensions/impl/ExtensionPointImpl.") -> true
  path.startsWith("com/intellij/openapi/extensions/impl/ExtensionPr") -> true
  path.startsWith("com/intellij/openapi/extensions/impl/Extensions") -> true
  path.startsWith("com/intellij/openapi/extensions/impl/XmlExtensionAdapter.") -> true
  path.startsWith("com/intellij/openapi/progress/Pe") -> true
  path.startsWith("com/intellij/openapi/progress/Proc") -> true
  path.startsWith("com/intellij/openapi/progress/TaskI") -> true
  path.startsWith("com/intellij/openapi/progress/impl/ProgressRe") -> true
  path.startsWith("com/intellij/openapi/project/DumbA") -> true
  path.startsWith("com/intellij/openapi/project/DumbU") -> true
  path.startsWith("com/intellij/openapi/project/I") -> true
  path.startsWith("com/intellij/openapi/project/Po") -> true
  path.startsWith("com/intellij/openapi/ui") -> true
  path.startsWith("com/intellij/openapi/util/BuildNumber.") -> true
  path.startsWith("com/intellij/openapi/util/Ch") -> true
  path.startsWith("com/intellij/openapi/util/F") -> true
  path.startsWith("com/intellij/openapi/util/G") -> true
  path.startsWith("com/intellij/openapi/util/I") -> true
  path.startsWith("com/intellij/openapi/util/Key.") -> true
  path.startsWith("com/intellij/openapi/util/Pair\$1") -> true
  path.startsWith("com/intellij/openapi/util/Pair\$2") -> true
  path.startsWith("com/intellij/openapi/util/Pair\$N") -> true
  path.startsWith("com/intellij/openapi/util/Pair.") -> true
  path.startsWith("com/intellij/openapi/util/Pr") -> true
  path.startsWith("com/intellij/openapi/util/Se") -> true
  path.startsWith("com/intellij/openapi/util/Si") -> true
  path.startsWith("com/intellij/openapi/util/Stac") -> true
  path.startsWith("com/intellij/openapi/util/VolatileNullableLazyValue.") -> true
  path.startsWith("com/intellij/openapi/util/io/D") -> true
  path.startsWith("com/intellij/openapi/util/io/FileSystemUtil\$1") -> true
  path.startsWith("com/intellij/openapi/util/io/FileSystemUtil\$M") -> true
  path.startsWith("com/intellij/openapi/util/io/FileSystemUtil\$N") -> true
  path.startsWith("com/intellij/openapi/util/io/FileSystemUtil.") -> true
  path.startsWith("com/intellij/openapi/util/io/FileT") -> true
  path.startsWith("com/intellij/openapi/util/io/FileUtil.") -> true
  path.startsWith("com/intellij/openapi/util/io/FileUtilRt\$1") -> true
  path.startsWith("com/intellij/openapi/util/io/FileUtilRt\$2") -> true
  path.startsWith("com/intellij/openapi/util/io/FileUtilRt\$R") -> true
  path.startsWith("com/intellij/openapi/util/io/FileUtilRt\$S") -> true
  path.startsWith("com/intellij/openapi/util/io/FileUtilRt.") -> true
  path.startsWith("com/intellij/openapi/util/io/J") -> true
  path.startsWith("com/intellij/openapi/util/io/O") -> true
  path.startsWith("com/intellij/openapi/util/io/P") -> true
  path.startsWith("com/intellij/openapi/vfs/H") -> true
  path.startsWith("com/intellij/openapi/vfs/N") -> true
  path.startsWith("com/intellij/openapi/vfs/P") -> true
  path.startsWith("com/intellij/openapi/vfs/VF") -> true
  path.startsWith("com/intellij/openapi/vfs/VirtualFileManagerL") -> true
  path.startsWith("com/intellij/openapi/vfs/VirtualFileW") -> true
  path.startsWith("com/intellij/openapi/vfs/impl/C") -> true
  path.startsWith("com/intellij/openapi/vfs/impl/ZipEntryMap\$1") -> true
  path.startsWith("com/intellij/openapi/vfs/impl/ZipEntryMap\$EntrySet.") -> true
  path.startsWith("com/intellij/openapi/vfs/impl/ZipEntryMap.") -> true
  path.startsWith("com/intellij/openapi/vfs/newvfs/C") -> true
  path.startsWith("com/intellij/openapi/vfs/newvfs/events/C") -> true
  path.startsWith("com/intellij/openapi/vfs/p") -> true
  path.startsWith("com/intellij/patterns/C") -> true
  path.startsWith("com/intellij/patterns/ElementPattern.") -> true
  path.startsWith("com/intellij/patterns/ElementPatternC") -> true
  path.startsWith("com/intellij/patterns/Pr") -> true
  path.startsWith("com/intellij/patterns/V") -> true
  path.startsWith("com/intellij/patterns/compiler/PatternCompiler.") -> true
  path.startsWith("com/intellij/pom/N") -> true
  path.startsWith("com/intellij/pom/PomModelA") -> true
  path.startsWith("com/intellij/pom/PomN") -> true
  path.startsWith("com/intellij/pom/PomR") -> true
  path.startsWith("com/intellij/pom/PomTarget.") -> true
  path.startsWith("com/intellij/pom/event/PomC") -> true
  path.startsWith("com/intellij/pom/tree/T") -> true
  path.startsWith("com/intellij/pom/tree/events/T") -> true
  path.startsWith("com/intellij/psi/CommonC") -> true
  path.startsWith("com/intellij/psi/ExternalChangeAction.") -> true
  path.startsWith("com/intellij/psi/ExternallyA") -> true
  path.startsWith("com/intellij/psi/Ig") -> true
  path.startsWith("com/intellij/psi/O") -> true
  path.startsWith("com/intellij/psi/PsiLock") -> true
  path.startsWith("com/intellij/psi/PsiRecursiveV") -> true
  path.startsWith("com/intellij/psi/Synth") -> true
  path.startsWith("com/intellij/psi/codeStyle/A") -> true
  path.startsWith("com/intellij/psi/codeStyle/Ch") -> true
  path.startsWith("com/intellij/psi/codeStyle/I") -> true
  path.startsWith("com/intellij/psi/codeStyle/NameUtil\$MatcherB") -> true
  path.startsWith("com/intellij/psi/codeStyle/NameUtil\$Matchi") -> true
  path.startsWith("com/intellij/psi/codeStyle/NameUtil.") -> true
  path.startsWith("com/intellij/psi/codeStyle/P") -> true
  path.startsWith("com/intellij/psi/codeStyle/W") -> true
  path.startsWith("com/intellij/psi/impl/An") -> true
  path.startsWith("com/intellij/psi/impl/Bo") -> true
  path.startsWith("com/intellij/psi/impl/Fr") -> true
  path.startsWith("com/intellij/psi/search/impl/p") -> true
  path.startsWith("com/intellij/psi/stubs/H") -> true
  path.startsWith("com/intellij/psi/stubs/Man") -> true
  path.startsWith("com/intellij/psi/stubs/Mo") -> true
  path.startsWith("com/intellij/psi/stubs/Se") -> true
  path.startsWith("com/intellij/psi/stubs/Str") -> true
  path.startsWith("com/intellij/psi/stubs/StubElementT") -> true
  path.startsWith("com/intellij/psi/stubs/StubInp") -> true
  path.startsWith("com/intellij/psi/stubs/StubO") -> true
  path.startsWith("com/intellij/psi/stubs/U") -> true
  path.startsWith("com/intellij/psi/templateLanguages/I") -> true
  path.startsWith("com/intellij/psi/templateLanguages/TemplateLanguage.") -> true
  path.startsWith("com/intellij/psi/tree/Ch") -> true
  path.startsWith("com/intellij/psi/tree/IStr") -> true
  path.startsWith("com/intellij/psi/util/CachedValue.") -> true
  path.startsWith("com/intellij/psi/util/PsiFormatUtilB") -> true
  path.startsWith("com/intellij/psi/util/Q") -> true
  path.startsWith("com/intellij/r") -> true
  path.startsWith("com/intellij/ui/DummyIconManager.") -> true
  path.startsWith("com/intellij/ui/IconManager.") -> true
  path.startsWith("com/intellij/util/AstLoadingE") -> true
  path.startsWith("com/intellij/util/Bi") -> true
  path.startsWith("com/intellij/util/CachedValuesF") -> true
  path.startsWith("com/intellij/util/Ch") -> true
  path.startsWith("com/intellij/util/Conc") -> true
  path.startsWith("com/intellij/util/Consumer.") -> true
  path.startsWith("com/intellij/util/DefaultB") -> true
  path.startsWith("com/intellij/util/Do") -> true
  path.startsWith("com/intellij/util/En") -> true
  path.startsWith("com/intellij/util/Ev") -> true
  path.startsWith("com/intellij/util/Function\$") -> true
  path.startsWith("com/intellij/util/Function.") -> true
  path.startsWith("com/intellij/util/Functions\$1") -> true
  path.startsWith("com/intellij/util/Functions\$2") -> true
  path.startsWith("com/intellij/util/Functions.") -> true
  path.startsWith("com/intellij/util/In") -> true
  path.startsWith("com/intellij/util/J") -> true
  path.startsWith("com/intellij/util/KeyedLazyInstance.") -> true
  path.startsWith("com/intellij/util/M") -> true
  path.startsWith("com/intellij/util/NullableFunction.") -> true
  path.startsWith("com/intellij/util/Patc") -> true
  path.startsWith("com/intellij/util/Processi") -> true
  path.startsWith("com/intellij/util/Processor.") -> true
  path.startsWith("com/intellij/util/QueryE") -> true
  path.startsWith("com/intellij/util/R") -> true
  path.startsWith("com/intellij/util/Unm") -> true
  path.startsWith("com/intellij/util/cl") -> true
  path.startsWith("com/intellij/util/containers/Ca") -> true
  path.startsWith("com/intellij/util/containers/Com") -> true
  path.startsWith("com/intellij/util/containers/ConcurrentFactoryMap\$1") -> true
  path.startsWith("com/intellij/util/containers/ConcurrentFactoryMap\$2") -> true
  path.startsWith("com/intellij/util/containers/ConcurrentFactoryMap\$3") -> true
  path.startsWith("com/intellij/util/containers/ConcurrentFactoryMap\$CollectionWrapper\$1") -> true
  path.startsWith("com/intellij/util/containers/ConcurrentFactoryMap\$CollectionWrapper\$E") -> true
  path.startsWith("com/intellij/util/containers/ConcurrentFactoryMap\$CollectionWrapper.") -> true
  path.startsWith("com/intellij/util/containers/ConcurrentFactoryMap.") -> true
  path.startsWith("com/intellij/util/containers/ConcurrentRefHashMap\$1") -> true
  path.startsWith("com/intellij/util/containers/ConcurrentRefHashMap\$H") -> true
  path.startsWith("com/intellij/util/containers/ConcurrentRefHashMap\$K") -> true
  path.startsWith("com/intellij/util/containers/ConcurrentRefHashMap\$R") -> true
  path.startsWith("com/intellij/util/containers/ConcurrentRefHashMap.") -> true
  path.startsWith("com/intellij/util/containers/ContainerUtil\$1") -> true
  path.startsWith("com/intellij/util/containers/ContainerUtil\$2") -> true
  path.startsWith("com/intellij/util/containers/ContainerUtil\$4") -> true
  path.startsWith("com/intellij/util/containers/ContainerUtil\$7") -> true
  path.startsWith("com/intellij/util/containers/ContainerUtil\$8.") -> true
  path.startsWith("com/intellij/util/containers/ContainerUtil\$I") -> true
  path.startsWith("com/intellij/util/containers/ContainerUtil.") -> true
  path.startsWith("com/intellij/util/containers/P") -> true
  path.startsWith("com/intellij/util/containers/SLRUMap.") -> true
  path.startsWith("com/intellij/util/containers/Se") -> true
  path.startsWith("com/intellij/util/containers/Sh") -> true
  path.startsWith("com/intellij/util/containers/St") -> true
  path.startsWith("com/intellij/util/e") -> true
  path.startsWith("com/intellij/util/graph/C") -> true
  path.startsWith("com/intellij/util/graph/DFSTBuilder\$1") -> true
  path.startsWith("com/intellij/util/graph/DFSTBuilder.") -> true
  path.startsWith("com/intellij/util/graph/I") -> true
  path.startsWith("com/intellij/util/graph/O") -> true
  path.startsWith("com/intellij/util/graph/i") -> true
  path.startsWith("com/intellij/util/indexing/IndexI") -> true
  path.startsWith("com/intellij/util/io/Dif") -> true
  path.startsWith("com/intellij/util/io/DirectBu") -> true
  path.startsWith("com/intellij/util/io/DirectByteBufferA") -> true
  path.startsWith("com/intellij/util/io/FileChannelW") -> true
  path.startsWith("com/intellij/util/io/FileChu") -> true
  path.startsWith("com/intellij/util/io/IOCancellationCallback.") -> true
  path.startsWith("com/intellij/util/io/IOCancellationCallbackHolder.") -> true
  path.startsWith("com/intellij/util/io/IOS") -> true
  path.startsWith("com/intellij/util/io/Inl") -> true
  path.startsWith("com/intellij/util/io/IntI") -> true
  path.startsWith("com/intellij/util/io/IntToIntBtree\$BtreeR") -> true
  path.startsWith("com/intellij/util/io/IntToIntBtree.") -> true
  path.startsWith("com/intellij/util/io/L") -> true
  path.startsWith("com/intellij/util/io/OpenChannelsCache\$ChannelD") -> true
  path.startsWith("com/intellij/util/io/OpenChannelsCache.") -> true
  path.startsWith("com/intellij/util/io/PersistentEnumerator.") -> true
  path.startsWith("com/intellij/util/io/PersistentEnumeratorBase\$1") -> true
  path.startsWith("com/intellij/util/io/PersistentEnumeratorBase\$D") -> true
  path.startsWith("com/intellij/util/io/PersistentEnumeratorBase\$V") -> true
  path.startsWith("com/intellij/util/io/PersistentEnumeratorBase.") -> true
  path.startsWith("com/intellij/util/io/PersistentEnumeratorW") -> true
  path.startsWith("com/intellij/util/io/PersistentHashMap\$") -> true
  path.startsWith("com/intellij/util/io/PersistentHashMap.") -> true
  path.startsWith("com/intellij/util/io/PersistentHashMapValueStorage\$1") -> true
  path.startsWith("com/intellij/util/io/PersistentHashMapValueStorage\$2") -> true
  path.startsWith("com/intellij/util/io/PersistentHashMapValueStorage\$3") -> true
  path.startsWith("com/intellij/util/io/PersistentHashMapValueStorage\$4") -> true
  path.startsWith("com/intellij/util/io/PersistentHashMapValueStorage\$5") -> true
  path.startsWith("com/intellij/util/io/PersistentHashMapValueStorage\$F") -> true
  path.startsWith("com/intellij/util/io/PersistentHashMapValueStorage\$M") -> true
  path.startsWith("com/intellij/util/io/PersistentHashMapValueStorage.") -> true
  path.startsWith("com/intellij/util/io/PersistentMap.") -> true
  path.startsWith("com/intellij/util/io/PersistentMapWal\$a") -> true
  path.startsWith("com/intellij/util/io/PersistentMapWal\$p") -> true
  path.startsWith("com/intellij/util/io/PersistentMapWal\$r") -> true
  path.startsWith("com/intellij/util/io/PersistentMapWal.") -> true
  path.startsWith("com/intellij/util/io/UR") -> true
  path.startsWith("com/intellij/util/io/V") -> true
  path.startsWith("com/intellij/util/io/WriteAheadLogKt\$c") -> true
  path.startsWith("com/intellij/util/io/WriteAheadLogKt.") -> true
  path.startsWith("com/intellij/util/keyFMap/A") -> true
  path.startsWith("com/intellij/util/keyFMap/D") -> true
  path.startsWith("com/intellij/util/keyFMap/E") -> true
  path.startsWith("com/intellij/util/keyFMap/K") -> true
  path.startsWith("com/intellij/util/keyFMap/MapBackedFMap.") -> true
  path.startsWith("com/intellij/util/keyFMap/O") -> true
  path.startsWith("com/intellij/util/keyFMap/P") -> true
  path.startsWith("com/intellij/util/lang/Ca") -> true
  path.startsWith("com/intellij/util/lang/ClasspathCache\$I") -> true
  path.startsWith("com/intellij/util/lang/ClasspathCache\$LoaderDataB") -> true
  path.startsWith("com/intellij/util/lang/ClasspathCache.") -> true
  path.startsWith("com/intellij/util/lang/Co") -> true
  path.startsWith("com/intellij/util/lang/JdkZipResourceFile\$1") -> true
  path.startsWith("com/intellij/util/lang/JdkZipResourceFile\$Z") -> true
  path.startsWith("com/intellij/util/lang/JdkZipResourceFile.") -> true
  path.startsWith("com/intellij/util/lang/Loader.") -> true
  path.startsWith("com/intellij/util/lang/U") -> true
  path.startsWith("com/intellij/util/messages/L") -> true
  path.startsWith("com/intellij/util/messages/S") -> true
  path.startsWith("com/intellij/util/messages/impl/MessageBusE") -> true
  path.startsWith("com/intellij/util/messages/impl/MessageD") -> true
  path.startsWith("com/intellij/util/s") -> true
  path.startsWith("com/intellij/util/text/B") -> true
  path.startsWith("com/intellij/util/text/N") -> true
  path.startsWith("com/intellij/util/text/U") -> true
  path.startsWith("gnu/trove/C") -> true
  path.startsWith("gnu/trove/E") -> true
  path.startsWith("gnu/trove/H") -> true
  path.startsWith("gnu/trove/I") -> true
  path.startsWith("gnu/trove/P") -> true
  path.startsWith("gnu/trove/S") -> true
  path.startsWith("gnu/trove/TByteFu") -> true
  path.startsWith("gnu/trove/TByteHashi") -> true
  path.startsWith("gnu/trove/TByteP") -> true
  path.startsWith("gnu/trove/TIntFu") -> true
  path.startsWith("gnu/trove/TIntLongP") -> true
  path.startsWith("gnu/trove/TIntP") -> true
  path.startsWith("gnu/trove/TIntS") -> true
  path.startsWith("gnu/trove/TIt") -> true
  path.startsWith("gnu/trove/TLongFu") -> true
  path.startsWith("gnu/trove/TLongIntP") -> true
  path.startsWith("gnu/trove/TLongObjectP") -> true
  path.startsWith("gnu/trove/TLongP") -> true
  path.startsWith("gnu/trove/TObjectC") -> true
  path.startsWith("gnu/trove/TObjectFu") -> true
  path.startsWith("gnu/trove/TObjectO") -> true
  path.startsWith("gnu/trove/TObjectP") -> true
  path.startsWith("kotlin/A") -> true
  path.startsWith("kotlin/B") -> true
  path.startsWith("kotlin/F") -> true
  path.startsWith("kotlin/H") -> true
  path.startsWith("kotlin/I") -> true
  path.startsWith("kotlin/W") -> true
  path.startsWith("kotlin/_") -> true
  path.startsWith("kotlin/enums/EnumEntries.") -> true
  path.startsWith("kotlin/enums/EnumEntriesK") -> true
  path.startsWith("kotlin/enums/EnumEntriesL") -> true
  path.startsWith("kotlin/experimental/B") -> true
  path.startsWith("kotlin/experimental/ExperimentalT") -> true
  path.startsWith("kotlin/jd") -> true
  path.startsWith("kotlin/js/ExperimentalJsE") -> true
  path.startsWith("kotlin/jvm/K") -> true
  path.startsWith("kotlin/jvm/P") -> true
  path.startsWith("kotlin/jvm/V") -> true
  path.startsWith("kotlin/jvm/j") -> true
  path.startsWith("kotlin/jvm/o") -> true
  path.startsWith("kotlin/reflect/G") -> true
  path.startsWith("kotlin/reflect/KA") -> true
  path.startsWith("kotlin/reflect/KD") -> true
  path.startsWith("kotlin/reflect/KMutableProperty\$S") -> true
  path.startsWith("kotlin/reflect/KMutableProperty.") -> true
  path.startsWith("kotlin/reflect/KMutableProperty0\$S") -> true
  path.startsWith("kotlin/reflect/KMutableProperty0.") -> true
  path.startsWith("kotlin/reflect/KMutableProperty1\$S") -> true
  path.startsWith("kotlin/reflect/KMutableProperty1.") -> true
  path.startsWith("kotlin/reflect/KMutableProperty2\$S") -> true
  path.startsWith("kotlin/reflect/KMutableProperty2.") -> true
  path.startsWith("kotlin/reflect/KProperty.") -> true
  path.startsWith("kotlin/reflect/KProperty0\$G") -> true
  path.startsWith("kotlin/reflect/KProperty0.") -> true
  path.startsWith("kotlin/reflect/KProperty1\$G") -> true
  path.startsWith("kotlin/reflect/KProperty1.") -> true
  path.startsWith("kotlin/reflect/KProperty2\$G") -> true
  path.startsWith("kotlin/reflect/KProperty2.") -> true
  path.startsWith("kotlin/reflect/full/KA") -> true
  path.startsWith("kotlin/reflect/full/KClasses\$allSupertypes\$2") -> true
  path.startsWith("kotlin/reflect/full/KClasses\$d") -> true
  path.startsWith("kotlin/reflect/full/KClasses.") -> true
  path.startsWith("kotlin/reflect/full/KP") -> true
  path.startsWith("kotlin/reflect/full/KT") -> true
  path.startsWith("kotlin/reflect/full/N") -> true
  path.startsWith("kotlin/reflect/jvm/E") -> true
  path.startsWith("kotlin/reflect/jvm/internal/C") -> true
  path.startsWith("kotlin/reflect/jvm/internal/E") -> true
  path.startsWith("kotlin/reflect/jvm/internal/KClassi") -> true
  path.startsWith("kotlin/reflect/jvm/internal/Ko") -> true
  path.startsWith("kotlin/reflect/jvm/internal/M") -> true
  path.startsWith("kotlin/reflect/jvm/internal/T") -> true
  path.startsWith("kotlin/reflect/jvm/internal/W") -> true
  path.startsWith("kotlin/reflect/jvm/internal/calls/AnnotationConstructorCaller.") -> true
  path.startsWith("kotlin/reflect/jvm/internal/calls/AnnotationConstructorCallerKt\$createAnnotationInstance\$h") -> true
  path.startsWith("kotlin/reflect/jvm/internal/calls/AnnotationConstructorCallerKt.") -> true
  path.startsWith("kotlin/reflect/jvm/internal/calls/B") -> true
  path.startsWith("kotlin/reflect/jvm/internal/calls/T") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/builtins/functions/B") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/builtins/functions/FunctionClassDescriptor\$C") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/builtins/functions/FunctionClassDescriptor\$FunctionTypeConstructor.") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/builtins/functions/FunctionClassDescriptor.") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/builtins/functions/FunctionClassKind\$Companion.") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/builtins/functions/FunctionClassKind.") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/builtins/functions/FunctionClassScope.") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/builtins/jvm/JvmBuiltIns.") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/builtins/jvm/JvmBuiltInsCustomizer\$J") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/builtins/jvm/JvmBuiltInsCustomizer\$W") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/builtins/jvm/JvmBuiltInsCustomizer\$getA") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/builtins/jvm/JvmBuiltInsCustomizer\$getF") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/builtins/jvm/JvmBuiltInsCustomizer\$getJdkMethodStatus\$2") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/builtins/jvm/JvmBuiltInsCustomizer\$isMutabilityViolation\$2") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/builtins/jvm/JvmBuiltInsCustomizer\$n") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/builtins/jvm/JvmBuiltInsCustomizer.") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/builtins/jvm/JvmBuiltInsS") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/builtins/jvm/M") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/descriptors/R") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/descriptors/runtime/structure/ReflectJavaAnnotation.") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/descriptors/runtime/structure/ReflectJavaAnnotationOwner.") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/descriptors/runtime/structure/ReflectJavaAnnotationOwnerK") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/descriptors/runtime/structure/ReflectJavaF") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/descriptors/runtime/structure/ReflectJavaL") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/descriptors/runtime/structure/ReflectJavaModifierListOwner.") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/descriptors/runtime/structure/ReflectJavaR") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/descriptors/runtime/structure/ReflectJavaV") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/descriptors/runtime/structure/ReflectJavaW") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/AnnotationTypeQualifierResolver.") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/Des") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/P") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/U") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/descriptors/P") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/descriptors/U") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/lazy/M") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/lazy/S") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/lazy/descriptors/LazyJavaScope\$M") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/lazy/descriptors/LazyJavaScope\$R") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/lazy/descriptors/LazyJavaScope\$a") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/lazy/descriptors/LazyJavaScope\$c") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/lazy/descriptors/LazyJavaScope\$ret") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/lazy/descriptors/LazyJavaScope.") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/lazy/descriptors/LazyJavaStaticClassScope\$flatMapJavaStaticSupertypesScopes\$1\$") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/lazy/descriptors/LazyJavaStaticClassScope\$flatMapJavaStaticSupertypesScopes\$2") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/lazy/descriptors/LazyJavaStaticClassScope.") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/lazy/descriptors/LazyJavaStaticS") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/lazy/descriptors/LazyJavaT") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/lazy/types/RawSubstitution\$C") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/lazy/types/RawSubstitution\$e") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/lazy/types/RawSubstitution.") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/structure/JavaAnnotation.") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/structure/JavaAnnotationO") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/structure/JavaF") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/structure/JavaMem") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/structure/JavaMethod.") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/structure/JavaMo") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/structure/JavaN") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/structure/JavaR") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/structure/JavaType.") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/structure/JavaTypes") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/structure/JavaV") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/structure/JavaW") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/structure/Lig") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/structure/ListBasedJavaAnnotationOwner.") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/typeEnhancement/M") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/typeEnhancement/SignatureEnhancement.") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/kotlin/AbstractBinaryClassAnnotationAndConstantLoader\$s") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/kotlin/AbstractBinaryClassAnnotationAndConstantLoader.") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/kotlin/BinaryClassAnnotationAndConstantLoaderImpl\$loadAnnotation\$1.") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/kotlin/BinaryClassAnnotationAndConstantLoaderImpl.") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/kotlin/TypeMappingConfiguration.") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/kotlin/TypeMappingConfigurationI") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/kotlin/TypeS") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/kotlin/header/ReadKotlinClassHeaderAnnotationVisitor\$1") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/kotlin/header/ReadKotlinClassHeaderAnnotationVisitor\$C") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/kotlin/header/ReadKotlinClassHeaderAnnotationVisitor\$KotlinMetadataArgumentVisitor\$1") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/kotlin/header/ReadKotlinClassHeaderAnnotationVisitor\$KotlinMetadataArgumentVisitor\$2") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/kotlin/header/ReadKotlinClassHeaderAnnotationVisitor\$KotlinMetadataArgumentVisitor.") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/kotlin/header/ReadKotlinClassHeaderAnnotationVisitor.") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/metadata/jvm/deserialization/B") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/metadata/jvm/deserialization/C") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/metadata/jvm/deserialization/JvmF") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/metadata/jvm/deserialization/JvmNameResolver.") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/metadata/jvm/deserialization/JvmP") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/metadata/jvm/deserialization/U") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/resolve/C") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/resolve/DescriptorEquivalenceForOverrides\$areCallableDescriptorsEquivalent\$1") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/resolve/DescriptorEquivalenceForOverrides\$areCallableDescriptorsEquivalent\$overridingUtil\$1\$") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/resolve/DescriptorEquivalenceForOverrides\$areT") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/resolve/DescriptorEquivalenceForOverrides.") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/resolve/DescriptorU") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/resolve/I") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/resolve/N") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/resolve/S") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/resolve/V") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/resolve/constants/Ch") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/resolve/constants/Cl") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/resolve/constants/ConstantValue.") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/resolve/constants/ConstantValueFactory\$createArrayValue\$1") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/resolve/constants/ConstantValueFactory.") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/resolve/constants/D") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/resolve/constants/F") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/resolve/constants/L") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/resolve/constants/N") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/resolve/constants/P") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/resolve/descriptorUtil/DescriptorUtilsKt\$declaresOrInheritsDefaultValue\$2") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/resolve/descriptorUtil/DescriptorUtilsKt\$firstOverridden\$2") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/resolve/descriptorUtil/DescriptorUtilsKt\$p") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/resolve/descriptorUtil/DescriptorUtilsKt.") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/serialization/S") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/serialization/deserialization/DeserializationCom") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/serialization/deserialization/DeserializationConfiguration\$Default.") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/serialization/deserialization/DeserializationConfiguration.") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/serialization/deserialization/DeserializationCont") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/serialization/deserialization/DeserializedC") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/serialization/deserialization/I") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/serialization/deserialization/K") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/serialization/deserialization/MemberDeserializer\$v") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/serialization/deserialization/MemberDeserializer.") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/serialization/deserialization/N") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/serialization/deserialization/S") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/serialization/deserialization/descriptors/Desc") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/serialization/deserialization/descriptors/DeserializedA") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/serialization/deserialization/descriptors/DeserializedCa") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/serialization/deserialization/descriptors/DeserializedClassC") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/serialization/deserialization/descriptors/DeserializedClassDescriptor\$a") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/serialization/deserialization/descriptors/DeserializedClassDescriptor\$m") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/serialization/deserialization/descriptors/DeserializedClassDescriptor\$p") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/serialization/deserialization/descriptors/DeserializedClassDescriptor\$s") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/serialization/deserialization/descriptors/DeserializedClassDescriptor.") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/serialization/deserialization/descriptors/DeserializedS") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/serialization/deserialization/descriptors/N") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/types/Ex") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/types/NotNullS") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/types/Nu") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/types/R") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/types/TypeSystemCommonBackendContext.") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/types/Unw") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/types/V") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/types/W") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/types/model/A") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/types/model/F") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/types/model/I") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/types/model/K") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/types/model/TypeC") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/types/model/TypeP") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/types/model/TypeSystemCom") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/types/model/TypeSystemContext.") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/types/model/TypeSystemInferenceExtensionContext.") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/types/model/TypeSystemO") -> true
  path.startsWith("org/fusesource/jansi/Ansi\$A") -> true
  path.startsWith("org/fusesource/jansi/Ansi\$C") -> true
  path.startsWith("org/fusesource/jansi/Ansi.") -> true
  path.startsWith("org/jdom/T") -> true
  path.startsWith("org/jdom/V") -> true
  path.startsWith("org/jdom/output/E") -> true
  path.startsWith("org/jdom/output/Format\$1") -> true
  path.startsWith("org/jdom/output/Format\$D") -> true
  path.startsWith("org/jdom/output/Format\$T") -> true
  path.startsWith("org/jdom/output/Format.") -> true
  path.startsWith("org/jdom/output/N") -> true
  path.startsWith("org/jdom/output/XMLOutputter\$") -> true
  path.startsWith("org/jdom/output/XMLOutputter.") -> true
  path.startsWith("org/jetbrains/c") -> true
  path.startsWith("org/jetbrains/j") -> true
  path.startsWith("org/objectweb/asm/AnnotationV") -> true
  path.startsWith("org/objectweb/asm/Attribute.") -> true
  path.startsWith("org/objectweb/asm/ClassR") -> true
  path.startsWith("org/objectweb/asm/ClassV") -> true
  path.startsWith("org/objectweb/asm/FieldV") -> true
  path.startsWith("org/objectweb/asm/L") -> true
  path.startsWith("org/objectweb/asm/MethodV") -> true
  path.startsWith("org/objectweb/asm/Type.") -> true
  path.startsWith("org/picocontainer/C") -> true
  path.startsWith("org/picocontainer/M") -> true
  path.startsWith("org/picocontainer/PicoC") -> true

  else -> false
}

// Pruned:
fun isPruned(path: String) = when {
  path.startsWith("i") -> true
  path.startsWith("kotlin/c") -> true
  path.startsWith("kotlin/j") -> true
  path.startsWith("gnu/trove/d") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/metadata/P") -> true
  path.startsWith("kotlin/t") -> true
  path.startsWith("kotlin/i") -> true
  path.startsWith("com/google/common/b") -> true
  path.startsWith("kotlin/se") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/p") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/descriptors/i") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/u") -> true
  path.startsWith("kotlin/ra") -> true
  path.startsWith("com/f") -> true
  path.startsWith("com/google/common/collect/A") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/ren") -> true
  path.startsWith("kotlin/reflect/K") -> true
  path.startsWith("com/google/common/collect/MapM") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/types/c") -> true
  path.startsWith("com/intellij/util/x") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/resolve/s") -> true
  path.startsWith("com/intellij/util/containers/T") -> true
  path.startsWith("org/jline/terminal/impl/j") -> true
  path.startsWith("com/google/common/collect/L") -> true
  path.startsWith("com/google/common/collect/ImmutableM") -> true
  path.startsWith("com/google/common/collect/C") -> true
  path.startsWith("kotlin/reflect/jvm/internal/KP") -> true
  path.startsWith("com/intellij/util/containers/J") -> true
  path.startsWith("com/google/common/collect/R") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/st") -> true
  path.startsWith("kotlin/U") -> true
  path.startsWith("com/google/common/collect/Sy") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/typeEnhancement/P") -> true
  path.startsWith("kotlin/reflect/jvm/internal/calls/C") -> true
  path.startsWith("kotlin/reflect/jvm/internal/KClassI") -> true
  path.startsWith("org/i") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/metadata/jvm/J") -> true
  path.startsWith("com/google/common/collect/Multis") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/descriptors/a") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/J") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/serialization/deserialization/descriptors/DeserializedM") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/descriptors/D") -> true
  path.startsWith("com/google/common/collect/MultimapB") -> true
  path.startsWith("com/intellij/openapi/util/t") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/types/Ab") -> true
  path.startsWith("com/google/common/p") -> true
  path.startsWith("com/intellij/util/conc") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/lazy/descriptors/LazyJavaC") -> true
  path.startsWith("com/google/common/collect/So") -> true
  path.startsWith("com/google/common/collect/T") -> true
  path.startsWith("com/intellij/openapi/d") -> true
  path.startsWith("com/intellij/util/containers/I") -> true
  path.startsWith("org/c") -> true
  path.startsWith("com/google/common/collect/St") -> true
  path.startsWith("com/intellij/util/containers/F") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/descriptors/V") -> true
  path.startsWith("com/intellij/openapi/extensions/E") -> true
  path.startsWith("com/intellij/util/containers/ConcurrentW") -> true
  path.startsWith("com/intellij/util/d") -> true
  path.startsWith("gnu/trove/TH") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/descriptors/runtime/c") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/metadata/d") -> true
  path.startsWith("com/intellij/util/containers/ConcurrentI") -> true
  path.startsWith("com/intellij/util/containers/ConcurrentL") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/components/J") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/resolve/O") -> true
  path.startsWith("org/jetbrains/kotlin/cli/js/d") -> true
  path.startsWith("com/google/common/collect/ImmutableR") -> true
  path.startsWith("com/intellij/util/containers/U") -> true
  path.startsWith("com/intellij/util/containers/h") -> true
  path.startsWith("kotlin/reflect/jvm/internal/J") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/descriptors/C") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/descriptors/P") -> true
  path.startsWith("com/google/common/collect/Maps\$F") -> true
  path.startsWith("kotlin/reflect/jvm/internal/R") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/lazy/descriptors/LazyJavaP") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/kotlin/K") -> true
  path.startsWith("com/google/common/collect/Fo") -> true
  path.startsWith("com/google/common/collect/ImmutableSe") -> true
  path.startsWith("com/intellij/openapi/util/Co") -> true
  path.startsWith("com/intellij/patterns/O") -> true
  path.startsWith("com/intellij/util/io/PersistentMapI") -> true
  path.startsWith("com/intellij/util/io/k") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/descriptors/S") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/descriptors/runtime/structure/ReflectJavaC") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/kotlin/J") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/n") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/types/TypeC") -> true
  path.startsWith("com/google/common/g") -> true
  path.startsWith("com/intellij/ic") -> true
  path.startsWith("com/intellij/openapi/editor/e") -> true
  path.startsWith("com/intellij/openapi/util/R") -> true
  path.startsWith("com/intellij/psi/controlFlow/D") -> true
  path.startsWith("com/intellij/psi/util/CachedValueP") -> true
  path.startsWith("kotlin/e") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/types/t") -> true
  path.startsWith("com/intellij/openapi/util/A") -> true
  path.startsWith("com/intellij/openapi/util/N") -> true
  path.startsWith("com/intellij/seri") -> true
  path.startsWith("kotlin/S") -> true
  path.startsWith("kotlin/reflect/jvm/internal/KCa") -> true
  path.startsWith("kotlin/reflect/jvm/internal/KT") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/S") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/types/D") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/types/S") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/types/TypeSu") -> true
  path.startsWith("org/jetbrains/kotlin/net/jpountz/lz4/LZ4J") -> true
  path.startsWith("com/intellij/psi/codeStyle/T") -> true
  path.startsWith("com/intellij/util/containers/M") -> true
  path.startsWith("com/intellij/util/containers/R") -> true
  path.startsWith("com/intellij/util/io/C") -> true
  path.startsWith("com/intellij/util/io/Wa") -> true
  path.startsWith("kotlin/D") -> true
  path.startsWith("kotlin/reflect/jvm/internal/KD") -> true
  path.startsWith("kotlin/reflect/jvm/internal/KM") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/descriptors/d") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/i") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/descriptors/J") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/kotlin/D") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/resolve/constants/I") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/serialization/deserialization/C") -> true
  path.startsWith("org/jdom/C") -> true
  path.startsWith("org/jetbrains/kotlin/serialization/b") -> true
  path.startsWith("com/google/common/collect/ImmutableL") -> true
  path.startsWith("com/google/common/m") -> true
  path.startsWith("com/intellij/patterns/S") -> true
  path.startsWith("com/intellij/psi/impl/smartPointers/SmartT") -> true
  path.startsWith("com/intellij/util/containers/ConcurrentS") -> true
  path.startsWith("com/intellij/util/io/Fil") -> true
  path.startsWith("kotlin/N") -> true
  path.startsWith("kotlin/p") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/lazy/L") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/serialization/deserialization/A") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/serialization/deserialization/P") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/serialization/deserialization/T") -> true
  path.startsWith("org/jetbrains/kotlin/net/jpountz/lz4/LZ4Fr") -> true
  path.startsWith("org/jetbrains/kotlin/net/jpountz/x") -> true
  path.startsWith("com/google/common/collect/FilteredK") -> true
  path.startsWith("com/google/common/collect/ImmutableE") -> true
  path.startsWith("com/google/common/h") -> true
  path.startsWith("com/intellij/openapi/util/L") -> true
  path.startsWith("com/intellij/psi/impl/source/resolve/reference/impl/p") -> true
  path.startsWith("gnu/trove/TIntI") -> true
  path.startsWith("gnu/trove/TLongI") -> true
  path.startsWith("kotlin/E") -> true
  path.startsWith("kotlin/L") -> true
  path.startsWith("kotlin/P") -> true
  path.startsWith("kotlin/R") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/descriptors/M") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/B") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/resolve/j") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/serialization/deserialization/descriptors/DeserializedClassDescriptor\$D") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/types/K") -> true
  path.startsWith("org/jetbrains/a") -> true
  path.startsWith("com/google/common/collect/D") -> true
  path.startsWith("com/google/common/collect/E") -> true
  path.startsWith("com/google/common/collect/J") -> true
  path.startsWith("com/intellij/openapi/extensions/S") -> true
  path.startsWith("com/intellij/openapi/util/T") -> true
  path.startsWith("com/intellij/openapi/util/U") -> true
  path.startsWith("com/intellij/util/containers/L") -> true
  path.startsWith("com/intellij/util/containers/So") -> true
  path.startsWith("com/intellij/util/containers/W") -> true
  path.startsWith("com/intellij/util/io/E") -> true
  path.startsWith("com/intellij/util/io/PersistentB") -> true
  path.startsWith("com/intellij/util/lang/ClassP") -> true
  path.startsWith("com/intellij/util/p") -> true
  path.startsWith("gnu/trove/TByteH") -> true
  path.startsWith("gnu/trove/TDoubleH") -> true
  path.startsWith("gnu/trove/TFloatH") -> true
  path.startsWith("gnu/trove/TIntH") -> true
  path.startsWith("gnu/trove/TIntL") -> true
  path.startsWith("gnu/trove/TIntO") -> true
  path.startsWith("gnu/trove/TLongH") -> true
  path.startsWith("gnu/trove/TLongO") -> true
  path.startsWith("gnu/trove/TObjectIn") -> true
  path.startsWith("gnu/trove/TObjectL") -> true
  path.startsWith("kotlin/a") -> true
  path.startsWith("kotlin/reflect/T") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/builtins/K") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/builtins/jvm/JvmBuiltIns\$") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/descriptors/F") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/descriptors/N") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/descriptors/T") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/descriptors/runtime/structure/J") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/resolve/ca") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/serialization/deserialization/b") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/types/I") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/types/TypeA") -> true
  path.startsWith("kotlin/script/experimental/jsr223/KotlinJsr223DefaultScriptEngineFactory\$") -> true
  path.startsWith("com/google/common/collect/FilteredEntryMultimap\$A") -> true
  path.startsWith("com/google/common/collect/Fl") -> true
  path.startsWith("com/google/common/collect/ImmutableSortedS") -> true
  path.startsWith("com/google/common/collect/Maps\$1") -> true
  path.startsWith("com/google/common/collect/Maps\$E") -> true
  path.startsWith("com/google/common/collect/O") -> true
  path.startsWith("com/google/common/i") -> true
  path.startsWith("com/google/common/u") -> true
  path.startsWith("com/intellij/openapi/editor/m") -> true
  path.startsWith("com/intellij/openapi/util/r") -> true
  path.startsWith("com/intellij/openapi/vfs/impl/A") -> true
  path.startsWith("com/intellij/psi/PsiJS") -> true
  path.startsWith("com/intellij/psi/ResolveS") -> true
  path.startsWith("com/intellij/psi/controlFlow/InstructionK") -> true
  path.startsWith("com/intellij/util/Com") -> true
  path.startsWith("com/intellij/util/S") -> true
  path.startsWith("com/intellij/util/io/Da") -> true
  path.startsWith("com/intellij/util/messages/M") -> true
  path.startsWith("com/intellij/util/text/Ch") -> true
  path.startsWith("com/intellij/util/text/I") -> true
  path.startsWith("kotlin/K") -> true
  path.startsWith("kotlin/T") -> true
  path.startsWith("kotlin/m") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/lazy/types/J") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/structure/JavaC") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/typeEnhancement/J") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/metadata/jvm/deserialization/JvmM") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/resolve/constants/K") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/resolve/constants/U") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/types/F") -> true
  path.startsWith("kotlin/st") -> true
  path.startsWith("org/jdom/A") -> true
  path.startsWith("org/jetbrains/kotlin/incremental/classpathDiff/D") -> true
  path.startsWith("org/jetbrains/kotlin/net/jpountz/lz4/LZ4H") -> true
  path.startsWith("com/google/common/collect/B") -> true
  path.startsWith("com/google/common/collect/H") -> true
  path.startsWith("com/google/common/collect/ImmutableB") -> true
  path.startsWith("com/google/common/collect/Maps\$U") -> true
  path.startsWith("com/google/common/collect/Multimaps\$C") -> true
  path.startsWith("com/google/common/collect/Sets\$5") -> true
  path.startsWith("com/google/common/collect/U") -> true
  path.startsWith("com/intellij/ide/plugins/Mo") -> true
  path.startsWith("com/intellij/openapi/extensions/P") -> true
  path.startsWith("com/intellij/openapi/util/D") -> true
  path.startsWith("com/intellij/openapi/util/io/FileSystemUtil\$J") -> true
  path.startsWith("com/intellij/psi/codeStyle/N") -> true
  path.startsWith("com/intellij/psi/filters/p") -> true
  path.startsWith("com/intellij/psi/impl/Rec") -> true
  path.startsWith("com/intellij/psi/impl/source/javadoc/S") -> true
  path.startsWith("com/intellij/psi/impl/source/tree/JS") -> true
  path.startsWith("com/intellij/psi/templateLanguages/T") -> true
  path.startsWith("com/intellij/psi/util/Pr") -> true
  path.startsWith("com/intellij/util/T") -> true
  path.startsWith("com/intellij/util/io/PersistentEnumeratorC") -> true
  path.startsWith("com/intellij/util/io/PersistentHashMapValueStorage\$R") -> true
  path.startsWith("com/intellij/util/r") -> true
  path.startsWith("com/intellij/util/text/V") -> true
  path.startsWith("gnu/trove/TByteByteH") -> true
  path.startsWith("gnu/trove/TByteDoubleH") -> true
  path.startsWith("gnu/trove/TByteFloatH") -> true
  path.startsWith("gnu/trove/TByteIntH") -> true
  path.startsWith("gnu/trove/TByteLongH") -> true
  path.startsWith("gnu/trove/TByteObjectH") -> true
  path.startsWith("gnu/trove/TDoubleByteH") -> true
  path.startsWith("gnu/trove/TDoubleDoubleH") -> true
  path.startsWith("gnu/trove/TDoubleFloatH") -> true
  path.startsWith("gnu/trove/TDoubleIntH") -> true
  path.startsWith("gnu/trove/TDoubleLongH") -> true
  path.startsWith("gnu/trove/TDoubleObjectH") -> true
  path.startsWith("gnu/trove/TFloatByteH") -> true
  path.startsWith("gnu/trove/TFloatDoubleH") -> true
  path.startsWith("gnu/trove/TFloatFloatH") -> true
  path.startsWith("gnu/trove/TFloatIntH") -> true
  path.startsWith("gnu/trove/TFloatLongH") -> true
  path.startsWith("gnu/trove/TFloatObjectH") -> true
  path.startsWith("gnu/trove/TIntByteH") -> true
  path.startsWith("gnu/trove/TIntDoubleH") -> true
  path.startsWith("gnu/trove/TIntFloatH") -> true
  path.startsWith("gnu/trove/TLi") -> true
  path.startsWith("gnu/trove/TLongByteH") -> true
  path.startsWith("gnu/trove/TLongDoubleH") -> true
  path.startsWith("gnu/trove/TLongFloatH") -> true
  path.startsWith("gnu/trove/TLongLongH") -> true
  path.startsWith("gnu/trove/TObjectByteH") -> true
  path.startsWith("gnu/trove/TObjectDoubleH") -> true
  path.startsWith("gnu/trove/TObjectFloatH") -> true
  path.startsWith("gnu/trove/TObjectH") -> true
  path.startsWith("kotlin/C") -> true
  path.startsWith("kotlin/reflect/jvm/R") -> true
  path.startsWith("kotlin/reflect/jvm/internal/KF") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/builtins/B") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/builtins/P") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/builtins/R") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/builtins/jvm/JvmBuiltInC") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/descriptors/I") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/descriptors/j") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/N") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/lazy/JavaR") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/lazy/descriptors/LazyJavaA") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/typeEnhancement/SignatureEnhancement\$e") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/typeEnhancement/TypeE") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/kotlin/M") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/resolve/constants/E") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/serialization/deserialization/DeserializedP") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/serialization/deserialization/descriptors/DeserializedClassDescriptor\$E") -> true
  path.startsWith("org/jetbrains/kotlin/incremental/classpathDiff/ClassF") -> true
  path.startsWith("org/jetbrains/kotlin/incremental/classpathDiff/ClassSnapshott") -> true
  path.startsWith("org/jetbrains/kotlin/net/jpountz/lz4/LZ4B") -> true
  path.startsWith("com/google/common/collect/Iterators\$1") -> true
  path.startsWith("com/google/common/collect/Maps\$S") -> true
  path.startsWith("com/google/common/collect/Maps\$T") -> true
  path.startsWith("com/google/common/collect/Maps\$V") -> true
  path.startsWith("com/google/common/collect/Multimaps\$K") -> true
  path.startsWith("com/google/common/collect/Multimaps\$M") -> true
  path.startsWith("com/google/common/collect/N") -> true
  path.startsWith("com/google/common/collect/Ser") -> true
  path.startsWith("com/google/common/collect/Sets\$F") -> true
  path.startsWith("com/google/common/collect/Sets\$S") -> true
  path.startsWith("com/google/common/collect/Si") -> true
  path.startsWith("com/intellij/diagnostic/A") -> true
  path.startsWith("com/intellij/diagnostic/L") -> true
  path.startsWith("com/intellij/openapi/components/C") -> true
  path.startsWith("com/intellij/openapi/editor/R") -> true
  path.startsWith("com/intellij/openapi/editor/impl/L") -> true
  path.startsWith("com/intellij/openapi/extensions/L") -> true
  path.startsWith("com/intellij/openapi/extensions/impl/I") -> true
  path.startsWith("com/intellij/openapi/util/Cle") -> true
  path.startsWith("com/intellij/openapi/util/Sh") -> true
  path.startsWith("com/intellij/openapi/util/io/B") -> true
  path.startsWith("com/intellij/openapi/util/io/FileA") -> true
  path.startsWith("com/intellij/openapi/util/io/FileUtil\$") -> true
  path.startsWith("com/intellij/openapi/util/io/FileUtilRt\$C") -> true
  path.startsWith("com/intellij/openapi/vfs/impl/ZipH") -> true
  path.startsWith("com/intellij/patterns/Pa") -> true
  path.startsWith("com/intellij/patterns/T") -> true
  path.startsWith("com/intellij/psi/ElementD") -> true
  path.startsWith("com/intellij/psi/ReferenceP") -> true
  path.startsWith("com/intellij/psi/codeStyle/F") -> true
  path.startsWith("com/intellij/psi/codeStyle/M") -> true
  path.startsWith("com/intellij/psi/codeStyle/S") -> true
  path.startsWith("com/intellij/psi/impl/A") -> true
  path.startsWith("com/intellij/psi/impl/java/stubs/FunctionalExpressionK") -> true
  path.startsWith("com/intellij/psi/impl/source/Ch") -> true
  path.startsWith("com/intellij/psi/impl/source/FileL") -> true
  path.startsWith("com/intellij/psi/impl/source/PsiJS") -> true
  path.startsWith("com/intellij/psi/impl/source/javadoc/J") -> true
  path.startsWith("com/intellij/psi/ta") -> true
  path.startsWith("com/intellij/psi/util/PsiFormatUtil\$") -> true
  path.startsWith("com/intellij/util/Ar") -> true
  path.startsWith("com/intellij/util/O") -> true
  path.startsWith("com/intellij/util/Pai") -> true
  path.startsWith("com/intellij/util/W") -> true
  path.startsWith("com/intellij/util/containers/ConcurrentRefV") -> true
  path.startsWith("com/intellij/util/containers/D") -> true
  path.startsWith("com/intellij/util/containers/E") -> true
  path.startsWith("com/intellij/util/containers/Si") -> true
  path.startsWith("com/intellij/util/graph/G") -> true
  path.startsWith("com/intellij/util/io/A") -> true
  path.startsWith("com/intellij/util/io/B") -> true
  path.startsWith("com/intellij/util/io/PersistentMapWalP") -> true
  path.startsWith("com/intellij/util/io/S") -> true
  path.startsWith("com/intellij/util/io/Uns") -> true
  path.startsWith("com/intellij/util/lang/ClassL") -> true
  path.startsWith("com/intellij/util/messages/impl/Met") -> true
  path.startsWith("com/intellij/util/text/O") -> true
  path.startsWith("com/intellij/util/u") -> true
  path.startsWith("kotlin/O") -> true
  path.startsWith("kotlin/reflect/full/KCa") -> true
  path.startsWith("kotlin/reflect/jvm/K") -> true
  path.startsWith("kotlin/reflect/jvm/internal/U") -> true
  path.startsWith("kotlin/reflect/jvm/internal/calls/Int") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/builtins/S") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/builtins/U") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/builtins/jvm/Ja") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/builtins/jvm/JvmBuiltInsCustomizer\$c") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/descriptors/runtime/structure/ReflectC") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/descriptors/runtime/structure/ReflectJavaAnnotationA") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/descriptors/runtime/structure/ReflectJavaT") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/E") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/components/D") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/components/S") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/lazy/C") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/lazy/descriptors/J") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/lazy/descriptors/LazyJavaScope\$d") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/lazy/descriptors/LazyJavaStaticClassScope\$c") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/typeEnhancement/SignatureEnhancementB") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/kotlin/AbstractBinaryClassAnnotationAndConstantLoader\$loadA") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/kotlin/TypeMappingM") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/kotlin/header/K") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/kotlin/header/ReadKotlinClassHeaderAnnotationVisitor\$O") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/metadata/b") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/resolve/E") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/resolve/M") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/serialization/deserialization/MemberDeserializer\$g") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/serialization/deserialization/descriptors/DeserializedT") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/types/TypeP") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/types/model/C") -> true
  path.startsWith("kotlin/script/experimental/jvmhost/JvmScriptE") -> true
  path.startsWith("org/fusesource/hawtjni/runtime/N") -> true
  path.startsWith("org/jdom/I") -> true
  path.startsWith("org/jetbrains/kotlin/cli/js/i") -> true
  path.startsWith("org/jetbrains/kotlin/incremental/IncrementalJsCompilerRunnerK") -> true
  path.startsWith("org/jetbrains/kotlin/incremental/classpathDiff/Ba") -> true
  path.startsWith("org/jetbrains/kotlin/incremental/classpathDiff/ClasspathEntrySnapshott") -> true
  path.startsWith("com/google/common/collect/FilteredM") -> true
  path.startsWith("com/google/common/collect/ImmutableA") -> true
  path.startsWith("com/google/common/collect/ImmutableC") -> true
  path.startsWith("com/google/common/collect/ImmutableSortedMap\$1E") -> true
  path.startsWith("com/google/common/collect/In") -> true
  path.startsWith("com/google/common/collect/Iterables\$6") -> true
  path.startsWith("com/google/common/collect/MapD") -> true
  path.startsWith("com/google/common/collect/Maps\$As") -> true
  path.startsWith("com/google/common/collect/Maps\$D") -> true
  path.startsWith("com/google/common/collect/Maps\$I") -> true
  path.startsWith("com/google/common/collect/Maps\$N") -> true
  path.startsWith("com/google/common/collect/Multimaps\$UnmodifiableS") -> true
  path.startsWith("com/google/common/collect/P") -> true
  path.startsWith("com/google/common/collect/Sets\$1") -> true
  path.startsWith("com/google/common/collect/Sets\$2") -> true
  path.startsWith("com/google/common/collect/Sets\$3") -> true
  path.startsWith("com/google/common/collect/Sets\$4") -> true
  path.startsWith("com/google/common/collect/Sets\$C") -> true
  path.startsWith("com/google/common/collect/Sets\$P") -> true
  path.startsWith("com/intellij/A") -> true
  path.startsWith("com/intellij/diagnostic/T") -> true
  path.startsWith("com/intellij/lang/folding/F") -> true
  path.startsWith("com/intellij/lang/jvm/annotation/JvmAnnotationAt") -> true
  path.startsWith("com/intellij/lexer/LexerP") -> true
  path.startsWith("com/intellij/openapi/D") -> true
  path.startsWith("com/intellij/openapi/application/Ac") -> true
  path.startsWith("com/intellij/openapi/application/B") -> true
  path.startsWith("com/intellij/openapi/application/ex/ApplicationI") -> true
  path.startsWith("com/intellij/openapi/editor/a") -> true
  path.startsWith("com/intellij/openapi/editor/impl/DocumentW") -> true
  path.startsWith("com/intellij/openapi/editor/impl/Re") -> true
  path.startsWith("com/intellij/openapi/progress/C") -> true
  path.startsWith("com/intellij/openapi/util/E") -> true
  path.startsWith("com/intellij/openapi/util/J") -> true
  path.startsWith("com/intellij/openapi/util/KeyW") -> true
  path.startsWith("com/intellij/openapi/util/M") -> true
  path.startsWith("com/intellij/openapi/util/O") -> true
  path.startsWith("com/intellij/openapi/util/Sy") -> true
  path.startsWith("com/intellij/openapi/util/io/FileUtilRt\$F") -> true
  path.startsWith("com/intellij/openapi/util/io/N") -> true
  path.startsWith("com/intellij/openapi/util/o") -> true
  path.startsWith("com/intellij/openapi/vfs/Ch") -> true
  path.startsWith("com/intellij/patterns/In") -> true
  path.startsWith("com/intellij/pom/PomTa") -> true
  path.startsWith("com/intellij/psi/Com") -> true
  path.startsWith("com/intellij/psi/Cu") -> true
  path.startsWith("com/intellij/psi/ExternalC") -> true
  path.startsWith("com/intellij/psi/PsiPars") -> true
  path.startsWith("com/intellij/psi/SmartT") -> true
  path.startsWith("com/intellij/psi/codeStyle/D") -> true
  path.startsWith("com/intellij/psi/codeStyle/R") -> true
  path.startsWith("com/intellij/psi/impl/DocumentCommitT") -> true
  path.startsWith("com/intellij/psi/impl/F") -> true
  path.startsWith("com/intellij/psi/impl/PsiN") -> true
  path.startsWith("com/intellij/psi/impl/cache/C") -> true
  path.startsWith("com/intellij/psi/impl/m") -> true
  path.startsWith("com/intellij/psi/impl/smartPointers/P") -> true
  path.startsWith("com/intellij/psi/impl/source/JS") -> true
  path.startsWith("com/intellij/psi/impl/source/resolve/reference/impl/C") -> true
  path.startsWith("com/intellij/psi/impl/source/resolve/reference/impl/PsiD") -> true
  path.startsWith("com/intellij/psi/impl/source/resolve/reference/impl/m") -> true
  path.startsWith("com/intellij/psi/impl/source/tree/JavaT") -> true
  path.startsWith("com/intellij/psi/presentation/java/JavaM") -> true
  path.startsWith("com/intellij/psi/scope/processor/V") -> true
  path.startsWith("com/intellij/psi/stubs/E") -> true
  path.startsWith("com/intellij/psi/util/JavaE") -> true
  path.startsWith("com/intellij/psi/util/Pa") -> true
  path.startsWith("com/intellij/ui/i") -> true
  path.startsWith("com/intellij/util/Exc") -> true
  path.startsWith("com/intellij/util/L") -> true
  path.startsWith("com/intellij/util/Not") -> true
  path.startsWith("com/intellij/util/PathUtilR") -> true
  path.startsWith("com/intellij/util/Pl") -> true
  path.startsWith("com/intellij/util/containers/B") -> true
  path.startsWith("com/intellij/util/containers/Col") -> true
  path.startsWith("com/intellij/util/containers/ConcurrentRefHashMap\$E") -> true
  path.startsWith("com/intellij/util/containers/ContainerUtilR") -> true
  path.startsWith("com/intellij/util/containers/Conv") -> true
  path.startsWith("com/intellij/util/containers/H") -> true
  path.startsWith("com/intellij/util/containers/N") -> true
  path.startsWith("com/intellij/util/containers/O") -> true
  path.startsWith("com/intellij/util/containers/SLRUC") -> true
  path.startsWith("com/intellij/util/containers/Sm") -> true
  path.startsWith("com/intellij/util/graph/DFSTBuilder\$T") -> true
  path.startsWith("com/intellij/util/io/IOU") -> true
  path.startsWith("com/intellij/util/io/IntToIntBtree\$BtreeI") -> true
  path.startsWith("com/intellij/util/io/K") -> true
  path.startsWith("com/intellij/util/io/Paged") -> true
  path.startsWith("com/intellij/util/io/PersistentEnumeratorBase\$R") -> true
  path.startsWith("com/intellij/util/io/PersistentHashMapValueStorage\$C") -> true
  path.startsWith("com/intellij/util/io/PersistentMapB") -> true
  path.startsWith("com/intellij/util/io/Re") -> true
  path.startsWith("com/intellij/util/lang/F") -> true
  path.startsWith("com/intellij/util/lang/Ja") -> true
  path.startsWith("com/intellij/util/lang/R") -> true
  path.startsWith("com/intellij/util/lang/Z") -> true
  path.startsWith("com/intellij/util/messages/T") -> true
  path.startsWith("com/intellij/util/text/K") -> true
  path.startsWith("com/intellij/util/text/M") -> true
  path.startsWith("gnu/trove/TByteA") -> true
  path.startsWith("gnu/trove/TDoubleA") -> true
  path.startsWith("gnu/trove/TFloatA") -> true
  path.startsWith("gnu/trove/TIntA") -> true
  path.startsWith("gnu/trove/TLongA") -> true
  path.startsWith("gnu/trove/TP") -> true
  path.startsWith("kotlin/M") -> true
  path.startsWith("kotlin/reflect/P") -> true
  path.startsWith("kotlin/reflect/W") -> true
  path.startsWith("kotlin/reflect/full/I") -> true
  path.startsWith("kotlin/reflect/full/J") -> true
  path.startsWith("kotlin/reflect/full/KClasses\$i") -> true
  path.startsWith("kotlin/reflect/full/KClassi") -> true
  path.startsWith("kotlin/reflect/jvm/internal/F") -> true
  path.startsWith("kotlin/reflect/jvm/internal/calls/AnnotationConstructorCaller\$") -> true
  path.startsWith("kotlin/reflect/jvm/internal/calls/AnnotationConstructorCallerKt\$createAnnotationInstance\$t") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/S") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/builtins/C") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/builtins/D") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/builtins/F") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/builtins/functions/FunctionI") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/builtins/jvm/C") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/builtins/jvm/F") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/builtins/jvm/JvmBuiltInsP") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/descriptors/runtime/structure/ReflectJavaAr") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/descriptors/runtime/structure/ReflectJavaE") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/descriptors/runtime/structure/ReflectJavaMe") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/descriptors/runtime/structure/ReflectJavaP") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/AnnotationQ") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/C") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/F") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/R") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/lazy/T") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/lazy/descriptors/C") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/lazy/descriptors/D") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/lazy/descriptors/LazyJavaScope\$f") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/lazy/descriptors/LazyJavaScope\$p") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/lazy/types/RawT") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/so") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/structure/JavaAnnotationA") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/structure/JavaAr") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/structure/JavaE") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/structure/JavaL") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/structure/JavaP") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/structure/JavaTypeP") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/typeEnhancement/E") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/typeEnhancement/Nu") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/typeEnhancement/TypeC") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/kotlin/P") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/kotlin/S") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/resolve/DescriptorF") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/resolve/R") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/resolve/constants/A") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/resolve/constants/B") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/resolve/constants/S") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/serialization/deserialization/E") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/serialization/deserialization/F") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/serialization/deserialization/L") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/serialization/deserialization/descriptors/DeserializedClassDescriptor\$c") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/serialization/deserialization/descriptors/DeserializedCo") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/serialization/deserialization/descriptors/DeserializedP") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/types/Cl") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/types/L") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/types/TypeU") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/types/TypeW") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/types/model/D") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/types/model/S") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/types/model/TypeA") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/types/model/TypeSystemContextK") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/types/model/TypeV") -> true
  path.startsWith("kotlin/script/experimental/jvmhost/JvmScriptS") -> true
  path.startsWith("kotlin/sy") -> true
  path.startsWith("org/a") -> true
  path.startsWith("org/fusesource/hawtjni/runtime/C") -> true
  path.startsWith("org/jdom/D") -> true
  path.startsWith("org/jdom/E") -> true
  path.startsWith("org/jdom/N") -> true
  path.startsWith("org/jdom/P") -> true
  path.startsWith("org/jetbrains/kotlin/backend/jvm/JvmLowerKt\$m") -> true
  path.startsWith("org/jetbrains/kotlin/incremental/classpathDiff/Jar") -> true
  path.startsWith("org/jetbrains/kotlin/javax/inject/S") -> true
  path.startsWith("org/jetbrains/kotlin/net/jpountz/lz4/LZ4SafeU") -> true
  path.startsWith("org/jline/terminal/impl/AbstractW") -> true
  path.startsWith("META-INF/v") -> true
  path.startsWith("com/google/common/collect/FilteredEntryMultimap\$Keys\$1.") -> true
  path.startsWith("com/google/common/collect/FilteredEntryMultimap\$Keys.") -> true
  path.startsWith("com/google/common/collect/FilteredEntryMultimap\$V") -> true
  path.startsWith("com/google/common/collect/FilteredEntryMultimap.") -> true
  path.startsWith("com/google/common/collect/FilteredEntryS") -> true
  path.startsWith("com/google/common/collect/FilteredS") -> true
  path.startsWith("com/google/common/collect/ImmutableSortedA") -> true
  path.startsWith("com/google/common/collect/ImmutableSortedMap\$B") -> true
  path.startsWith("com/google/common/collect/ImmutableSortedMap\$S") -> true
  path.startsWith("com/google/common/collect/ImmutableSortedMap.") -> true
  path.startsWith("com/google/common/collect/ImmutableSortedMapF") -> true
  path.startsWith("com/google/common/collect/Iterables\$1.") -> true
  path.startsWith("com/google/common/collect/Iterables\$2") -> true
  path.startsWith("com/google/common/collect/Iterables\$3") -> true
  path.startsWith("com/google/common/collect/Iterables\$4") -> true
  path.startsWith("com/google/common/collect/Iterables\$5") -> true
  path.startsWith("com/google/common/collect/Iterables\$7") -> true
  path.startsWith("com/google/common/collect/Iterables\$8") -> true
  path.startsWith("com/google/common/collect/Iterables\$9") -> true
  path.startsWith("com/google/common/collect/Iterables\$U") -> true
  path.startsWith("com/google/common/collect/Iterables.") -> true
  path.startsWith("com/google/common/collect/Iterators\$2") -> true
  path.startsWith("com/google/common/collect/Iterators\$3") -> true
  path.startsWith("com/google/common/collect/Iterators\$4") -> true
  path.startsWith("com/google/common/collect/Iterators\$5") -> true
  path.startsWith("com/google/common/collect/Iterators\$6") -> true
  path.startsWith("com/google/common/collect/Iterators\$7") -> true
  path.startsWith("com/google/common/collect/Iterators\$8") -> true
  path.startsWith("com/google/common/collect/Iterators\$9") -> true
  path.startsWith("com/google/common/collect/Iterators\$A") -> true
  path.startsWith("com/google/common/collect/Iterators\$C") -> true
  path.startsWith("com/google/common/collect/Iterators\$E") -> true
  path.startsWith("com/google/common/collect/Iterators\$MergingIterator.") -> true
  path.startsWith("com/google/common/collect/Iterators\$P") -> true
  path.startsWith("com/google/common/collect/Iterators.") -> true
  path.startsWith("com/google/common/collect/Maps\$2") -> true
  path.startsWith("com/google/common/collect/Maps\$3") -> true
  path.startsWith("com/google/common/collect/Maps\$4") -> true
  path.startsWith("com/google/common/collect/Maps\$5") -> true
  path.startsWith("com/google/common/collect/Maps\$6") -> true
  path.startsWith("com/google/common/collect/Maps\$7") -> true
  path.startsWith("com/google/common/collect/Maps\$8") -> true
  path.startsWith("com/google/common/collect/Maps\$9") -> true
  path.startsWith("com/google/common/collect/Maps\$Ab") -> true
  path.startsWith("com/google/common/collect/Maps\$B") -> true
  path.startsWith("com/google/common/collect/Maps\$K") -> true
  path.startsWith("com/google/common/collect/Maps\$M") -> true
  path.startsWith("com/google/common/collect/Maps.") -> true
  path.startsWith("com/google/common/collect/Multimap.") -> true
  path.startsWith("com/google/common/collect/Multimaps\$AsMap\$EntrySet.") -> true
  path.startsWith("com/google/common/collect/Multimaps\$AsMap.") -> true
  path.startsWith("com/google/common/collect/Multimaps\$E") -> true
  path.startsWith("com/google/common/collect/Multimaps\$TransformedEntriesL") -> true
  path.startsWith("com/google/common/collect/Multimaps\$TransformedEntriesMultimap.") -> true
  path.startsWith("com/google/common/collect/Multimaps\$UnmodifiableL") -> true
  path.startsWith("com/google/common/collect/Multimaps\$UnmodifiableMultimap.") -> true
  path.startsWith("com/google/common/collect/Multimaps.") -> true
  path.startsWith("com/google/common/collect/SetM") -> true
  path.startsWith("com/google/common/collect/Sets\$I") -> true
  path.startsWith("com/google/common/collect/Sets\$U") -> true
  path.startsWith("com/google/common/collect/Sets.") -> true
  path.startsWith("com/intellij/B") -> true
  path.startsWith("com/intellij/U") -> true
  path.startsWith("com/intellij/codeInsight/CodeInsightUtilCore.") -> true
  path.startsWith("com/intellij/codeInsight/Con") -> true
  path.startsWith("com/intellij/codeInsight/F") -> true
  path.startsWith("com/intellij/codeInsight/folding/C") -> true
  path.startsWith("com/intellij/con") -> true
  path.startsWith("com/intellij/diagnostic/I") -> true
  path.startsWith("com/intellij/diagnostic/S") -> true
  path.startsWith("com/intellij/f") -> true
  path.startsWith("com/intellij/ide/IconL") -> true
  path.startsWith("com/intellij/ide/T") -> true
  path.startsWith("com/intellij/ide/highlighter/JS") -> true
  path.startsWith("com/intellij/ide/plugins/C") -> true
  path.startsWith("com/intellij/ide/plugins/IdeaPluginDescriptor.") -> true
  path.startsWith("com/intellij/ide/plugins/Im") -> true
  path.startsWith("com/intellij/ide/plugins/Re") -> true
  path.startsWith("com/intellij/ide/plugins/c") -> true
  path.startsWith("com/intellij/injected/editor/D") -> true
  path.startsWith("com/intellij/j") -> true
  path.startsWith("com/intellij/lang/Com") -> true
  path.startsWith("com/intellij/lang/java/JS") -> true
  path.startsWith("com/intellij/lang/java/b") -> true
  path.startsWith("com/intellij/lang/jvm/D") -> true
  path.startsWith("com/intellij/lang/jvm/annotation/JvmAnnotationCo") -> true
  path.startsWith("com/intellij/lang/jvm/annotation/JvmAnnotationE") -> true
  path.startsWith("com/intellij/mock/MockDumbU") -> true
  path.startsWith("com/intellij/model/S") -> true
  path.startsWith("com/intellij/navigation/C") -> true
  path.startsWith("com/intellij/navigation/ItemPresentation.") -> true
  path.startsWith("com/intellij/navigation/ItemPresentationProvider.") -> true
  path.startsWith("com/intellij/navigation/N") -> true
  path.startsWith("com/intellij/openapi/F") -> true
  path.startsWith("com/intellij/openapi/application/ApplicationI") -> true
  path.startsWith("com/intellij/openapi/application/ApplicationL") -> true
  path.startsWith("com/intellij/openapi/application/ApplicationN") -> true
  path.startsWith("com/intellij/openapi/application/C") -> true
  path.startsWith("com/intellij/openapi/application/E") -> true
  path.startsWith("com/intellij/openapi/application/ModalityI") -> true
  path.startsWith("com/intellij/openapi/application/ModalityStateL") -> true
  path.startsWith("com/intellij/openapi/application/P") -> true
  path.startsWith("com/intellij/openapi/command/CommandT") -> true
  path.startsWith("com/intellij/openapi/command/U") -> true
  path.startsWith("com/intellij/openapi/command/impl/Com") -> true
  path.startsWith("com/intellij/openapi/command/undo/UndoC") -> true
  path.startsWith("com/intellij/openapi/components/Service.") -> true
  path.startsWith("com/intellij/openapi/components/ServiceDescriptor\$P") -> true
  path.startsWith("com/intellij/openapi/components/ServiceDescriptor.") -> true
  path.startsWith("com/intellij/openapi/editor/Document.") -> true
  path.startsWith("com/intellij/openapi/editor/colors/Col") -> true
  path.startsWith("com/intellij/openapi/editor/impl/F") -> true
  path.startsWith("com/intellij/openapi/editor/impl/PersistentRangeMarkerU") -> true
  path.startsWith("com/intellij/openapi/editor/impl/S") -> true
  path.startsWith("com/intellij/openapi/editor/impl/e") -> true
  path.startsWith("com/intellij/openapi/extensions/A") -> true
  path.startsWith("com/intellij/openapi/extensions/B") -> true
  path.startsWith("com/intellij/openapi/extensions/C") -> true
  path.startsWith("com/intellij/openapi/extensions/D") -> true
  path.startsWith("com/intellij/openapi/extensions/I") -> true
  path.startsWith("com/intellij/openapi/extensions/impl/B") -> true
  path.startsWith("com/intellij/openapi/extensions/impl/ExtensionC") -> true
  path.startsWith("com/intellij/openapi/extensions/impl/ExtensionPointImpl\$1") -> true
  path.startsWith("com/intellij/openapi/extensions/impl/ExtensionPointImpl\$O") -> true
  path.startsWith("com/intellij/openapi/extensions/impl/ExtensionPointImpl.") -> true
  path.startsWith("com/intellij/openapi/extensions/impl/ExtensionPr") -> true
  path.startsWith("com/intellij/openapi/extensions/impl/Extensions") -> true
  path.startsWith("com/intellij/openapi/extensions/impl/XmlExtensionAdapter.") -> true
  path.startsWith("com/intellij/openapi/module/ModuleS") -> true
  path.startsWith("com/intellij/openapi/progress/Pe") -> true
  path.startsWith("com/intellij/openapi/progress/Proc") -> true
  path.startsWith("com/intellij/openapi/progress/TaskI") -> true
  path.startsWith("com/intellij/openapi/progress/impl/ProgressRe") -> true
  path.startsWith("com/intellij/openapi/progress/util/S") -> true
  path.startsWith("com/intellij/openapi/project/DumbA") -> true
  path.startsWith("com/intellij/openapi/project/DumbU") -> true
  path.startsWith("com/intellij/openapi/project/I") -> true
  path.startsWith("com/intellij/openapi/project/Po") -> true
  path.startsWith("com/intellij/openapi/roots/ContentIteratorE") -> true
  path.startsWith("com/intellij/openapi/ui") -> true
  path.startsWith("com/intellij/openapi/util/BuildNumber.") -> true
  path.startsWith("com/intellij/openapi/util/Ch") -> true
  path.startsWith("com/intellij/openapi/util/F") -> true
  path.startsWith("com/intellij/openapi/util/G") -> true
  path.startsWith("com/intellij/openapi/util/I") -> true
  path.startsWith("com/intellij/openapi/util/Key.") -> true
  path.startsWith("com/intellij/openapi/util/Pair\$1") -> true
  path.startsWith("com/intellij/openapi/util/Pair\$2") -> true
  path.startsWith("com/intellij/openapi/util/Pair\$N") -> true
  path.startsWith("com/intellij/openapi/util/Pair.") -> true
  path.startsWith("com/intellij/openapi/util/Pr") -> true
  path.startsWith("com/intellij/openapi/util/Se") -> true
  path.startsWith("com/intellij/openapi/util/Si") -> true
  path.startsWith("com/intellij/openapi/util/Stac") -> true
  path.startsWith("com/intellij/openapi/util/VolatileNullableLazyValue.") -> true
  path.startsWith("com/intellij/openapi/util/io/D") -> true
  path.startsWith("com/intellij/openapi/util/io/FileSystemUtil\$1") -> true
  path.startsWith("com/intellij/openapi/util/io/FileSystemUtil\$M") -> true
  path.startsWith("com/intellij/openapi/util/io/FileSystemUtil\$N") -> true
  path.startsWith("com/intellij/openapi/util/io/FileSystemUtil.") -> true
  path.startsWith("com/intellij/openapi/util/io/FileT") -> true
  path.startsWith("com/intellij/openapi/util/io/FileUtil.") -> true
  path.startsWith("com/intellij/openapi/util/io/FileUtilRt\$1") -> true
  path.startsWith("com/intellij/openapi/util/io/FileUtilRt\$2") -> true
  path.startsWith("com/intellij/openapi/util/io/FileUtilRt\$R") -> true
  path.startsWith("com/intellij/openapi/util/io/FileUtilRt\$S") -> true
  path.startsWith("com/intellij/openapi/util/io/FileUtilRt.") -> true
  path.startsWith("com/intellij/openapi/util/io/J") -> true
  path.startsWith("com/intellij/openapi/util/io/O") -> true
  path.startsWith("com/intellij/openapi/util/io/P") -> true
  path.startsWith("com/intellij/openapi/vfs/H") -> true
  path.startsWith("com/intellij/openapi/vfs/N") -> true
  path.startsWith("com/intellij/openapi/vfs/P") -> true
  path.startsWith("com/intellij/openapi/vfs/VF") -> true
  path.startsWith("com/intellij/openapi/vfs/VirtualFileManagerL") -> true
  path.startsWith("com/intellij/openapi/vfs/VirtualFileW") -> true
  path.startsWith("com/intellij/openapi/vfs/impl/C") -> true
  path.startsWith("com/intellij/openapi/vfs/impl/ZipEntryMap\$1") -> true
  path.startsWith("com/intellij/openapi/vfs/impl/ZipEntryMap\$EntrySet.") -> true
  path.startsWith("com/intellij/openapi/vfs/impl/ZipEntryMap.") -> true
  path.startsWith("com/intellij/openapi/vfs/newvfs/C") -> true
  path.startsWith("com/intellij/openapi/vfs/newvfs/events/C") -> true
  path.startsWith("com/intellij/openapi/vfs/p") -> true
  path.startsWith("com/intellij/patterns/C") -> true
  path.startsWith("com/intellij/patterns/ElementPattern.") -> true
  path.startsWith("com/intellij/patterns/ElementPatternC") -> true
  path.startsWith("com/intellij/patterns/Pr") -> true
  path.startsWith("com/intellij/patterns/V") -> true
  path.startsWith("com/intellij/patterns/compiler/PatternCompiler.") -> true
  path.startsWith("com/intellij/pom/N") -> true
  path.startsWith("com/intellij/pom/PomI") -> true
  path.startsWith("com/intellij/pom/PomModelA") -> true
  path.startsWith("com/intellij/pom/PomN") -> true
  path.startsWith("com/intellij/pom/PomR") -> true
  path.startsWith("com/intellij/pom/Ps") -> true
  path.startsWith("com/intellij/pom/event/PomC") -> true
  path.startsWith("com/intellij/pom/tree/T") -> true
  path.startsWith("com/intellij/pom/tree/events/T") -> true
  path.startsWith("com/intellij/psi/AbstractE") -> true
  path.startsWith("com/intellij/psi/ClassT") -> true
  path.startsWith("com/intellij/psi/De") -> true
  path.startsWith("com/intellij/psi/EmptyR") -> true
  path.startsWith("com/intellij/psi/ExternallyA") -> true
  path.startsWith("com/intellij/psi/Ig") -> true
  path.startsWith("com/intellij/psi/JVMElementFactori") -> true
  path.startsWith("com/intellij/psi/JVMElementFactoryP") -> true
  path.startsWith("com/intellij/psi/JavaCodeFragmentF") -> true
  path.startsWith("com/intellij/psi/JavaCom") -> true
  path.startsWith("com/intellij/psi/JvmC") -> true
  path.startsWith("com/intellij/psi/LanguageA") -> true
  path.startsWith("com/intellij/psi/Multip") -> true
  path.startsWith("com/intellij/psi/O") -> true
  path.startsWith("com/intellij/psi/Pa") -> true
  path.startsWith("com/intellij/psi/PsiAnnotationS") -> true
  path.startsWith("com/intellij/psi/PsiElementFactory\$") -> true
  path.startsWith("com/intellij/psi/PsiExpressionC") -> true
  path.startsWith("com/intellij/psi/PsiFileW") -> true
  path.startsWith("com/intellij/psi/PsiLis") -> true
  path.startsWith("com/intellij/psi/PsiLock") -> true
  path.startsWith("com/intellij/psi/PsiMig") -> true
  path.startsWith("com/intellij/psi/PsiPolyVariantReferenceB") -> true
  path.startsWith("com/intellij/psi/PsiRecursiveV") -> true
  path.startsWith("com/intellij/psi/PsiTe") -> true
  path.startsWith("com/intellij/psi/PsiTreeA") -> true
  path.startsWith("com/intellij/psi/PsiTreeChangeA") -> true
  path.startsWith("com/intellij/psi/Resolvi") -> true
  path.startsWith("com/intellij/psi/Str") -> true
  path.startsWith("com/intellij/psi/Synth") -> true
  path.startsWith("com/intellij/psi/codeStyle/A") -> true
  path.startsWith("com/intellij/psi/codeStyle/Ch") -> true
  path.startsWith("com/intellij/psi/codeStyle/I") -> true
  path.startsWith("com/intellij/psi/codeStyle/P") -> true
  path.startsWith("com/intellij/psi/codeStyle/W") -> true
  path.startsWith("com/intellij/psi/controlFlow/Al") -> true
  path.startsWith("com/intellij/psi/controlFlow/Comp") -> true
  path.startsWith("com/intellij/psi/cs") -> true
  path.startsWith("com/intellij/psi/filters/Cont") -> true
  path.startsWith("com/intellij/psi/filters/ElementFilterB") -> true
  path.startsWith("com/intellij/psi/filters/c") -> true
  path.startsWith("com/intellij/psi/impl/Bo") -> true
  path.startsWith("com/intellij/psi/impl/Ex") -> true
  path.startsWith("com/intellij/psi/impl/Po") -> true
  path.startsWith("com/intellij/psi/impl/PsiDi") -> true
  path.startsWith("com/intellij/psi/impl/PsiDocumentManagerBase\$P") -> true
  path.startsWith("com/intellij/psi/impl/PsiPars") -> true
  path.startsWith("com/intellij/psi/impl/Ren") -> true
  path.startsWith("com/intellij/psi/impl/Sy") -> true
  path.startsWith("com/intellij/psi/impl/compiled/ClassFileD") -> true
  path.startsWith("com/intellij/psi/impl/file/impl/FileManagerImpl\$2") -> true
  path.startsWith("com/intellij/psi/impl/light/D") -> true
  path.startsWith("com/intellij/psi/impl/light/I") -> true
  path.startsWith("com/intellij/psi/impl/light/J") -> true
  path.startsWith("com/intellij/psi/impl/light/LightMem") -> true
  path.startsWith("com/intellij/psi/impl/light/LightRecordMet") -> true
  path.startsWith("com/intellij/psi/impl/light/LightVariableBa") -> true
  path.startsWith("com/intellij/psi/impl/smartPointers/T") -> true
  path.startsWith("com/intellij/psi/impl/source/I") -> true
  path.startsWith("com/intellij/psi/impl/source/JavaLightT") -> true
  path.startsWith("com/intellij/psi/impl/source/javadoc/A") -> true
  path.startsWith("com/intellij/psi/impl/source/javadoc/C") -> true
  path.startsWith("com/intellij/psi/impl/source/javadoc/E") -> true
  path.startsWith("com/intellij/psi/impl/source/javadoc/Pa") -> true
  path.startsWith("com/intellij/psi/impl/source/javadoc/R") -> true
  path.startsWith("com/intellij/psi/impl/source/javadoc/V") -> true
  path.startsWith("com/intellij/psi/impl/source/resolve/Pr") -> true
  path.startsWith("com/intellij/psi/impl/source/resolve/ResolveCache\$R") -> true
  path.startsWith("com/intellij/psi/impl/source/resolve/reference/PsiReferenceC") -> true
  path.startsWith("com/intellij/psi/impl/source/resolve/reference/PsiReferenceU") -> true
  path.startsWith("com/intellij/psi/impl/source/tree/IJ") -> true
  path.startsWith("com/intellij/psi/impl/source/tree/RecursiveTreeElementV") -> true
  path.startsWith("com/intellij/psi/infos/MethodCandidateInfo\$ApplicabilityLevel.") -> true
  path.startsWith("com/intellij/psi/javadoc/C") -> true
  path.startsWith("com/intellij/psi/meta/PsiP") -> true
  path.startsWith("com/intellij/psi/meta/PsiW") -> true
  path.startsWith("com/intellij/psi/scope/B") -> true
  path.startsWith("com/intellij/psi/scope/Pr") -> true
  path.startsWith("com/intellij/psi/scope/processor/FilterE") -> true
  path.startsWith("com/intellij/psi/scope/processor/MethodResolveP") -> true
  path.startsWith("com/intellij/psi/search/GlobalSearchScopeU") -> true
  path.startsWith("com/intellij/psi/search/PsiElementProcessor\$CollectElementsW") -> true
  path.startsWith("com/intellij/psi/search/PsiElementProcessor\$CollectF") -> true
  path.startsWith("com/intellij/psi/search/PsiElementProcessorA") -> true
  path.startsWith("com/intellij/psi/search/PsiN") -> true
  path.startsWith("com/intellij/psi/search/impl/p") -> true
  path.startsWith("com/intellij/psi/stubs/H") -> true
  path.startsWith("com/intellij/psi/stubs/Man") -> true
  path.startsWith("com/intellij/psi/stubs/Mo") -> true
  path.startsWith("com/intellij/psi/stubs/Se") -> true
  path.startsWith("com/intellij/psi/stubs/Str") -> true
  path.startsWith("com/intellij/psi/stubs/StubElementT") -> true
  path.startsWith("com/intellij/psi/stubs/StubF") -> true
  path.startsWith("com/intellij/psi/stubs/StubInp") -> true
  path.startsWith("com/intellij/psi/stubs/StubO") -> true
  path.startsWith("com/intellij/psi/stubs/StubTe") -> true
  path.startsWith("com/intellij/psi/stubs/U") -> true
  path.startsWith("com/intellij/psi/templateLanguages/I") -> true
  path.startsWith("com/intellij/psi/tree/Ch") -> true
  path.startsWith("com/intellij/psi/tree/CustomP") -> true
  path.startsWith("com/intellij/psi/tree/D") -> true
  path.startsWith("com/intellij/psi/tree/IStr") -> true
  path.startsWith("com/intellij/psi/tree/R") -> true
  path.startsWith("com/intellij/psi/util/A") -> true
  path.startsWith("com/intellij/psi/util/CachedValue.") -> true
  path.startsWith("com/intellij/psi/util/ClassK") -> true
  path.startsWith("com/intellij/psi/util/F") -> true
  path.startsWith("com/intellij/psi/util/PsiA") -> true
  path.startsWith("com/intellij/psi/util/PsiCo") -> true
  path.startsWith("com/intellij/psi/util/PsiExpressionTrimRenderer\$") -> true
  path.startsWith("com/intellij/psi/util/PsiFormatUtilB") -> true
  path.startsWith("com/intellij/psi/util/PsiP") -> true
  path.startsWith("com/intellij/psi/util/Q") -> true
  path.startsWith("com/intellij/r") -> true
  path.startsWith("com/intellij/ui/DummyIconManager.") -> true
  path.startsWith("com/intellij/ui/IconManager.") -> true
  path.startsWith("com/intellij/util/AstLoadingE") -> true
  path.startsWith("com/intellij/util/Bi") -> true
  path.startsWith("com/intellij/util/CachedValuesF") -> true
  path.startsWith("com/intellij/util/Ch") -> true
  path.startsWith("com/intellij/util/Conc") -> true
  path.startsWith("com/intellij/util/Consumer.") -> true
  path.startsWith("com/intellij/util/DefaultB") -> true
  path.startsWith("com/intellij/util/Do") -> true
  path.startsWith("com/intellij/util/En") -> true
  path.startsWith("com/intellij/util/Ev") -> true
  path.startsWith("com/intellij/util/Function\$") -> true
  path.startsWith("com/intellij/util/Function.") -> true
  path.startsWith("com/intellij/util/Functions\$1") -> true
  path.startsWith("com/intellij/util/Functions\$2") -> true
  path.startsWith("com/intellij/util/Functions.") -> true
  path.startsWith("com/intellij/util/In") -> true
  path.startsWith("com/intellij/util/J") -> true
  path.startsWith("com/intellij/util/KeyedLazyInstance.") -> true
  path.startsWith("com/intellij/util/M") -> true
  path.startsWith("com/intellij/util/NullableFunction.") -> true
  path.startsWith("com/intellij/util/Patc") -> true
  path.startsWith("com/intellij/util/Processi") -> true
  path.startsWith("com/intellij/util/Processor.") -> true
  path.startsWith("com/intellij/util/QueryE") -> true
  path.startsWith("com/intellij/util/R") -> true
  path.startsWith("com/intellij/util/Unm") -> true
  path.startsWith("com/intellij/util/cl") -> true
  path.startsWith("com/intellij/util/containers/Ca") -> true
  path.startsWith("com/intellij/util/containers/Com") -> true
  path.startsWith("com/intellij/util/containers/ConcurrentFactoryMap\$1") -> true
  path.startsWith("com/intellij/util/containers/ConcurrentFactoryMap\$2") -> true
  path.startsWith("com/intellij/util/containers/ConcurrentFactoryMap\$3") -> true
  path.startsWith("com/intellij/util/containers/ConcurrentFactoryMap\$CollectionWrapper\$1") -> true
  path.startsWith("com/intellij/util/containers/ConcurrentFactoryMap\$CollectionWrapper\$E") -> true
  path.startsWith("com/intellij/util/containers/ConcurrentFactoryMap\$CollectionWrapper.") -> true
  path.startsWith("com/intellij/util/containers/ConcurrentFactoryMap.") -> true
  path.startsWith("com/intellij/util/containers/ConcurrentRefHashMap\$1") -> true
  path.startsWith("com/intellij/util/containers/ConcurrentRefHashMap\$H") -> true
  path.startsWith("com/intellij/util/containers/ConcurrentRefHashMap\$K") -> true
  path.startsWith("com/intellij/util/containers/ConcurrentRefHashMap\$R") -> true
  path.startsWith("com/intellij/util/containers/ConcurrentRefHashMap.") -> true
  path.startsWith("com/intellij/util/containers/ContainerUtil\$1") -> true
  path.startsWith("com/intellij/util/containers/ContainerUtil\$2") -> true
  path.startsWith("com/intellij/util/containers/ContainerUtil\$4") -> true
  path.startsWith("com/intellij/util/containers/ContainerUtil\$7") -> true
  path.startsWith("com/intellij/util/containers/ContainerUtil\$8.") -> true
  path.startsWith("com/intellij/util/containers/ContainerUtil\$I") -> true
  path.startsWith("com/intellij/util/containers/ContainerUtil.") -> true
  path.startsWith("com/intellij/util/containers/P") -> true
  path.startsWith("com/intellij/util/containers/SLRUMap.") -> true
  path.startsWith("com/intellij/util/containers/Se") -> true
  path.startsWith("com/intellij/util/containers/Sh") -> true
  path.startsWith("com/intellij/util/containers/St") -> true
  path.startsWith("com/intellij/util/e") -> true
  path.startsWith("com/intellij/util/graph/C") -> true
  path.startsWith("com/intellij/util/graph/DFSTBuilder\$1") -> true
  path.startsWith("com/intellij/util/graph/DFSTBuilder.") -> true
  path.startsWith("com/intellij/util/graph/I") -> true
  path.startsWith("com/intellij/util/graph/O") -> true
  path.startsWith("com/intellij/util/graph/i") -> true
  path.startsWith("com/intellij/util/indexing/IndexI") -> true
  path.startsWith("com/intellij/util/io/Dif") -> true
  path.startsWith("com/intellij/util/io/DirectBu") -> true
  path.startsWith("com/intellij/util/io/DirectByteBufferA") -> true
  path.startsWith("com/intellij/util/io/IOCancellationCallback.") -> true
  path.startsWith("com/intellij/util/io/IOCancellationCallbackHolder.") -> true
  path.startsWith("com/intellij/util/io/IOS") -> true
  path.startsWith("com/intellij/util/io/Inl") -> true
  path.startsWith("com/intellij/util/io/IntI") -> true
  path.startsWith("com/intellij/util/io/IntToIntBtree\$BtreeR") -> true
  path.startsWith("com/intellij/util/io/IntToIntBtree.") -> true
  path.startsWith("com/intellij/util/io/L") -> true
  path.startsWith("com/intellij/util/io/OpenChannelsCache\$ChannelD") -> true
  path.startsWith("com/intellij/util/io/OpenChannelsCache.") -> true
  path.startsWith("com/intellij/util/io/PersistentEnumerator.") -> true
  path.startsWith("com/intellij/util/io/PersistentEnumeratorBase\$1") -> true
  path.startsWith("com/intellij/util/io/PersistentEnumeratorBase\$D") -> true
  path.startsWith("com/intellij/util/io/PersistentEnumeratorBase\$V") -> true
  path.startsWith("com/intellij/util/io/PersistentEnumeratorBase.") -> true
  path.startsWith("com/intellij/util/io/PersistentEnumeratorW") -> true
  path.startsWith("com/intellij/util/io/PersistentHashMap\$") -> true
  path.startsWith("com/intellij/util/io/PersistentHashMap.") -> true
  path.startsWith("com/intellij/util/io/PersistentHashMapValueStorage\$1") -> true
  path.startsWith("com/intellij/util/io/PersistentHashMapValueStorage\$2") -> true
  path.startsWith("com/intellij/util/io/PersistentHashMapValueStorage\$3") -> true
  path.startsWith("com/intellij/util/io/PersistentHashMapValueStorage\$4") -> true
  path.startsWith("com/intellij/util/io/PersistentHashMapValueStorage\$5") -> true
  path.startsWith("com/intellij/util/io/PersistentHashMapValueStorage\$F") -> true
  path.startsWith("com/intellij/util/io/PersistentHashMapValueStorage\$M") -> true
  path.startsWith("com/intellij/util/io/PersistentHashMapValueStorage.") -> true
  path.startsWith("com/intellij/util/io/PersistentMap.") -> true
  path.startsWith("com/intellij/util/io/PersistentMapWal\$a") -> true
  path.startsWith("com/intellij/util/io/PersistentMapWal\$p") -> true
  path.startsWith("com/intellij/util/io/PersistentMapWal\$r") -> true
  path.startsWith("com/intellij/util/io/PersistentMapWal.") -> true
  path.startsWith("com/intellij/util/io/UR") -> true
  path.startsWith("com/intellij/util/io/V") -> true
  path.startsWith("com/intellij/util/io/WriteAheadLogKt\$c") -> true
  path.startsWith("com/intellij/util/io/WriteAheadLogKt.") -> true
  path.startsWith("com/intellij/util/keyFMap/A") -> true
  path.startsWith("com/intellij/util/keyFMap/D") -> true
  path.startsWith("com/intellij/util/keyFMap/E") -> true
  path.startsWith("com/intellij/util/keyFMap/K") -> true
  path.startsWith("com/intellij/util/keyFMap/MapBackedFMap.") -> true
  path.startsWith("com/intellij/util/keyFMap/O") -> true
  path.startsWith("com/intellij/util/keyFMap/P") -> true
  path.startsWith("com/intellij/util/lang/Ca") -> true
  path.startsWith("com/intellij/util/lang/ClasspathCache\$I") -> true
  path.startsWith("com/intellij/util/lang/ClasspathCache\$LoaderDataB") -> true
  path.startsWith("com/intellij/util/lang/ClasspathCache.") -> true
  path.startsWith("com/intellij/util/lang/Co") -> true
  path.startsWith("com/intellij/util/lang/JdkZipResourceFile\$1") -> true
  path.startsWith("com/intellij/util/lang/JdkZipResourceFile\$Z") -> true
  path.startsWith("com/intellij/util/lang/JdkZipResourceFile.") -> true
  path.startsWith("com/intellij/util/lang/Loader.") -> true
  path.startsWith("com/intellij/util/lang/U") -> true
  path.startsWith("com/intellij/util/messages/L") -> true
  path.startsWith("com/intellij/util/messages/S") -> true
  path.startsWith("com/intellij/util/messages/impl/MessageBusE") -> true
  path.startsWith("com/intellij/util/messages/impl/MessageD") -> true
  path.startsWith("com/intellij/util/s") -> true
  path.startsWith("com/intellij/util/text/B") -> true
  path.startsWith("com/intellij/util/text/N") -> true
  path.startsWith("com/intellij/util/text/U") -> true
  path.startsWith("gnu/trove/C") -> true
  path.startsWith("gnu/trove/E") -> true
  path.startsWith("gnu/trove/H") -> true
  path.startsWith("gnu/trove/I") -> true
  path.startsWith("gnu/trove/P") -> true
  path.startsWith("gnu/trove/S") -> true
  path.startsWith("gnu/trove/TByteByteI") -> true
  path.startsWith("gnu/trove/TByteDoubleI") -> true
  path.startsWith("gnu/trove/TByteFloatI") -> true
  path.startsWith("gnu/trove/TByteFu") -> true
  path.startsWith("gnu/trove/TByteIntI") -> true
  path.startsWith("gnu/trove/TByteIt") -> true
  path.startsWith("gnu/trove/TByteLongI") -> true
  path.startsWith("gnu/trove/TByteObjectI") -> true
  path.startsWith("gnu/trove/TByteP") -> true
  path.startsWith("gnu/trove/TDoubleByteI") -> true
  path.startsWith("gnu/trove/TDoubleDoubleI") -> true
  path.startsWith("gnu/trove/TDoubleFloatI") -> true
  path.startsWith("gnu/trove/TDoubleFu") -> true
  path.startsWith("gnu/trove/TDoubleIntI") -> true
  path.startsWith("gnu/trove/TDoubleIt") -> true
  path.startsWith("gnu/trove/TDoubleLongI") -> true
  path.startsWith("gnu/trove/TDoubleObjectI") -> true
  path.startsWith("gnu/trove/TFloatByteI") -> true
  path.startsWith("gnu/trove/TFloatDoubleI") -> true
  path.startsWith("gnu/trove/TFloatFloatI") -> true
  path.startsWith("gnu/trove/TFloatFu") -> true
  path.startsWith("gnu/trove/TFloatIntI") -> true
  path.startsWith("gnu/trove/TFloatIt") -> true
  path.startsWith("gnu/trove/TFloatLongI") -> true
  path.startsWith("gnu/trove/TFloatObjectI") -> true
  path.startsWith("gnu/trove/TIntByteI") -> true
  path.startsWith("gnu/trove/TIntDoubleI") -> true
  path.startsWith("gnu/trove/TIntFloatI") -> true
  path.startsWith("gnu/trove/TIntFu") -> true
  path.startsWith("gnu/trove/TIntP") -> true
  path.startsWith("gnu/trove/TIntS") -> true
  path.startsWith("gnu/trove/TIt") -> true
  path.startsWith("gnu/trove/TLongByteI") -> true
  path.startsWith("gnu/trove/TLongDoubleI") -> true
  path.startsWith("gnu/trove/TLongFloatI") -> true
  path.startsWith("gnu/trove/TLongFu") -> true
  path.startsWith("gnu/trove/TLongLongI") -> true
  path.startsWith("gnu/trove/TLongP") -> true
  path.startsWith("gnu/trove/TObjectByteI") -> true
  path.startsWith("gnu/trove/TObjectC") -> true
  path.startsWith("gnu/trove/TObjectDoubleI") -> true
  path.startsWith("gnu/trove/TObjectFloatI") -> true
  path.startsWith("gnu/trove/TObjectFu") -> true
  path.startsWith("gnu/trove/TObjectO") -> true
  path.startsWith("gnu/trove/TObjectP") -> true
  path.startsWith("kotlin/A") -> true
  path.startsWith("kotlin/B") -> true
  path.startsWith("kotlin/F") -> true
  path.startsWith("kotlin/H") -> true
  path.startsWith("kotlin/I") -> true
  path.startsWith("kotlin/W") -> true
  path.startsWith("kotlin/_") -> true
  path.startsWith("kotlin/reflect/G") -> true
  path.startsWith("kotlin/reflect/full/KA") -> true
  path.startsWith("kotlin/reflect/full/KClasses\$allSupertypes\$2") -> true
  path.startsWith("kotlin/reflect/full/KClasses\$d") -> true
  path.startsWith("kotlin/reflect/full/KClasses.") -> true
  path.startsWith("kotlin/reflect/full/KP") -> true
  path.startsWith("kotlin/reflect/full/KT") -> true
  path.startsWith("kotlin/reflect/full/N") -> true
  path.startsWith("kotlin/reflect/jvm/E") -> true
  path.startsWith("kotlin/reflect/jvm/internal/C") -> true
  path.startsWith("kotlin/reflect/jvm/internal/E") -> true
  path.startsWith("kotlin/reflect/jvm/internal/KClassi") -> true
  path.startsWith("kotlin/reflect/jvm/internal/Ko") -> true
  path.startsWith("kotlin/reflect/jvm/internal/M") -> true
  path.startsWith("kotlin/reflect/jvm/internal/T") -> true
  path.startsWith("kotlin/reflect/jvm/internal/W") -> true
  path.startsWith("kotlin/reflect/jvm/internal/calls/AnnotationConstructorCaller.") -> true
  path.startsWith("kotlin/reflect/jvm/internal/calls/AnnotationConstructorCallerKt\$createAnnotationInstance\$h") -> true
  path.startsWith("kotlin/reflect/jvm/internal/calls/AnnotationConstructorCallerKt.") -> true
  path.startsWith("kotlin/reflect/jvm/internal/calls/B") -> true
  path.startsWith("kotlin/reflect/jvm/internal/calls/T") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/builtins/functions/B") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/builtins/functions/FunctionClassDescriptor\$C") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/builtins/functions/FunctionClassDescriptor\$FunctionTypeConstructor.") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/builtins/functions/FunctionClassDescriptor.") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/builtins/functions/FunctionClassKind\$Companion.") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/builtins/functions/FunctionClassKind.") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/builtins/functions/FunctionClassScope.") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/builtins/jvm/JvmBuiltIns.") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/builtins/jvm/JvmBuiltInsCustomizer\$J") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/builtins/jvm/JvmBuiltInsCustomizer\$W") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/builtins/jvm/JvmBuiltInsCustomizer\$getA") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/builtins/jvm/JvmBuiltInsCustomizer\$getF") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/builtins/jvm/JvmBuiltInsCustomizer\$getJdkMethodStatus\$2") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/builtins/jvm/JvmBuiltInsCustomizer\$isMutabilityViolation\$2") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/builtins/jvm/JvmBuiltInsCustomizer\$n") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/builtins/jvm/JvmBuiltInsCustomizer.") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/builtins/jvm/JvmBuiltInsS") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/builtins/jvm/M") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/descriptors/R") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/descriptors/runtime/structure/ReflectJavaAnnotation.") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/descriptors/runtime/structure/ReflectJavaAnnotationOwner.") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/descriptors/runtime/structure/ReflectJavaAnnotationOwnerK") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/descriptors/runtime/structure/ReflectJavaF") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/descriptors/runtime/structure/ReflectJavaL") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/descriptors/runtime/structure/ReflectJavaModifierListOwner.") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/descriptors/runtime/structure/ReflectJavaR") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/descriptors/runtime/structure/ReflectJavaV") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/descriptors/runtime/structure/ReflectJavaW") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/AnnotationTypeQualifierResolver.") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/Des") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/P") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/U") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/descriptors/P") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/descriptors/U") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/lazy/M") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/lazy/S") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/lazy/descriptors/LazyJavaScope\$M") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/lazy/descriptors/LazyJavaScope\$R") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/lazy/descriptors/LazyJavaScope\$a") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/lazy/descriptors/LazyJavaScope\$c") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/lazy/descriptors/LazyJavaScope\$ret") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/lazy/descriptors/LazyJavaScope.") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/lazy/descriptors/LazyJavaStaticClassScope\$flatMapJavaStaticSupertypesScopes\$1\$") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/lazy/descriptors/LazyJavaStaticClassScope\$flatMapJavaStaticSupertypesScopes\$2") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/lazy/descriptors/LazyJavaStaticClassScope.") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/lazy/descriptors/LazyJavaStaticS") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/lazy/descriptors/LazyJavaT") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/lazy/types/RawSubstitution\$C") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/lazy/types/RawSubstitution\$e") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/lazy/types/RawSubstitution.") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/structure/JavaAnnotation.") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/structure/JavaAnnotationO") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/structure/JavaF") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/structure/JavaMem") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/structure/JavaMethod.") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/structure/JavaMo") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/structure/JavaN") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/structure/JavaR") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/structure/JavaType.") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/structure/JavaTypes") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/structure/JavaV") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/structure/JavaW") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/structure/Lig") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/structure/ListBasedJavaAnnotationOwner.") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/typeEnhancement/M") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/java/typeEnhancement/SignatureEnhancement.") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/kotlin/AbstractBinaryClassAnnotationAndConstantLoader\$s") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/kotlin/AbstractBinaryClassAnnotationAndConstantLoader.") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/kotlin/BinaryClassAnnotationAndConstantLoaderImpl\$loadAnnotation\$1.") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/kotlin/BinaryClassAnnotationAndConstantLoaderImpl.") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/kotlin/TypeMappingConfiguration.") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/kotlin/TypeMappingConfigurationI") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/kotlin/TypeS") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/kotlin/header/ReadKotlinClassHeaderAnnotationVisitor\$1") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/kotlin/header/ReadKotlinClassHeaderAnnotationVisitor\$C") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/kotlin/header/ReadKotlinClassHeaderAnnotationVisitor\$KotlinMetadataArgumentVisitor\$1") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/kotlin/header/ReadKotlinClassHeaderAnnotationVisitor\$KotlinMetadataArgumentVisitor\$2") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/kotlin/header/ReadKotlinClassHeaderAnnotationVisitor\$KotlinMetadataArgumentVisitor.") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/load/kotlin/header/ReadKotlinClassHeaderAnnotationVisitor.") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/metadata/jvm/deserialization/B") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/metadata/jvm/deserialization/C") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/metadata/jvm/deserialization/JvmF") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/metadata/jvm/deserialization/JvmNameResolver.") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/metadata/jvm/deserialization/JvmP") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/metadata/jvm/deserialization/U") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/resolve/C") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/resolve/DescriptorEquivalenceForOverrides\$areCallableDescriptorsEquivalent\$1") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/resolve/DescriptorEquivalenceForOverrides\$areCallableDescriptorsEquivalent\$overridingUtil\$1\$") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/resolve/DescriptorEquivalenceForOverrides\$areT") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/resolve/DescriptorEquivalenceForOverrides.") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/resolve/DescriptorU") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/resolve/I") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/resolve/N") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/resolve/S") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/resolve/V") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/resolve/constants/Ch") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/resolve/constants/Cl") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/resolve/constants/ConstantValue.") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/resolve/constants/ConstantValueFactory\$createArrayValue\$1") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/resolve/constants/ConstantValueFactory.") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/resolve/constants/D") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/resolve/constants/F") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/resolve/constants/L") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/resolve/constants/N") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/resolve/constants/P") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/resolve/descriptorUtil/DescriptorUtilsKt\$declaresOrInheritsDefaultValue\$2") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/resolve/descriptorUtil/DescriptorUtilsKt\$firstOverridden\$2") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/resolve/descriptorUtil/DescriptorUtilsKt\$p") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/resolve/descriptorUtil/DescriptorUtilsKt.") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/serialization/S") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/serialization/deserialization/DeserializationCom") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/serialization/deserialization/DeserializationConfiguration\$Default.") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/serialization/deserialization/DeserializationConfiguration.") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/serialization/deserialization/DeserializationCont") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/serialization/deserialization/DeserializedC") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/serialization/deserialization/I") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/serialization/deserialization/K") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/serialization/deserialization/MemberDeserializer\$v") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/serialization/deserialization/MemberDeserializer.") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/serialization/deserialization/N") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/serialization/deserialization/S") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/serialization/deserialization/descriptors/Desc") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/serialization/deserialization/descriptors/DeserializedA") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/serialization/deserialization/descriptors/DeserializedCa") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/serialization/deserialization/descriptors/DeserializedClassC") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/serialization/deserialization/descriptors/DeserializedClassDescriptor\$a") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/serialization/deserialization/descriptors/DeserializedClassDescriptor\$m") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/serialization/deserialization/descriptors/DeserializedClassDescriptor\$p") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/serialization/deserialization/descriptors/DeserializedClassDescriptor\$s") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/serialization/deserialization/descriptors/DeserializedClassDescriptor.") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/serialization/deserialization/descriptors/DeserializedS") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/serialization/deserialization/descriptors/N") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/types/Ex") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/types/NotNullS") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/types/Nu") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/types/R") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/types/TypeSystemCommonBackendContext.") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/types/Unw") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/types/V") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/types/W") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/types/model/A") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/types/model/F") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/types/model/I") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/types/model/K") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/types/model/TypeC") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/types/model/TypeP") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/types/model/TypeSystemCom") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/types/model/TypeSystemContext.") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/types/model/TypeSystemInferenceExtensionContext.") -> true
  path.startsWith("kotlin/reflect/jvm/internal/impl/types/model/TypeSystemO") -> true
  path.startsWith("kotlin/script/experimental/jsr223/KotlinJsr223DefaultScript.") -> true
  path.startsWith("kotlin/script/experimental/jsr223/KotlinJsr223DefaultScriptEngineFactory.") -> true
  path.startsWith("kotlin/script/experimental/jvmhost/BasicJvmScriptC") -> true
  path.startsWith("kotlin/script/experimental/jvmhost/BasicJvmScriptE") -> true
  path.startsWith("kotlin/script/experimental/jvmhost/BasicJvmScriptJ") -> true
  path.startsWith("kotlin/script/experimental/jvmhost/C") -> true
  path.startsWith("kotlin/script/experimental/jvmhost/K") -> true
  path.startsWith("kotlin/script/experimental/jvmhost/O") -> true
  path.startsWith("org/fusesource/hawtjni/runtime/A") -> true
  path.startsWith("org/fusesource/hawtjni/runtime/F") -> true
  path.startsWith("org/fusesource/hawtjni/runtime/JN") -> true
  path.startsWith("org/fusesource/hawtjni/runtime/JniA") -> true
  path.startsWith("org/fusesource/hawtjni/runtime/M") -> true
  path.startsWith("org/fusesource/hawtjni/runtime/T") -> true
  path.startsWith("org/fusesource/jansi/Ansi\$A") -> true
  path.startsWith("org/fusesource/jansi/Ansi\$C") -> true
  path.startsWith("org/fusesource/jansi/Ansi.") -> true
  path.startsWith("org/fusesource/jansi/AnsiRenderW") -> true
  path.startsWith("org/fusesource/jansi/AnsiS") -> true
  path.startsWith("org/fusesource/jansi/H") -> true
  path.startsWith("org/jdom/T") -> true
  path.startsWith("org/jdom/V") -> true
  path.startsWith("org/jdom/output/E") -> true
  path.startsWith("org/jdom/output/Format\$1") -> true
  path.startsWith("org/jdom/output/Format\$D") -> true
  path.startsWith("org/jdom/output/Format\$T") -> true
  path.startsWith("org/jdom/output/Format.") -> true
  path.startsWith("org/jdom/output/N") -> true
  path.startsWith("org/jdom/output/XMLOutputter\$") -> true
  path.startsWith("org/jdom/output/XMLOutputter.") -> true
  path.startsWith("org/jetbrains/c") -> true
  path.startsWith("org/jetbrains/j") -> true
  path.startsWith("org/jetbrains/kotlin/cli/common/CreateF") -> true
  path.startsWith("org/jetbrains/kotlin/daemon/Ke") -> true
  path.startsWith("org/jetbrains/kotlin/daemon/RemoteInp") -> true
  path.startsWith("org/jetbrains/kotlin/daemon/RemoteO") -> true
  path.startsWith("org/jetbrains/kotlin/daemon/report/DaemonMessageReporterP") -> true
  path.startsWith("org/jetbrains/kotlin/fir/backend/IrBuiltInsOverFir\$createClass\$6") -> true
  path.startsWith("org/jetbrains/kotlin/fir/backend/IrBuiltInsOverFir\$createClass\$7") -> true
  path.startsWith("org/jetbrains/kotlin/fir/backend/IrBuiltInsOverFir\$createCompanionObject\$1") -> true
  path.startsWith("org/jetbrains/kotlin/fir/declarations/builder/FirErrorConstructorBuilderK") -> true
  path.startsWith("org/jetbrains/kotlin/fir/resolve/dfa/FirDataFlowAnalyzer\$F") -> true
  path.startsWith("org/jetbrains/kotlin/incremental/classpathDiff/Inn") -> true
  path.startsWith("org/jetbrains/kotlin/incremental/classpathDiff/KotlinClassH") -> true
  path.startsWith("org/jetbrains/kotlin/javax/inject/N") -> true
  path.startsWith("org/jetbrains/kotlin/javax/inject/P") -> true
  path.startsWith("org/jetbrains/kotlin/javax/inject/Q") -> true
  path.startsWith("org/jetbrains/kotlin/net/jpountz/lz4/LZ4CompressorW") -> true
  path.startsWith("org/jetbrains/kotlin/net/jpountz/lz4/LZ4Con") -> true
  path.startsWith("org/jetbrains/kotlin/net/jpountz/lz4/LZ4DecompressorW") -> true
  path.startsWith("org/jetbrains/kotlin/net/jpountz/lz4/LZ4E") -> true
  path.startsWith("org/jetbrains/kotlin/net/jpountz/lz4/LZ4Uns") -> true
  path.startsWith("org/jetbrains/kotlin/net/jpountz/util/B") -> true
  path.startsWith("org/jetbrains/kotlin/net/jpountz/util/S") -> true
  path.startsWith("org/jetbrains/kotlin/net/jpountz/util/Un") -> true
  path.startsWith("org/jetbrains/kotlin/one/util/streamex/DoubleC") -> true
  path.startsWith("org/jetbrains/kotlin/one/util/streamex/IntC") -> true
  path.startsWith("org/jetbrains/kotlin/one/util/streamex/LongC") -> true
  path.startsWith("org/jetbrains/kotlin/one/util/streamex/M") -> true
  path.startsWith("org/objectweb/asm/AnnotationV") -> true
  path.startsWith("org/objectweb/asm/Attribute.") -> true
  path.startsWith("org/objectweb/asm/ClassR") -> true
  path.startsWith("org/objectweb/asm/ClassV") -> true
  path.startsWith("org/objectweb/asm/FieldV") -> true
  path.startsWith("org/objectweb/asm/L") -> true
  path.startsWith("org/objectweb/asm/MethodV") -> true
  path.startsWith("org/objectweb/asm/Type.") -> true
  path.startsWith("org/objectweb/asm/tree/analysis/Analyzer.") -> true
  path.startsWith("org/objectweb/asm/tree/analysis/Si") -> true
  path.startsWith("org/objectweb/asm/tree/analysis/Su") -> true
  path.startsWith("org/picocontainer/C") -> true
  path.startsWith("org/picocontainer/M") -> true
  path.startsWith("org/picocontainer/PicoC") -> true

  else -> false
}

// Overrides:
fun isOverride(path: String) = when {
  path.startsWith("org/jetbrains/kotlin/ko") -> false
  path.startsWith("org/jetbrains/kotlin/backend/common/serialization/p") -> false
  path.startsWith("org/jetbrains/kotlin/serialization/js/ast/JsAstP") -> false
  path.startsWith("org/jetbrains/kotlin/prot") -> false
  path.startsWith("org/jetbrains/kotlin/m") -> false
  path.startsWith("org/jetbrains/kotlin/bu") -> false
  path.startsWith("org/jetbrains/kotlin/wasm/i") -> false
  path.startsWith("org/jetbrains/kotlin/ir/expressions/I") -> false
  path.startsWith("org/jetbrains/kotlin/serialization/d") -> false
  path.startsWith("org/jetbrains/kotlin/daemon/c") -> false
  path.startsWith("org/jetbrains/kotlin/library/i") -> false
  path.startsWith("org/jetbrains/kotlin/ir/declarations/I") -> false
  path.startsWith("j") -> false
  path.startsWith("kotlin/script/experimental/jvm/") -> false
  path.startsWith("org/jetbrains/kotlin/load/java/l") -> false
  path.startsWith("org/jl") -> false
  path.startsWith("org/jetbrains/kotlin/js/backend/ast/J") -> false
  path.startsWith("org/o") -> false
  path.startsWith("kotlin/script/experimental/a") -> false
  path.startsWith("org/jetbrains/kotlin/cli/common/r") -> false
  path.startsWith("org/jetbrains/kotlin/conf") -> false
  path.startsWith("org/jetbrains/kotlin/incremental/s") -> false
  path.startsWith("kotlin/r") -> false
  path.startsWith("org/jetbrains/kotlin/descriptors/i") -> false
  path.startsWith("org/jetbrains/kotlin/library/m") -> false
  path.startsWith("org/jetbrains/kotlin/types/T") -> false
  path.startsWith("org/jetbrains/kotlin/KtFakeSourceElementK") -> false
  path.startsWith("org/jetbrains/kotlin/load/java/t") -> false
  path.startsWith("org/jetbrains/kotlin/descriptors/r") -> false
  path.startsWith("org/jetbrains/kotlin/contracts/m") -> false
  path.startsWith("org/jetbrains/kotlin/backend/jvm/JvmLowere") -> false
  path.startsWith("org/jetbrains/kotlin/types/c") -> false
  path.startsWith("org/jetbrains/kotlin/contracts/d") -> false
  path.startsWith("org/jetbrains/kotlin/cli/common/a") -> false
  path.startsWith("org/jetbrains/kotlin/conta") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/multiplatform/E") -> false
  path.startsWith("org/jetbrains/kotlin/ir/backend/js/export/Exporte") -> false
  path.startsWith("org/jetbrains/kotlin/ren") -> false
  path.startsWith("org/jetbrains/kotlin/library/abi/impl/A") -> false
  path.startsWith("org/jetbrains/kotlin/types/A") -> false
  path.startsWith("org/jetbrains/kotlin/library/abi/A") -> false
  path.startsWith("org/jetbrains/kotlin/n") -> false
  path.startsWith("org/jetbrains/kotlin/ir/symbols/I") -> false
  path.startsWith("org/jetbrains/kotlin/types/m") -> false
  path.startsWith("kotlin/script/experimental/h") -> false
  path.startsWith("com/g") -> false
  path.startsWith("org/jetbrains/kotlin/library/K") -> false
  path.startsWith("org/jetbrains/kotlin/fir/declarations/FirDeclarationOr") -> false
  path.startsWith("org/jetbrains/kotlin/pla") -> false
  path.startsWith("org/jetbrains/kotlin/cons") -> false
  path.startsWith("org/jetbrains/kotlin/fir/extensions/p") -> false
  path.startsWith("g") -> false
  path.startsWith("org/jetbrains/kotlin/js/par") -> false
  path.startsWith("org/jetbrains/kotlin/load/java/structure/J") -> false
  path.startsWith("com/intellij/util/io") -> false
  path.startsWith("org/jetbrains/kotlin/incremental/Dif") -> false
  path.startsWith("org/jetbrains/kotlin/backend/common/serialization/e") -> false
  path.startsWith("org/jetbrains/kotlin/utils/S") -> false
  path.startsWith("org/f") -> false
  path.startsWith("org/jetbrains/kotlin/descriptors/V") -> false
  path.startsWith("org/jetbrains/kotlin/types/Co") -> false
  path.startsWith("org/jetbrains/kotlin/storage/LockBasedS") -> false
  path.startsWith("kotlin/script/experimental/u") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/scopes/L") -> false
  path.startsWith("org/jetbrains/kotlin/util/C") -> false
  path.startsWith("org/jetbrains/kotlin/descriptors/E") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/sa") -> false
  path.startsWith("org/jetbrains/kotlin/descriptors/C") -> false
  path.startsWith("org/jetbrains/kotlin/load/kotlin/J") -> false
  path.startsWith("org/jetbrains/kotlin/types/S") -> false
  path.startsWith("org/jetbrains/kotlin/fir/resolve/calls/tower/TowerG") -> false
  path.startsWith("org/jetbrains/kotlin/incremental/Cl") -> false
  path.startsWith("org/jetbrains/kotlin/incremental/co") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/Overridi") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/des") -> false
  path.startsWith("org/jetbrains/kotlin/descriptors/P") -> false
  path.startsWith("org/jetbrains/kotlin/load/kotlin/A") -> false
  path.startsWith("org/jetbrains/kotlin/o") -> false
  path.startsWith("org/jetbrains/kotlin/types/er") -> false
  path.startsWith("org/jetbrains/kotlin/daemon/R") -> false
  path.startsWith("org/jetbrains/kotlin/descriptors/DescriptorV") -> false
  path.startsWith("org/jetbrains/kotlin/ir/util/Id") -> false
  path.startsWith("org/jetbrains/kotlin/load/kotlin/h") -> false
  path.startsWith("org/jetbrains/kotlin/types/K") -> false
  path.startsWith("org/jetbrains/kotlin/types/t") -> false
  path.startsWith("kotlin/script/experimental/d") -> false
  path.startsWith("org/jetbrains/kotlin/descriptors/S") -> false
  path.startsWith("org/jd") -> false
  path.startsWith("org/jetbrains/kotlin/incremental/classpathDiff/ClasspathS") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/AnnotationT") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/scopes/S") -> false
  path.startsWith("org/jetbrains/kotlin/utils/D") -> false
  path.startsWith("org/jetbrains/kotlin/cli/common/Co") -> false
  path.startsWith("org/jetbrains/kotlin/diagnostics/W") -> false
  path.startsWith("org/jetbrains/kotlin/incremental/classpathDiff/I") -> false
  path.startsWith("org/jetbrains/kotlin/incremental/classpathDiff/P") -> false
  path.startsWith("org/jetbrains/kotlin/ir/backend/js/JsSt") -> false
  path.startsWith("org/jetbrains/kotlin/ir/v") -> false
  path.startsWith("org/jetbrains/kotlin/load/java/d") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/inference/ConstraintSystemB") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/mp") -> false
  path.startsWith("org/jetbrains/kotlin/utils/R") -> false
  path.startsWith("com/intellij/util/l") -> false
  path.startsWith("kotlin/script/d") -> false
  path.startsWith("org/jetbrains/kotlin/backend/jvm/serialization/p") -> false
  path.startsWith("org/jetbrains/kotlin/diagnostics/rendering/C") -> false
  path.startsWith("org/jetbrains/kotlin/fir/renderer/C") -> false
  path.startsWith("org/jetbrains/kotlin/fir/util/") -> false
  path.startsWith("org/jetbrains/kotlin/incremental/KotlinC") -> false
  path.startsWith("org/jetbrains/kotlin/incremental/P") -> false
  path.startsWith("org/jetbrains/kotlin/ir/I") -> false
  path.startsWith("org/jetbrains/kotlin/ir/backend/js/JsLowere") -> false
  path.startsWith("org/jetbrains/kotlin/library/S") -> false
  path.startsWith("org/jetbrains/kotlin/load/java/S") -> false
  path.startsWith("org/jetbrains/kotlin/load/kotlin/F") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/inference/model/Co") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/constants/I") -> false
  path.startsWith("org/jetbrains/kotlin/utils/exceptions/ExceptionAttachm") -> false
  path.startsWith("org/jetbrains/kotlin/daemon/L") -> false
  path.startsWith("org/jetbrains/kotlin/diagnostics/KtDiagnosticRenderers") -> false
  path.startsWith("org/jetbrains/kotlin/diagnostics/rendering/A") -> false
  path.startsWith("org/jetbrains/kotlin/fir/types/Com") -> false
  path.startsWith("org/jetbrains/kotlin/incremental/L") -> false
  path.startsWith("org/jetbrains/kotlin/incremental/classpathDiff/S") -> false
  path.startsWith("org/jetbrains/kotlin/incremental/m") -> false
  path.startsWith("org/jetbrains/kotlin/ir/backend/js/lower/ES6_") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/lazy/descriptors/ClassResolutionScopesSupport\$") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/multiplatform/C") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/scopes/D") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/scopes/u") -> false
  path.startsWith("org/p") -> false
  path.startsWith("kotlin/script/experimental/jvmhost/jsr223/J") -> false
  path.startsWith("org/jetbrains/kotlin/cli/common/Cr") -> false
  path.startsWith("org/jetbrains/kotlin/descriptors/M") -> false
  path.startsWith("org/jetbrains/kotlin/incremental/classpathDiff/J") -> false
  path.startsWith("org/jetbrains/kotlin/ir/backend/js/transformers/irToJs/R") -> false
  path.startsWith("org/jetbrains/kotlin/js/inline/clean/D") -> false
  path.startsWith("org/jetbrains/kotlin/load/kotlin/B") -> false
  path.startsWith("org/jetbrains/kotlin/load/kotlin/D") -> false
  path.startsWith("org/jetbrains/kotlin/load/kotlin/KotlinJ") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/tower/W") -> false
  path.startsWith("org/jetbrains/kotlin/types/F") -> false
  path.startsWith("kotlin/script/t") -> false
  path.startsWith("org/jetbrains/kotlin/backend/wasm/ir2wasm/Co") -> false
  path.startsWith("org/jetbrains/kotlin/cfg/variable/V") -> false
  path.startsWith("org/jetbrains/kotlin/cli/common/mo") -> false
  path.startsWith("org/jetbrains/kotlin/diagnostics/AbstractKo") -> false
  path.startsWith("org/jetbrains/kotlin/ir/builders/declarations/I") -> false
  path.startsWith("org/jetbrains/kotlin/ir/linkage/partial/E") -> false
  path.startsWith("org/jetbrains/kotlin/load/java/B") -> false
  path.startsWith("org/jetbrains/kotlin/load/kotlin/T") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/inference/con") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/results/Overloadi") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/smartcasts/DataFlowI") -> false
  path.startsWith("org/jetbrains/kotlin/types/I") -> false
  path.startsWith("org/jetbrains/kotlin/utils/KotlinP") -> false
  path.startsWith("kotlin/script/experimental/jvmhost/repl/JvmReplE") -> false
  path.startsWith("org/jetbrains/kotlin/backend/common/linkage/issues/D") -> false
  path.startsWith("org/jetbrains/kotlin/backend/jvm/lower/indy/M") -> false
  path.startsWith("org/jetbrains/kotlin/cli/common/messages/C") -> false
  path.startsWith("org/jetbrains/kotlin/compilerR") -> false
  path.startsWith("org/jetbrains/kotlin/contracts/i") -> false
  path.startsWith("org/jetbrains/kotlin/daemon/report/D") -> false
  path.startsWith("org/jetbrains/kotlin/descriptors/d") -> false
  path.startsWith("org/jetbrains/kotlin/fir/types/ConeS") -> false
  path.startsWith("org/jetbrains/kotlin/incremental/BuildD") -> false
  path.startsWith("org/jetbrains/kotlin/incremental/R") -> false
  path.startsWith("org/jetbrains/kotlin/incremental/u") -> false
  path.startsWith("org/jetbrains/kotlin/ir/declarations/D") -> false
  path.startsWith("org/jetbrains/kotlin/ir/declarations/M") -> false
  path.startsWith("org/jetbrains/kotlin/ir/expressions/impl/IrS") -> false
  path.startsWith("org/jetbrains/kotlin/js/dce/I") -> false
  path.startsWith("org/jetbrains/kotlin/js/inline/clean/Res") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/inference/TypeB") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/inference/components/TypeVariableDe") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/inference/model/T") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/tower/M") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/tower/TowerD") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/jvm/j") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/scopes/M") -> false
  path.startsWith("org/jetbrains/kotlin/util/O") -> false
  path.startsWith("org/jetbrains/kotlin/util/Ret") -> false
  path.startsWith("org/jetbrains/kotlin/utils/A") -> false
  path.startsWith("org/jetbrains/kotlin/utils/F") -> false
  path.startsWith("kotlin/script/experimental/jsr223/KotlinJsr223DefaultScriptC") -> false
  path.startsWith("org/jetbrains/kotlin/analyzer/P") -> false
  path.startsWith("org/jetbrains/kotlin/backend/common/serialization/S") -> false
  path.startsWith("org/jetbrains/kotlin/backend/common/serialization/mangle/d") -> false
  path.startsWith("org/jetbrains/kotlin/cli/common/messages/G") -> false
  path.startsWith("org/jetbrains/kotlin/contracts/C") -> false
  path.startsWith("org/jetbrains/kotlin/descriptors/Dec") -> false
  path.startsWith("org/jetbrains/kotlin/descriptors/F") -> false
  path.startsWith("org/jetbrains/kotlin/descriptors/N") -> false
  path.startsWith("org/jetbrains/kotlin/descriptors/T") -> false
  path.startsWith("org/jetbrains/kotlin/descriptors/annotations/Annotations") -> false
  path.startsWith("org/jetbrains/kotlin/diagnostics/rendering/L") -> false
  path.startsWith("org/jetbrains/kotlin/fir/types/ConeK") -> false
  path.startsWith("org/jetbrains/kotlin/ir/descriptors/IrBu") -> false
  path.startsWith("org/jetbrains/kotlin/ir/expressions/impl/IrG") -> false
  path.startsWith("org/jetbrains/kotlin/ir/interpreter/exceptions/I") -> false
  path.startsWith("org/jetbrains/kotlin/ir/types/impl/IrT") -> false
  path.startsWith("org/jetbrains/kotlin/ir/util/IrM") -> false
  path.startsWith("org/jetbrains/kotlin/ir/util/KotlinM") -> false
  path.startsWith("org/jetbrains/kotlin/js/backend/J") -> false
  path.startsWith("org/jetbrains/kotlin/psi/stubs/impl/KotlinStubO") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/Im") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/Si") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/inference/Cap") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/inference/ConstraintSystemI") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/model/LH") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/tower/Can") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/tower/Er") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/tower/Im") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/constants/U") -> false
  path.startsWith("org/jetbrains/kotlin/util/Ar") -> false
  path.startsWith("com/intellij/openapi/util/i") -> false
  path.startsWith("com/intellij/util/Fu") -> false
  path.startsWith("com/intellij/util/con") -> false
  path.startsWith("kotlin/script/experimental/jvmhost/BasicJvmScriptingHostK") -> false
  path.startsWith("org/jetbrains/kotlin/backend/common/linkage/partial/Ca") -> false
  path.startsWith("org/jetbrains/kotlin/backend/common/ou") -> false
  path.startsWith("org/jetbrains/kotlin/backend/common/serialization/mangle/B") -> false
  path.startsWith("org/jetbrains/kotlin/backend/jvm/serialization/JvmId") -> false
  path.startsWith("org/jetbrains/kotlin/cli/common/messages/MessageR") -> false
  path.startsWith("org/jetbrains/kotlin/cli/common/p") -> false
  path.startsWith("org/jetbrains/kotlin/codegen/Fr") -> false
  path.startsWith("org/jetbrains/kotlin/codegen/inline/G") -> false
  path.startsWith("org/jetbrains/kotlin/codegen/inline/Ma") -> false
  path.startsWith("org/jetbrains/kotlin/codegen/state/T") -> false
  path.startsWith("org/jetbrains/kotlin/fir/declarations/Deprecations") -> false
  path.startsWith("org/jetbrains/kotlin/fir/resolve/dfa/cfg/Ed") -> false
  path.startsWith("org/jetbrains/kotlin/fir/scopes/impl/D") -> false
  path.startsWith("org/jetbrains/kotlin/fir/types/ConeTypeU") -> false
  path.startsWith("org/jetbrains/kotlin/incremental/ChangeI") -> false
  path.startsWith("org/jetbrains/kotlin/incremental/classpathDiff/A") -> false
  path.startsWith("org/jetbrains/kotlin/inl") -> false
  path.startsWith("org/jetbrains/kotlin/ir/backend/js/export/Exporta") -> false
  path.startsWith("org/jetbrains/kotlin/ir/linkage/partial/I") -> false
  path.startsWith("org/jetbrains/kotlin/ir/linkage/partial/PartialLinkageL") -> false
  path.startsWith("org/jetbrains/kotlin/ir/util/N") -> false
  path.startsWith("org/jetbrains/kotlin/ir/util/SymbolR") -> false
  path.startsWith("org/jetbrains/kotlin/js/inline/clean/C") -> false
  path.startsWith("org/jetbrains/kotlin/js/resolve/diagnostics/JsCallD") -> false
  path.startsWith("org/jetbrains/kotlin/library/T") -> false
  path.startsWith("org/jetbrains/kotlin/library/abi/impl/F") -> false
  path.startsWith("org/jetbrains/kotlin/load/java/AbstractA") -> false
  path.startsWith("org/jetbrains/kotlin/load/java/JavaD") -> false
  path.startsWith("org/jetbrains/kotlin/load/java/JavaT") -> false
  path.startsWith("org/jetbrains/kotlin/load/java/N") -> false
  path.startsWith("org/jetbrains/kotlin/load/java/components/JavaA") -> false
  path.startsWith("org/jetbrains/kotlin/load/kotlin/KotlinC") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/LazyE") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/components/CallableRec") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/inference/components/Tr") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/model/T") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/model/U") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/tower/Con") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/tower/H") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/constants/K") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/jvm/k") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/jvm/multiplatform/O") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/multiplatform/M") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/scopes/Ty") -> false
  path.startsWith("org/jetbrains/kotlin/scripting/resolve/A") -> false
  path.startsWith("org/jetbrains/kotlin/storage/S") -> false
  path.startsWith("org/jetbrains/kotlin/util/V") -> false
  path.startsWith("org/jetbrains/kotlin/utils/exceptions/K") -> false
  path.startsWith("com/intellij/util/X") -> false
  path.startsWith("kotlin/script/experimental/jvmhost/jsr223/KotlinJsr223I") -> false
  path.startsWith("org/jetbrains/kotlin/KtSourceF") -> false
  path.startsWith("org/jetbrains/kotlin/analyzer/ModuleI") -> false
  path.startsWith("org/jetbrains/kotlin/backend/common/linkage/issues/P") -> false
  path.startsWith("org/jetbrains/kotlin/backend/common/lower/Lowere") -> false
  path.startsWith("org/jetbrains/kotlin/backend/common/lower/V") -> false
  path.startsWith("org/jetbrains/kotlin/backend/common/lower/loops/ProgressionD") -> false
  path.startsWith("org/jetbrains/kotlin/backend/common/phaser/PhaseC") -> false
  path.startsWith("org/jetbrains/kotlin/backend/common/serialization/Des") -> false
  path.startsWith("org/jetbrains/kotlin/backend/jvm/Fak") -> false
  path.startsWith("org/jetbrains/kotlin/cli/common/P") -> false
  path.startsWith("org/jetbrains/kotlin/cli/jvm/compiler/jarfs/Z") -> false
  path.startsWith("org/jetbrains/kotlin/codegen/JvmBa") -> false
  path.startsWith("org/jetbrains/kotlin/codegen/V") -> false
  path.startsWith("org/jetbrains/kotlin/compiler/plugin/Cl") -> false
  path.startsWith("org/jetbrains/kotlin/descriptors/I") -> false
  path.startsWith("org/jetbrains/kotlin/descriptors/annotations/AnnotationD") -> false
  path.startsWith("org/jetbrains/kotlin/descriptors/annotations/K") -> false
  path.startsWith("org/jetbrains/kotlin/descriptors/j") -> false
  path.startsWith("org/jetbrains/kotlin/descriptors/s") -> false
  path.startsWith("org/jetbrains/kotlin/diagnostics/rendering/DiagnosticP") -> false
  path.startsWith("org/jetbrains/kotlin/diagnostics/rendering/RenderingContext\$") -> false
  path.startsWith("org/jetbrains/kotlin/diagnostics/rendering/Sm") -> false
  path.startsWith("org/jetbrains/kotlin/fir/Is") -> false
  path.startsWith("org/jetbrains/kotlin/fir/caches/FirT") -> false
  path.startsWith("org/jetbrains/kotlin/fir/declarations/CheckR") -> false
  path.startsWith("org/jetbrains/kotlin/fir/declarations/FirIn") -> false
  path.startsWith("org/jetbrains/kotlin/fir/declarations/FirResolveP") -> false
  path.startsWith("org/jetbrains/kotlin/fir/declarations/R") -> false
  path.startsWith("org/jetbrains/kotlin/fir/deserialization/L") -> false
  path.startsWith("org/jetbrains/kotlin/fir/expressions/ExhaustivenessStatus\$") -> false
  path.startsWith("org/jetbrains/kotlin/fir/resolve/dfa/St") -> false
  path.startsWith("org/jetbrains/kotlin/fir/types/ConeA") -> false
  path.startsWith("org/jetbrains/kotlin/fir/types/ConeC") -> false
  path.startsWith("org/jetbrains/kotlin/fir/types/ConeD") -> false
  path.startsWith("org/jetbrains/kotlin/incremental/ChangedF") -> false
  path.startsWith("org/jetbrains/kotlin/incremental/Compila") -> false
  path.startsWith("org/jetbrains/kotlin/incremental/IncrementalM") -> false
  path.startsWith("org/jetbrains/kotlin/incremental/T") -> false
  path.startsWith("org/jetbrains/kotlin/ir/builders/IrGeneratorC") -> false
  path.startsWith("org/jetbrains/kotlin/ir/declarations/impl/IrS") -> false
  path.startsWith("org/jetbrains/kotlin/ir/util/Cu") -> false
  path.startsWith("org/jetbrains/kotlin/js/facade/M") -> false
  path.startsWith("org/jetbrains/kotlin/js/inline/clean/L") -> false
  path.startsWith("org/jetbrains/kotlin/js/naming/E") -> false
  path.startsWith("org/jetbrains/kotlin/js/sourceMap/SourceMap3") -> false
  path.startsWith("org/jetbrains/kotlin/js/u") -> false
  path.startsWith("org/jetbrains/kotlin/library/I") -> false
  path.startsWith("org/jetbrains/kotlin/library/M") -> false
  path.startsWith("org/jetbrains/kotlin/load/java/components/JavaR") -> false
  path.startsWith("org/jetbrains/kotlin/load/java/structure/impl/classFiles/PlainJavaA") -> false
  path.startsWith("org/jetbrains/kotlin/load/kotlin/incremental/IncrementalPackageP") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/DescriptorE") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/Functions") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/Ds") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/components/ArgumentsU") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/inference/model/Inf") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/inference/model/M") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/model/Na") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/model/ResolvedCallAr") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/tower/A") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/tower/U") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/checkers/Em") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/checkers/OptInD") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/constants/Con") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/constants/E") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/jvm/RuntimeAssertionI") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/scopes/I") -> false
  path.startsWith("org/jetbrains/kotlin/types/Dy") -> false
  path.startsWith("org/jetbrains/kotlin/util/slicedMap/M") -> false
  path.startsWith("org/jetbrains/kotlin/util/slicedMap/O") -> false
  path.startsWith("org/jetbrains/kotlin/util/slicedMap/T") -> false
  path.startsWith("org/jetbrains/kotlin/utils/C") -> false
  path.startsWith("org/jetbrains/kotlin/utils/I") -> false
  path.startsWith("org/jetbrains/kotlin/utils/Par") -> false
  path.startsWith("org/jetbrains/kotlin/utils/Pr") -> false
  path.startsWith("org/jetbrains/kotlin/utils/T") -> false
  path.startsWith("org/jetbrains/kotlin/utils/W") -> false
  path.startsWith("org/jetbrains/kotlin/utils/k") -> false
  path.startsWith("com/intellij/lang/jvm/a") -> false
  path.startsWith("com/intellij/openapi/progress/J") -> false
  path.startsWith("com/intellij/pl") -> false
  path.startsWith("com/intellij/ui/D") -> false
  path.startsWith("kotlin/script/experimental/i") -> false
  path.startsWith("kotlin/script/experimental/jsr223/KotlinJsr223DefaultScriptEv") -> false
  path.startsWith("kotlin/script/experimental/jvmhost/jsr223/KotlinJsr223H") -> false
  path.startsWith("kotlin/script/experimental/jvmhost/jsr223/P") -> false
  path.startsWith("kotlin/script/experimental/jvmhost/repl/R") -> false
  path.startsWith("org/jetbrains/kotlin/S") -> false
  path.startsWith("org/jetbrains/kotlin/analysis/decompiler/psi/KotlinMetadataDes") -> false
  path.startsWith("org/jetbrains/kotlin/analysis/providers/impl/u") -> false
  path.startsWith("org/jetbrains/kotlin/analysis/providers/topics/KotlinG") -> false
  path.startsWith("org/jetbrains/kotlin/backend/common/M") -> false
  path.startsWith("org/jetbrains/kotlin/backend/common/Sa") -> false
  path.startsWith("org/jetbrains/kotlin/backend/common/bridges/B") -> false
  path.startsWith("org/jetbrains/kotlin/backend/common/linkage/issues/I") -> false
  path.startsWith("org/jetbrains/kotlin/backend/common/linkage/partial/E") -> false
  path.startsWith("org/jetbrains/kotlin/backend/common/lower/LocalDeclarationsLoweringK") -> false
  path.startsWith("org/jetbrains/kotlin/backend/common/lower/Sy") -> false
  path.startsWith("org/jetbrains/kotlin/backend/common/lower/inline/IN") -> false
  path.startsWith("org/jetbrains/kotlin/backend/common/phaser/Compi") -> false
  path.startsWith("org/jetbrains/kotlin/backend/common/phaser/PhaseS") -> false
  path.startsWith("org/jetbrains/kotlin/backend/common/serialization/IdSignatureC") -> false
  path.startsWith("org/jetbrains/kotlin/backend/common/serialization/IrI") -> false
  path.startsWith("org/jetbrains/kotlin/backend/jvm/lower/Bl") -> false
  path.startsWith("org/jetbrains/kotlin/cli/common/c") -> false
  path.startsWith("org/jetbrains/kotlin/cli/common/messages/I") -> false
  path.startsWith("org/jetbrains/kotlin/cli/common/messages/MessageCollector\$") -> false
  path.startsWith("org/jetbrains/kotlin/cli/common/messages/P") -> false
  path.startsWith("org/jetbrains/kotlin/cli/common/messages/X") -> false
  path.startsWith("org/jetbrains/kotlin/cli/common/o") -> false
  path.startsWith("org/jetbrains/kotlin/cli/jvm/compiler/KotlinCliJavaFileManagerImplK") -> false
  path.startsWith("org/jetbrains/kotlin/cli/jvm/compiler/jarfs/FastJarFileSystemK") -> false
  path.startsWith("org/jetbrains/kotlin/codegen/AccessorForC") -> false
  path.startsWith("org/jetbrains/kotlin/codegen/By") -> false
  path.startsWith("org/jetbrains/kotlin/codegen/Ty") -> false
  path.startsWith("org/jetbrains/kotlin/codegen/optimization/common/C") -> false
  path.startsWith("org/jetbrains/kotlin/codegen/optimization/common/T") -> false
  path.startsWith("org/jetbrains/kotlin/codegen/optimization/temporaryVals/S") -> false
  path.startsWith("org/jetbrains/kotlin/codegen/signature/B") -> false
  path.startsWith("org/jetbrains/kotlin/descriptors/DescriptorW") -> false
  path.startsWith("org/jetbrains/kotlin/descriptors/R") -> false
  path.startsWith("org/jetbrains/kotlin/descriptors/annotations/AnnotationU") -> false
  path.startsWith("org/jetbrains/kotlin/descriptors/annotations/C") -> false
  path.startsWith("org/jetbrains/kotlin/diagnostics/rendering/ExpectActualA") -> false
  path.startsWith("org/jetbrains/kotlin/fir/FirModuleC") -> false
  path.startsWith("org/jetbrains/kotlin/fir/M") -> false
  path.startsWith("org/jetbrains/kotlin/fir/caches/N") -> false
  path.startsWith("org/jetbrains/kotlin/fir/declarations/DeprecationA") -> false
  path.startsWith("org/jetbrains/kotlin/fir/declarations/utils/I") -> false
  path.startsWith("org/jetbrains/kotlin/fir/diagnostics/ConeS") -> false
  path.startsWith("org/jetbrains/kotlin/fir/expressions/FirO") -> false
  path.startsWith("org/jetbrains/kotlin/fir/resolve/Do") -> false
  path.startsWith("org/jetbrains/kotlin/fir/resolve/calls/CallableReferenceC") -> false
  path.startsWith("org/jetbrains/kotlin/fir/resolve/dfa/O") -> false
  path.startsWith("org/jetbrains/kotlin/fir/resolve/diagnostics/ConeContractDescriptionError\$NotA") -> false
  path.startsWith("org/jetbrains/kotlin/fir/resolve/providers/FirSymbolN") -> false
  path.startsWith("org/jetbrains/kotlin/fir/session/environment/AbstractProjectF") -> false
  path.startsWith("org/jetbrains/kotlin/fir/symbols/S") -> false
  path.startsWith("org/jetbrains/kotlin/fir/types/ConeTypePro") -> false
  path.startsWith("org/jetbrains/kotlin/fir/types/ConeTypeV") -> false
  path.startsWith("org/jetbrains/kotlin/fir/visitors/T") -> false
  path.startsWith("org/jetbrains/kotlin/idea/E") -> false
  path.startsWith("org/jetbrains/kotlin/incremental/AbiSnapshotI") -> false
  path.startsWith("org/jetbrains/kotlin/incremental/BuildI") -> false
  path.startsWith("org/jetbrains/kotlin/incremental/ChangesC") -> false
  path.startsWith("org/jetbrains/kotlin/incremental/ChangesE") -> false
  path.startsWith("org/jetbrains/kotlin/incremental/Inl") -> false
  path.startsWith("org/jetbrains/kotlin/incremental/Inp") -> false
  path.startsWith("org/jetbrains/kotlin/incremental/S") -> false
  path.startsWith("org/jetbrains/kotlin/incremental/classpathDiff/Ca") -> false
  path.startsWith("org/jetbrains/kotlin/incremental/classpathDiff/ClassS") -> false
  path.startsWith("org/jetbrains/kotlin/incremental/classpathDiff/Co") -> false
  path.startsWith("org/jetbrains/kotlin/incremental/classpathDiff/K") -> false
  path.startsWith("org/jetbrains/kotlin/incremental/js/IncrementalR") -> false
  path.startsWith("org/jetbrains/kotlin/ir/backend/js/F") -> false
  path.startsWith("org/jetbrains/kotlin/ir/backend/js/lower/serialization/ir/AbstractJsD") -> false
  path.startsWith("org/jetbrains/kotlin/ir/backend/js/transformers/irToJs/CrossModuleRefe") -> false
  path.startsWith("org/jetbrains/kotlin/ir/backend/js/transformers/irToJs/ModuleW") -> false
  path.startsWith("org/jetbrains/kotlin/ir/backend/js/transformers/irToJs/T") -> false
  path.startsWith("org/jetbrains/kotlin/ir/declarations/lazy/L") -> false
  path.startsWith("org/jetbrains/kotlin/ir/descriptors/IrL") -> false
  path.startsWith("org/jetbrains/kotlin/ir/descriptors/L") -> false
  path.startsWith("org/jetbrains/kotlin/ir/expressions/impl/IrF") -> false
  path.startsWith("org/jetbrains/kotlin/ir/expressions/impl/IrI") -> false
  path.startsWith("org/jetbrains/kotlin/ir/expressions/impl/IrR") -> false
  path.startsWith("org/jetbrains/kotlin/ir/expressions/impl/IrT") -> false
  path.startsWith("org/jetbrains/kotlin/ir/linkage/partial/PartialLinkageCase\$I") -> false
  path.startsWith("org/jetbrains/kotlin/ir/linkage/partial/PartialLinkageCase\$U") -> false
  path.startsWith("org/jetbrains/kotlin/ir/linkage/partial/PartialLinkageCo") -> false
  path.startsWith("org/jetbrains/kotlin/ir/util/Descriptors") -> false
  path.startsWith("org/jetbrains/kotlin/ir/util/Ref") -> false
  path.startsWith("org/jetbrains/kotlin/js/backend/ast/A") -> false
  path.startsWith("org/jetbrains/kotlin/js/backend/ast/H") -> false
  path.startsWith("org/jetbrains/kotlin/js/com") -> false
  path.startsWith("org/jetbrains/kotlin/js/config/E") -> false
  path.startsWith("org/jetbrains/kotlin/js/patterns/t") -> false
  path.startsWith("org/jetbrains/kotlin/load/java/An") -> false
  path.startsWith("org/jetbrains/kotlin/load/java/E") -> false
  path.startsWith("org/jetbrains/kotlin/load/java/JavaN") -> false
  path.startsWith("org/jetbrains/kotlin/load/java/Jv") -> false
  path.startsWith("org/jetbrains/kotlin/load/java/components/D") -> false
  path.startsWith("org/jetbrains/kotlin/load/java/components/JavaD") -> false
  path.startsWith("org/jetbrains/kotlin/load/java/components/JavaP") -> false
  path.startsWith("org/jetbrains/kotlin/load/java/sam/S") -> false
  path.startsWith("org/jetbrains/kotlin/load/kotlin/S") -> false
  path.startsWith("org/jetbrains/kotlin/load/kotlin/incremental/c") -> false
  path.startsWith("org/jetbrains/kotlin/psi2ir/generators/fragments/E") -> false
  path.startsWith("org/jetbrains/kotlin/psi2ir/intermediate/I") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/Al") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/Cli") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/Ext") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/Me") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/PlatformD") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/N") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/inference/components/TypeC") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/inference/components/VariableFixationFinderK") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/inference/model/No") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/model/ArgumentMat") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/model/ArgumentN") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/model/Rec") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/results/FlatSignatureK") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/results/T") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/util/F") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/constants/T") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/deprecation/Des") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/jvm/N") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/jvm/multiplatform/P") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/scopes/C") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/scopes/G") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/scopes/receivers/I") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/scopes/receivers/R") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/scopes/s") -> false
  path.startsWith("org/jetbrains/kotlin/scripting/compiler/plugin/impl/PackageP") -> false
  path.startsWith("org/jetbrains/kotlin/scripting/compiler/plugin/repl/w") -> false
  path.startsWith("org/jetbrains/kotlin/scripting/definitions/C") -> false
  path.startsWith("org/jetbrains/kotlin/scripting/definitions/LazyC") -> false
  path.startsWith("org/jetbrains/kotlin/scripting/resolve/ScriptCompilationConfigurationWrapper\$FromLegacy\$") -> false
  path.startsWith("org/jetbrains/kotlin/serialization/A") -> false
  path.startsWith("org/jetbrains/kotlin/storage/N") -> false
  path.startsWith("org/jetbrains/kotlin/synthetic/SyntheticJ") -> false
  path.startsWith("org/jetbrains/kotlin/types/Del") -> false
  path.startsWith("org/jetbrains/kotlin/types/Enr") -> false
  path.startsWith("org/jetbrains/kotlin/types/Er") -> false
  path.startsWith("org/jetbrains/kotlin/types/N") -> false
  path.startsWith("org/jetbrains/kotlin/types/expressions/FunctionW") -> false
  path.startsWith("org/jetbrains/kotlin/types/expressions/G") -> false
  path.startsWith("org/jetbrains/kotlin/util/Ab") -> false
  path.startsWith("org/jetbrains/kotlin/util/Me") -> false
  path.startsWith("org/jetbrains/kotlin/util/Mo") -> false
  path.startsWith("org/jetbrains/kotlin/util/W") -> false
  path.startsWith("org/jetbrains/kotlin/util/slicedMap/R") -> false
  path.startsWith("org/jetbrains/kotlin/util/slicedMap/Se") -> false
  path.startsWith("org/jetbrains/kotlin/util/slicedMap/Sliced") -> false
  path.startsWith("org/jetbrains/kotlin/utils/N") -> false
  path.startsWith("org/jetbrains/kotlin/utils/a") -> false
  path.startsWith("com/intellij/codeInsight/Co") -> false
  path.startsWith("com/intellij/lang/jvm/types/JvmP") -> false
  path.startsWith("com/intellij/lang/jvm/types/JvmT") -> false
  path.startsWith("com/intellij/openapi/extensions/i") -> false
  path.startsWith("com/intellij/openapi/vfs/Str") -> false
  path.startsWith("com/intellij/psi/scope/ElementClassH") -> false
  path.startsWith("com/intellij/util/N") -> false
  path.startsWith("com/intellij/util/t") -> false
  path.startsWith("kotlin/script/experimental/l") -> false
  path.startsWith("org/jetbrains/kotlin/KtI") -> false
  path.startsWith("org/jetbrains/kotlin/analysis/decompiler/psi/DeserializerForD") -> false
  path.startsWith("org/jetbrains/kotlin/analysis/decompiler/psi/R") -> false
  path.startsWith("org/jetbrains/kotlin/analysis/decompiler/stub/AnnotationW") -> false
  path.startsWith("org/jetbrains/kotlin/analysis/decompiler/stub/TypeP") -> false
  path.startsWith("org/jetbrains/kotlin/analyzer/C") -> false
  path.startsWith("org/jetbrains/kotlin/analyzer/Li") -> false
  path.startsWith("org/jetbrains/kotlin/analyzer/ModuleD") -> false
  path.startsWith("org/jetbrains/kotlin/analyzer/ResolverForP") -> false
  path.startsWith("org/jetbrains/kotlin/asJava/I") -> false
  path.startsWith("org/jetbrains/kotlin/backend/common/CheckD") -> false
  path.startsWith("org/jetbrains/kotlin/backend/common/DefaultD") -> false
  path.startsWith("org/jetbrains/kotlin/backend/common/Fi") -> false
  path.startsWith("org/jetbrains/kotlin/backend/common/KL") -> false
  path.startsWith("org/jetbrains/kotlin/backend/common/ir/E") -> false
  path.startsWith("org/jetbrains/kotlin/backend/common/ir/IrInlina") -> false
  path.startsWith("org/jetbrains/kotlin/backend/common/linkage/issues/Un") -> false
  path.startsWith("org/jetbrains/kotlin/backend/common/lower/AnnotationImplementationTransformerK") -> false
  path.startsWith("org/jetbrains/kotlin/backend/common/lower/BO") -> false
  path.startsWith("org/jetbrains/kotlin/backend/common/phaser/A") -> false
  path.startsWith("org/jetbrains/kotlin/backend/common/phaser/S") -> false
  path.startsWith("org/jetbrains/kotlin/backend/common/serialization/Co") -> false
  path.startsWith("org/jetbrains/kotlin/backend/common/serialization/Fin") -> false
  path.startsWith("org/jetbrains/kotlin/backend/common/serialization/IC") -> false
  path.startsWith("org/jetbrains/kotlin/backend/common/serialization/mangle/K") -> false
  path.startsWith("org/jetbrains/kotlin/backend/common/serialization/mangle/MangleC") -> false
  path.startsWith("org/jetbrains/kotlin/backend/common/serialization/metadata/D") -> false
  path.startsWith("org/jetbrains/kotlin/backend/common/serialization/metadata/KlibMetadataIncrementalSerializerK") -> false
  path.startsWith("org/jetbrains/kotlin/backend/common/serialization/signature/IdSignatureD") -> false
  path.startsWith("org/jetbrains/kotlin/backend/jvm/Mu") -> false
  path.startsWith("org/jetbrains/kotlin/backend/jvm/codegen/T") -> false
  path.startsWith("org/jetbrains/kotlin/backend/jvm/lower/Pa") -> false
  path.startsWith("org/jetbrains/kotlin/backend/jvm/serialization/Di") -> false
  path.startsWith("org/jetbrains/kotlin/backend/wasm/ir2wasm/E") -> false
  path.startsWith("org/jetbrains/kotlin/backend/wasm/ir2wasm/J") -> false
  path.startsWith("org/jetbrains/kotlin/backend/wasm/ir2wasm/L") -> false
  path.startsWith("org/jetbrains/kotlin/backend/wasm/utils/D") -> false
  path.startsWith("org/jetbrains/kotlin/cfg/WhenOnEx") -> false
  path.startsWith("org/jetbrains/kotlin/cfg/pseudocode/A") -> false
  path.startsWith("org/jetbrains/kotlin/cfg/pseudocode/F") -> false
  path.startsWith("org/jetbrains/kotlin/cfg/pseudocode/T") -> false
  path.startsWith("org/jetbrains/kotlin/cfg/pseudocodeTraverser/T") -> false
  path.startsWith("org/jetbrains/kotlin/cli/common/I") -> false
  path.startsWith("org/jetbrains/kotlin/cli/common/fir/K") -> false
  path.startsWith("org/jetbrains/kotlin/cli/common/fir/S") -> false
  path.startsWith("org/jetbrains/kotlin/cli/common/messages/O") -> false
  path.startsWith("org/jetbrains/kotlin/cli/jvm/compiler/JvmPackagePartProviderK") -> false
  path.startsWith("org/jetbrains/kotlin/cli/jvm/compiler/TopDownAnalyzerFacadeForJVMK") -> false
  path.startsWith("org/jetbrains/kotlin/cli/jvm/config/JvmCl") -> false
  path.startsWith("org/jetbrains/kotlin/cli/jvm/javac/JavacL") -> false
  path.startsWith("org/jetbrains/kotlin/cli/metadata/K2MetadataKlibSerializerK") -> false
  path.startsWith("org/jetbrains/kotlin/cli/p") -> false
  path.startsWith("org/jetbrains/kotlin/codegen/Asm") -> false
  path.startsWith("org/jetbrains/kotlin/codegen/CodeFragmentCodegenI") -> false
  path.startsWith("org/jetbrains/kotlin/codegen/Fa") -> false
  path.startsWith("org/jetbrains/kotlin/codegen/Inn") -> false
  path.startsWith("org/jetbrains/kotlin/codegen/Ow") -> false
  path.startsWith("org/jetbrains/kotlin/codegen/PackagePartR") -> false
  path.startsWith("org/jetbrains/kotlin/codegen/inline/Fic") -> false
  path.startsWith("org/jetbrains/kotlin/codegen/inline/InlineR") -> false
  path.startsWith("org/jetbrains/kotlin/codegen/inline/N") -> false
  path.startsWith("org/jetbrains/kotlin/codegen/optimization/boxing/Pr") -> false
  path.startsWith("org/jetbrains/kotlin/codegen/optimization/common/B") -> false
  path.startsWith("org/jetbrains/kotlin/codegen/optimization/common/Insn") -> false
  path.startsWith("org/jetbrains/kotlin/codegen/optimization/common/S") -> false
  path.startsWith("org/jetbrains/kotlin/codegen/optimization/fixStack/FixStackV") -> false
  path.startsWith("org/jetbrains/kotlin/codegen/optimization/fixStack/S") -> false
  path.startsWith("org/jetbrains/kotlin/codegen/optimization/nullCheck/No") -> false
  path.startsWith("org/jetbrains/kotlin/codegen/p") -> false
  path.startsWith("org/jetbrains/kotlin/codegen/range/comparison/F") -> false
  path.startsWith("org/jetbrains/kotlin/codegen/range/comparison/I") -> false
  path.startsWith("org/jetbrains/kotlin/codegen/range/comparison/U") -> false
  path.startsWith("org/jetbrains/kotlin/codegen/serialization/JvmSi") -> false
  path.startsWith("org/jetbrains/kotlin/compiler/plugin/Comm") -> false
  path.startsWith("org/jetbrains/kotlin/compiler/plugin/P") -> false
  path.startsWith("org/jetbrains/kotlin/daemon/E") -> false
  path.startsWith("org/jetbrains/kotlin/daemon/report/G") -> false
  path.startsWith("org/jetbrains/kotlin/descriptors/Dese") -> false
  path.startsWith("org/jetbrains/kotlin/descriptors/annotations/Annotate") -> false
  path.startsWith("org/jetbrains/kotlin/descriptors/annotations/B") -> false
  path.startsWith("org/jetbrains/kotlin/descriptors/annotations/F") -> false
  path.startsWith("org/jetbrains/kotlin/descriptors/k") -> false
  path.startsWith("org/jetbrains/kotlin/fir/backend/Fir2IrVisib") -> false
  path.startsWith("org/jetbrains/kotlin/fir/builder/B") -> false
  path.startsWith("org/jetbrains/kotlin/fir/builder/FirB") -> false
  path.startsWith("org/jetbrains/kotlin/fir/declarations/Deprecate") -> false
  path.startsWith("org/jetbrains/kotlin/fir/declarations/DestructuringDeclarationC") -> false
  path.startsWith("org/jetbrains/kotlin/fir/declarations/FirResolvedT") -> false
  path.startsWith("org/jetbrains/kotlin/fir/declarations/utils/FirSc") -> false
  path.startsWith("org/jetbrains/kotlin/fir/descriptors/FirP") -> false
  path.startsWith("org/jetbrains/kotlin/fir/deserialization/Pr") -> false
  path.startsWith("org/jetbrains/kotlin/fir/diagnostics/ConeA") -> false
  path.startsWith("org/jetbrains/kotlin/fir/resolve/ScopeS") -> false
  path.startsWith("org/jetbrains/kotlin/fir/resolve/TypeA") -> false
  path.startsWith("org/jetbrains/kotlin/fir/resolve/calls/Infe") -> false
  path.startsWith("org/jetbrains/kotlin/fir/resolve/calls/ResolvedW") -> false
  path.startsWith("org/jetbrains/kotlin/fir/resolve/dfa/cfg/Al") -> false
  path.startsWith("org/jetbrains/kotlin/fir/resolve/dfa/cfg/Gr") -> false
  path.startsWith("org/jetbrains/kotlin/fir/resolve/providers/impl/B") -> false
  path.startsWith("org/jetbrains/kotlin/fir/resolve/providers/impl/FirProviderImplK") -> false
  path.startsWith("org/jetbrains/kotlin/fir/scopes/Pr") -> false
  path.startsWith("org/jetbrains/kotlin/fir/session/IncrementalP") -> false
  path.startsWith("org/jetbrains/kotlin/fir/session/KlibIcD") -> false
  path.startsWith("org/jetbrains/kotlin/fir/types/ConeF") -> false
  path.startsWith("org/jetbrains/kotlin/fir/types/ConeN") -> false
  path.startsWith("org/jetbrains/kotlin/fir/types/ConeR") -> false
  path.startsWith("org/jetbrains/kotlin/fir/types/Er") -> false
  path.startsWith("org/jetbrains/kotlin/idea/J") -> false
  path.startsWith("org/jetbrains/kotlin/incremental/Con") -> false
  path.startsWith("org/jetbrains/kotlin/incremental/E") -> false
  path.startsWith("org/jetbrains/kotlin/incremental/IncrementalCompila") -> false
  path.startsWith("org/jetbrains/kotlin/incremental/IncrementalJvmCacheK") -> false
  path.startsWith("org/jetbrains/kotlin/incremental/Ir") -> false
  path.startsWith("org/jetbrains/kotlin/incremental/classpathDiff/ClassM") -> false
  path.startsWith("org/jetbrains/kotlin/incremental/classpathDiff/ClasspathE") -> false
  path.startsWith("org/jetbrains/kotlin/incremental/classpathDiff/F") -> false
  path.startsWith("org/jetbrains/kotlin/incremental/classpathDiff/M") -> false
  path.startsWith("org/jetbrains/kotlin/incremental/classpathDiff/R") -> false
  path.startsWith("org/jetbrains/kotlin/ir/backend/js/ic/ICU") -> false
  path.startsWith("org/jetbrains/kotlin/ir/backend/js/ic/IncrementalCacheG") -> false
  path.startsWith("org/jetbrains/kotlin/ir/backend/js/ic/JsIrC") -> false
  path.startsWith("org/jetbrains/kotlin/ir/backend/js/ic/KotlinLibraryF") -> false
  path.startsWith("org/jetbrains/kotlin/ir/backend/js/lower/JsCodeOutliningLoweringK") -> false
  path.startsWith("org/jetbrains/kotlin/ir/backend/js/lower/PrivateMembersLoweringK") -> false
  path.startsWith("org/jetbrains/kotlin/ir/backend/js/transformers/irToJs/CompilationOutputsK") -> false
  path.startsWith("org/jetbrains/kotlin/ir/backend/js/transformers/irToJs/JsIrModuleH") -> false
  path.startsWith("org/jetbrains/kotlin/ir/backend/js/transformers/irToJs/JsIrProgramF") -> false
  path.startsWith("org/jetbrains/kotlin/ir/backend/js/utils/JsGenerationContextK") -> false
  path.startsWith("org/jetbrains/kotlin/ir/backend/js/utils/NameS") -> false
  path.startsWith("org/jetbrains/kotlin/ir/backend/js/utils/serialization/E") -> false
  path.startsWith("org/jetbrains/kotlin/ir/backend/jvm/J") -> false
  path.startsWith("org/jetbrains/kotlin/ir/builders/IrE") -> false
  path.startsWith("org/jetbrains/kotlin/ir/descriptors/IrDel") -> false
  path.startsWith("org/jetbrains/kotlin/ir/descriptors/IrI") -> false
  path.startsWith("org/jetbrains/kotlin/ir/descriptors/IrP") -> false
  path.startsWith("org/jetbrains/kotlin/ir/expressions/C") -> false
  path.startsWith("org/jetbrains/kotlin/ir/expressions/impl/IrBlockI") -> false
  path.startsWith("org/jetbrains/kotlin/ir/expressions/impl/IrBr") -> false
  path.startsWith("org/jetbrains/kotlin/ir/expressions/impl/IrDy") -> false
  path.startsWith("org/jetbrains/kotlin/ir/expressions/impl/IrEn") -> false
  path.startsWith("org/jetbrains/kotlin/ir/expressions/impl/IrEr") -> false
  path.startsWith("org/jetbrains/kotlin/ir/expressions/impl/IrW") -> false
  path.startsWith("org/jetbrains/kotlin/ir/interpreter/stack/V") -> false
  path.startsWith("org/jetbrains/kotlin/ir/linkage/partial/PartialLinkageCase\$A") -> false
  path.startsWith("org/jetbrains/kotlin/ir/linkage/partial/PartialLinkageCase\$ExpressionW") -> false
  path.startsWith("org/jetbrains/kotlin/ir/linkage/partial/PartialLinkageCase\$M") -> false
  path.startsWith("org/jetbrains/kotlin/ir/linkage/partial/PartialLinkageM") -> false
  path.startsWith("org/jetbrains/kotlin/ir/types/IrS") -> false
  path.startsWith("org/jetbrains/kotlin/ir/types/IrTypeA") -> false
  path.startsWith("org/jetbrains/kotlin/ir/types/S") -> false
  path.startsWith("org/jetbrains/kotlin/ir/types/impl/IrC") -> false
  path.startsWith("org/jetbrains/kotlin/ir/types/impl/IrD") -> false
  path.startsWith("org/jetbrains/kotlin/ir/util/P") -> false
  path.startsWith("org/jetbrains/kotlin/ir/util/Rem") -> false
  path.startsWith("org/jetbrains/kotlin/ir/util/TypeR") -> false
  path.startsWith("org/jetbrains/kotlin/javac/components/JavacBasedS") -> false
  path.startsWith("org/jetbrains/kotlin/js/J") -> false
  path.startsWith("org/jetbrains/kotlin/js/P") -> false
  path.startsWith("org/jetbrains/kotlin/js/backend/ast/metadata/H") -> false
  path.startsWith("org/jetbrains/kotlin/js/backend/ast/metadata/R") -> false
  path.startsWith("org/jetbrains/kotlin/js/backend/ast/metadata/S") -> false
  path.startsWith("org/jetbrains/kotlin/js/config/R") -> false
  path.startsWith("org/jetbrains/kotlin/js/config/S") -> false
  path.startsWith("org/jetbrains/kotlin/js/config/W") -> false
  path.startsWith("org/jetbrains/kotlin/js/inline/clean/Ren") -> false
  path.startsWith("org/jetbrains/kotlin/js/inline/util/Fu") -> false
  path.startsWith("org/jetbrains/kotlin/js/resolve/JsT") -> false
  path.startsWith("org/jetbrains/kotlin/js/sourceMap/R") -> false
  path.startsWith("org/jetbrains/kotlin/js/translate/context/g") -> false
  path.startsWith("org/jetbrains/kotlin/js/translate/expression/Wi") -> false
  path.startsWith("org/jetbrains/kotlin/ka") -> false
  path.startsWith("org/jetbrains/kotlin/kdoc/parser/KDocK") -> false
  path.startsWith("org/jetbrains/kotlin/library/B") -> false
  path.startsWith("org/jetbrains/kotlin/library/C") -> false
  path.startsWith("org/jetbrains/kotlin/library/U") -> false
  path.startsWith("org/jetbrains/kotlin/library/abi/impl/S") -> false
  path.startsWith("org/jetbrains/kotlin/library/abi/impl/T") -> false
  path.startsWith("org/jetbrains/kotlin/library/r") -> false
  path.startsWith("org/jetbrains/kotlin/load/java/C") -> false
  path.startsWith("org/jetbrains/kotlin/load/java/D") -> false
  path.startsWith("org/jetbrains/kotlin/load/java/F") -> false
  path.startsWith("org/jetbrains/kotlin/load/java/JavaClasse") -> false
  path.startsWith("org/jetbrains/kotlin/load/java/JavaI") -> false
  path.startsWith("org/jetbrains/kotlin/load/java/Js") -> false
  path.startsWith("org/jetbrains/kotlin/load/java/R") -> false
  path.startsWith("org/jetbrains/kotlin/load/java/components/JavaT") -> false
  path.startsWith("org/jetbrains/kotlin/load/java/components/SignaturePropagator\$") -> false
  path.startsWith("org/jetbrains/kotlin/load/java/so") -> false
  path.startsWith("org/jetbrains/kotlin/load/java/structure/L") -> false
  path.startsWith("org/jetbrains/kotlin/load/java/structure/M") -> false
  path.startsWith("org/jetbrains/kotlin/load/java/structure/impl/C") -> false
  path.startsWith("org/jetbrains/kotlin/load/java/structure/impl/classFiles/O") -> false
  path.startsWith("org/jetbrains/kotlin/load/kotlin/Mem") -> false
  path.startsWith("org/jetbrains/kotlin/load/kotlin/Meth") -> false
  path.startsWith("org/jetbrains/kotlin/load/kotlin/PackagePartP") -> false
  path.startsWith("org/jetbrains/kotlin/parsing/AbstractTokenStreamPr") -> false
  path.startsWith("org/jetbrains/kotlin/progress/C") -> false
  path.startsWith("org/jetbrains/kotlin/psi/Pl") -> false
  path.startsWith("org/jetbrains/kotlin/psi2ir/intermediate/As") -> false
  path.startsWith("org/jetbrains/kotlin/psi2ir/intermediate/OnceExpressionValueK") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/AdditionalC") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/BindingTraceF") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/Def") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/DescriptorF") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/Find") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/Inl") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/Mi") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/ModuleS") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/OverloadC") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/OverloadF") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/Overrides") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/PlatformA") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/Resolu") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/Std") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/a") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/components/ReturnArgumentsI") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/inference/CallH") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/inference/ConstraintE") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/inference/ConstraintI") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/inference/ConstraintSystem\$") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/inference/ConstraintSystemU") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/inference/S") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/inference/components/ConstraintIncorporatorK") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/inference/components/F") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/inference/model/A") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/inference/model/Expl") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/inference/model/F") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/inference/model/Ini") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/inference/model/K") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/inference/model/O") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/model/Compa") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/model/I") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/model/KotlinCallD") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/model/KotlinD") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/model/Mul") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/model/PostponedR") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/model/St") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/results/P") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/smartcasts/C") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/smartcasts/DataFlowValue\$") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/smartcasts/IdentifierInfo\$N") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/smartcasts/N") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/smartcasts/SmartCastR") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/tower/D") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/tower/FunctionL") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/tower/InvokeP") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/tower/No") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/tower/Pr") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/tower/Q") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/tower/Vi") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/constants/A") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/constants/B") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/constants/CompileTimeConstant\$") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/constants/S") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/constants/evaluate/O") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/deprecation/C") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/deprecation/DeprecatedByV") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/deprecation/DeprecationS") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/jvm/A") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/jvm/JvmOverr") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/jvm/JvmT") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/jvm/Re") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/jvm/S") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/konan/platform/K") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/lazy/Del") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/scopes/A") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/scopes/B") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/scopes/H") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/scopes/R") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/scopes/o") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/scopes/receivers/Co") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/scopes/receivers/QualifierR") -> false
  path.startsWith("org/jetbrains/kotlin/scripting/compiler/plugin/AbstractScriptEvaluationExtensionK") -> false
  path.startsWith("org/jetbrains/kotlin/scripting/compiler/plugin/E") -> false
  path.startsWith("org/jetbrains/kotlin/scripting/compiler/plugin/impl/KJvmC") -> false
  path.startsWith("org/jetbrains/kotlin/scripting/compiler/plugin/impl/ReplP") -> false
  path.startsWith("org/jetbrains/kotlin/scripting/compiler/plugin/repl/ReplE") -> false
  path.startsWith("org/jetbrains/kotlin/scripting/compiler/plugin/repl/ReplIm") -> false
  path.startsWith("org/jetbrains/kotlin/scripting/compiler/plugin/repl/configuration/S") -> false
  path.startsWith("org/jetbrains/kotlin/scripting/compiler/plugin/repl/reader/ReplS") -> false
  path.startsWith("org/jetbrains/kotlin/scripting/definitions/B") -> false
  path.startsWith("org/jetbrains/kotlin/scripting/definitions/Dy") -> false
  path.startsWith("org/jetbrains/kotlin/scripting/definitions/T") -> false
  path.startsWith("org/jetbrains/kotlin/serialization/Serializa") -> false
  path.startsWith("org/jetbrains/kotlin/serialization/js/J") -> false
  path.startsWith("org/jetbrains/kotlin/serialization/js/KotlinF") -> false
  path.startsWith("org/jetbrains/kotlin/serialization/k") -> false
  path.startsWith("org/jetbrains/kotlin/storage/CacheW") -> false
  path.startsWith("org/jetbrains/kotlin/storage/M") -> false
  path.startsWith("org/jetbrains/kotlin/types/B") -> false
  path.startsWith("org/jetbrains/kotlin/types/Cl") -> false
  path.startsWith("org/jetbrains/kotlin/types/Defi") -> false
  path.startsWith("org/jetbrains/kotlin/types/Di") -> false
  path.startsWith("org/jetbrains/kotlin/types/L") -> false
  path.startsWith("org/jetbrains/kotlin/types/U") -> false
  path.startsWith("org/jetbrains/kotlin/types/V") -> false
  path.startsWith("org/jetbrains/kotlin/util/Em") -> false
  path.startsWith("org/jetbrains/kotlin/util/N") -> false
  path.startsWith("org/jetbrains/kotlin/util/Pe") -> false
  path.startsWith("org/jetbrains/kotlin/util/Reentera") -> false
  path.startsWith("org/jetbrains/kotlin/util/Se") -> false
  path.startsWith("org/jetbrains/kotlin/util/T") -> false
  path.startsWith("org/jetbrains/kotlin/util/c") -> false
  path.startsWith("org/jetbrains/kotlin/util/slicedMap/B") -> false
  path.startsWith("org/jetbrains/kotlin/utils/JsM") -> false
  path.startsWith("org/jetbrains/kotlin/utils/M") -> false
  path.startsWith("org/jetbrains/kotlin/utils/Pl") -> false
  path.startsWith("org/jetbrains/kotlin/utils/r") -> false
  path.startsWith("com/intellij/codeInsight/ExternalAnnotationsL") -> false
  path.startsWith("com/intellij/codeInsight/J") -> false
  path.startsWith("com/intellij/codeInsight/Nullability.") -> false
  path.startsWith("com/intellij/codeInsight/c") -> false
  path.startsWith("com/intellij/codeInsight/folding/J") -> false
  path.startsWith("com/intellij/codeInsight/folding/impl/JavaC") -> false
  path.startsWith("com/intellij/lang/jvm/JvmAnnotati") -> false
  path.startsWith("com/intellij/lang/jvm/JvmClassK") -> false
  path.startsWith("com/intellij/lang/jvm/JvmModifier.") -> false
  path.startsWith("com/intellij/lang/jvm/types/JvmA") -> false
  path.startsWith("com/intellij/lang/jvm/types/JvmR") -> false
  path.startsWith("com/intellij/lang/jvm/types/JvmW") -> false
  path.startsWith("com/intellij/openapi/application/ex/P") -> false
  path.startsWith("com/intellij/openapi/comp") -> false
  path.startsWith("com/intellij/openapi/util/B") -> false
  path.startsWith("com/intellij/openapi/util/P") -> false
  path.startsWith("com/intellij/openapi/util/S") -> false
  path.startsWith("com/intellij/openapi/util/V") -> false
  path.startsWith("com/intellij/openapi/vfs/impl/Z") -> false
  path.startsWith("com/intellij/psi/Cons") -> false
  path.startsWith("com/intellij/psi/PsiModifier\$") -> false
  path.startsWith("com/intellij/psi/PsiModifier.") -> false
  path.startsWith("com/intellij/psi/codeStyle/V") -> false
  path.startsWith("com/intellij/psi/controlFlow/ControlFlowO") -> false
  path.startsWith("com/intellij/psi/impl/compiled/O") -> false
  path.startsWith("com/intellij/psi/impl/source/resolve/Do") -> false
  path.startsWith("com/intellij/psi/impl/source/resolve/graphInference/InferenceB") -> false
  path.startsWith("com/intellij/psi/impl/source/tree/Chi") -> false
  path.startsWith("com/intellij/psi/scope/M") -> false
  path.startsWith("com/intellij/psi/scope/N") -> false
  path.startsWith("com/intellij/ui/I") -> false
  path.startsWith("com/intellij/util/B") -> false
  path.startsWith("com/intellij/util/Con") -> false
  path.startsWith("com/intellij/util/Ur") -> false
  path.startsWith("com/intellij/util/g") -> false
  path.startsWith("com/intellij/util/k") -> false
  path.startsWith("kotlin/script/experimental/jsr223/KotlinJsr223DefaultScriptEngineFactoryK") -> false
  path.startsWith("kotlin/script/experimental/jvmhost/repl/L") -> false
  path.startsWith("kotlin/script/experimental/jvmhost/repl/S") -> false
  path.startsWith("kotlin/script/ext") -> false
  path.startsWith("org/jetbrains/kotlin/A") -> false
  path.startsWith("org/jetbrains/kotlin/G") -> false
  path.startsWith("org/jetbrains/kotlin/J") -> false
  path.startsWith("org/jetbrains/kotlin/KtDiagnosticReporterWithImplicitIrBasedContextK") -> false
  path.startsWith("org/jetbrains/kotlin/KtO") -> false
  path.startsWith("org/jetbrains/kotlin/KtRealS") -> false
  path.startsWith("org/jetbrains/kotlin/KtSourceElementKi") -> false
  path.startsWith("org/jetbrains/kotlin/analysis/decompiler/psi/L") -> false
  path.startsWith("org/jetbrains/kotlin/analysis/decompiler/psi/text/D") -> false
  path.startsWith("org/jetbrains/kotlin/analysis/decompiler/psi/text/I") -> false
  path.startsWith("org/jetbrains/kotlin/analysis/decompiler/stub/E") -> false
  path.startsWith("org/jetbrains/kotlin/analysis/decompiler/stub/TypeClsStubBuilderK") -> false
  path.startsWith("org/jetbrains/kotlin/analysis/decompiler/stub/file/Ca") -> false
  path.startsWith("org/jetbrains/kotlin/analysis/project/structure/KtModuleSt") -> false
  path.startsWith("org/jetbrains/kotlin/analysis/providers/KotlinPackageProvider.") -> false
  path.startsWith("org/jetbrains/kotlin/analysis/providers/topics/KotlinModuleStateModificationK") -> false
  path.startsWith("org/jetbrains/kotlin/analyzer/Analyz") -> false
  path.startsWith("org/jetbrains/kotlin/analyzer/Der") -> false
  path.startsWith("org/jetbrains/kotlin/analyzer/E") -> false
  path.startsWith("org/jetbrains/kotlin/analyzer/I") -> false
  path.startsWith("org/jetbrains/kotlin/analyzer/ModuleS") -> false
  path.startsWith("org/jetbrains/kotlin/analyzer/N") -> false
  path.startsWith("org/jetbrains/kotlin/analyzer/ResolverForModule.") -> false
  path.startsWith("org/jetbrains/kotlin/analyzer/S") -> false
  path.startsWith("org/jetbrains/kotlin/analyzer/T") -> false
  path.startsWith("org/jetbrains/kotlin/analyzer/common/CommonD") -> false
  path.startsWith("org/jetbrains/kotlin/analyzer/common/CommonPlatform\$") -> false
  path.startsWith("org/jetbrains/kotlin/analyzer/common/CommonPlatform.") -> false
  path.startsWith("org/jetbrains/kotlin/analyzer/common/K") -> false
  path.startsWith("org/jetbrains/kotlin/analyzer/common/P") -> false
  path.startsWith("org/jetbrains/kotlin/asJava/KotlinAsJavaSupportBaseK") -> false
  path.startsWith("org/jetbrains/kotlin/asJava/Kt") -> false
  path.startsWith("org/jetbrains/kotlin/asJava/classes/KtUltraLightClassForInterfaceDefaultImplsK") -> false
  path.startsWith("org/jetbrains/kotlin/asJava/classes/M") -> false
  path.startsWith("org/jetbrains/kotlin/asJava/classes/T") -> false
  path.startsWith("org/jetbrains/kotlin/backend/common/BackendE") -> false
  path.startsWith("org/jetbrains/kotlin/backend/common/Bi") -> false
  path.startsWith("org/jetbrains/kotlin/backend/common/CheckIrElementVisitorK") -> false
  path.startsWith("org/jetbrains/kotlin/backend/common/Col") -> false
  path.startsWith("org/jetbrains/kotlin/backend/common/CommonC") -> false
  path.startsWith("org/jetbrains/kotlin/backend/common/CommonK") -> false
  path.startsWith("org/jetbrains/kotlin/backend/common/DefaultM") -> false
  path.startsWith("org/jetbrains/kotlin/backend/common/Del") -> false
  path.startsWith("org/jetbrains/kotlin/backend/common/E") -> false
  path.startsWith("org/jetbrains/kotlin/backend/common/IrValidatorC") -> false
  path.startsWith("org/jetbrains/kotlin/backend/common/Log") -> false
  path.startsWith("org/jetbrains/kotlin/backend/common/Si") -> false
  path.startsWith("org/jetbrains/kotlin/backend/common/TailC") -> false
  path.startsWith("org/jetbrains/kotlin/backend/common/TailSuspendCalls.") -> false
  path.startsWith("org/jetbrains/kotlin/backend/common/actualizer/ActualizerS") -> false
  path.startsWith("org/jetbrains/kotlin/backend/common/actualizer/C") -> false
  path.startsWith("org/jetbrains/kotlin/backend/common/actualizer/IrActualized") -> false
  path.startsWith("org/jetbrains/kotlin/backend/common/bridges/F") -> false
  path.startsWith("org/jetbrains/kotlin/backend/common/extensions/F") -> false
  path.startsWith("org/jetbrains/kotlin/backend/common/extensions/IrA") -> false
  path.startsWith("org/jetbrains/kotlin/backend/common/extensions/IrI") -> false
  path.startsWith("org/jetbrains/kotlin/backend/common/ir/A") -> false
  path.startsWith("org/jetbrains/kotlin/backend/common/ir/D") -> false
  path.startsWith("org/jetbrains/kotlin/backend/common/ir/IrInv") -> false
  path.startsWith("org/jetbrains/kotlin/backend/common/ir/Sh") -> false
  path.startsWith("org/jetbrains/kotlin/backend/common/ir/V") -> false
  path.startsWith("org/jetbrains/kotlin/backend/common/linkage/issues/KotlinIrLinkerIssue.") -> false
  path.startsWith("org/jetbrains/kotlin/backend/common/linkage/issues/N") -> false
  path.startsWith("org/jetbrains/kotlin/backend/common/linkage/partial/D") -> false
  path.startsWith("org/jetbrains/kotlin/backend/common/linkage/partial/Ir") -> false
  path.startsWith("org/jetbrains/kotlin/backend/common/linkage/partial/PartiallyLinkedM") -> false
  path.startsWith("org/jetbrains/kotlin/backend/common/lower/AbstractVar") -> false
  path.startsWith("org/jetbrains/kotlin/backend/common/lower/ArrayConstructorW") -> false
  path.startsWith("org/jetbrains/kotlin/backend/common/lower/Bu") -> false
  path.startsWith("org/jetbrains/kotlin/backend/common/lower/Closure.") -> false
  path.startsWith("org/jetbrains/kotlin/backend/common/lower/Constr") -> false
  path.startsWith("org/jetbrains/kotlin/backend/common/lower/DefaultArgumentStubGeneratorK") -> false
  path.startsWith("org/jetbrains/kotlin/backend/common/lower/FI") -> false
  path.startsWith("org/jetbrains/kotlin/backend/common/lower/InitializersLoweringK") -> false
  path.startsWith("org/jetbrains/kotlin/backend/common/lower/InlineClassD") -> false
  path.startsWith("org/jetbrains/kotlin/backend/common/lower/InnerClassesLoweringK") -> false
  path.startsWith("org/jetbrains/kotlin/backend/common/lower/InnerClassesS") -> false
  path.startsWith("org/jetbrains/kotlin/backend/common/lower/ProvisionalFunctionExpressionLoweringC") -> false
  path.startsWith("org/jetbrains/kotlin/backend/common/lower/SpecialM") -> false
  path.startsWith("org/jetbrains/kotlin/backend/common/lower/loops/Co") -> false
  path.startsWith("org/jetbrains/kotlin/backend/common/lower/loops/Fl") -> false
  path.startsWith("org/jetbrains/kotlin/backend/common/lower/loops/HeaderInfo.") -> false
  path.startsWith("org/jetbrains/kotlin/backend/common/lower/loops/HeaderInfoH") -> false
  path.startsWith("org/jetbrains/kotlin/backend/common/lower/loops/IterableH") -> false
  path.startsWith("org/jetbrains/kotlin/backend/common/lower/loops/Loo") -> false
  path.startsWith("org/jetbrains/kotlin/backend/common/lower/loops/WithIndexH") -> false
  path.startsWith("org/jetbrains/kotlin/backend/common/lower/optimizations/LivenessAnalysisK") -> false
  path.startsWith("org/jetbrains/kotlin/backend/common/overrides/D") -> false
  path.startsWith("org/jetbrains/kotlin/backend/common/overrides/FakeOverrideCl") -> false
  path.startsWith("org/jetbrains/kotlin/backend/common/overrides/Fi") -> false
  path.startsWith("org/jetbrains/kotlin/backend/common/phaser/B") -> false
  path.startsWith("org/jetbrains/kotlin/backend/common/phaser/Cr") -> false
  path.startsWith("org/jetbrains/kotlin/backend/common/phaser/Fl") -> false
  path.startsWith("org/jetbrains/kotlin/backend/common/phaser/N") -> false
  path.startsWith("org/jetbrains/kotlin/backend/common/phaser/Phaser") -> false
  path.startsWith("org/jetbrains/kotlin/backend/common/serialization/Ci") -> false
  path.startsWith("org/jetbrains/kotlin/backend/common/serialization/DeclarationTableK") -> false
  path.startsWith("org/jetbrains/kotlin/backend/common/serialization/Fu") -> false
  path.startsWith("org/jetbrains/kotlin/backend/common/serialization/H") -> false
  path.startsWith("org/jetbrains/kotlin/backend/common/serialization/IrFl") -> false
  path.startsWith("org/jetbrains/kotlin/backend/common/serialization/IrK") -> false
  path.startsWith("org/jetbrains/kotlin/backend/common/serialization/IrLibraryB") -> false
  path.startsWith("org/jetbrains/kotlin/backend/common/serialization/IrLibraryFile.") -> false
  path.startsWith("org/jetbrains/kotlin/backend/common/serialization/IrModuleDeserializerKi") -> false
  path.startsWith("org/jetbrains/kotlin/backend/common/serialization/L") -> false
  path.startsWith("org/jetbrains/kotlin/backend/common/serialization/mangle/A") -> false
  path.startsWith("org/jetbrains/kotlin/backend/common/serialization/mangle/MangleM") -> false
  path.startsWith("org/jetbrains/kotlin/backend/common/serialization/mangle/MangleU") -> false
  path.startsWith("org/jetbrains/kotlin/backend/common/serialization/mangle/S") -> false
  path.startsWith("org/jetbrains/kotlin/backend/common/serialization/mangle/ir/IrB") -> false
  path.startsWith("org/jetbrains/kotlin/backend/common/serialization/mangle/ir/IrExportCheckerVisitorK") -> false
  path.startsWith("org/jetbrains/kotlin/backend/common/serialization/metadata/KlibMetadataSerializerK") -> false
  path.startsWith("org/jetbrains/kotlin/backend/common/serialization/metadata/i") -> false
  path.startsWith("org/jetbrains/kotlin/backend/common/serialization/signature/D") -> false
  path.startsWith("org/jetbrains/kotlin/backend/common/serialization/signature/IdSignatureB") -> false
  path.startsWith("org/jetbrains/kotlin/backend/common/serialization/signature/IdSignatureC") -> false
  path.startsWith("org/jetbrains/kotlin/backend/jvm/A") -> false
  path.startsWith("org/jetbrains/kotlin/backend/jvm/En") -> false
  path.startsWith("org/jetbrains/kotlin/backend/jvm/Intr") -> false
  path.startsWith("org/jetbrains/kotlin/backend/jvm/IrPropertyOrIrField.") -> false
  path.startsWith("org/jetbrains/kotlin/backend/jvm/JvmIrSerializer.") -> false
  path.startsWith("org/jetbrains/kotlin/backend/jvm/JvmSharedVariablesManagerK") -> false
  path.startsWith("org/jetbrains/kotlin/backend/jvm/P") -> false
  path.startsWith("org/jetbrains/kotlin/backend/jvm/Sp") -> false
  path.startsWith("org/jetbrains/kotlin/backend/jvm/caches/S") -> false
  path.startsWith("org/jetbrains/kotlin/backend/jvm/codegen/Bl") -> false
  path.startsWith("org/jetbrains/kotlin/backend/jvm/codegen/ExpressionI") -> false
  path.startsWith("org/jetbrains/kotlin/backend/jvm/codegen/G") -> false
  path.startsWith("org/jetbrains/kotlin/backend/jvm/codegen/IrSourceCompilerForInlineK") -> false
  path.startsWith("org/jetbrains/kotlin/backend/jvm/codegen/Lo") -> false
  path.startsWith("org/jetbrains/kotlin/backend/jvm/codegen/V") -> false
  path.startsWith("org/jetbrains/kotlin/backend/jvm/extensions/ClassGenerator.") -> false
  path.startsWith("org/jetbrains/kotlin/backend/jvm/ir/IrArrayE") -> false
  path.startsWith("org/jetbrains/kotlin/backend/jvm/ir/IrJvmFlexibleType.") -> false
  path.startsWith("org/jetbrains/kotlin/backend/jvm/lower/AssertionS") -> false
  path.startsWith("org/jetbrains/kotlin/backend/jvm/lower/Da") -> false
  path.startsWith("org/jetbrains/kotlin/backend/jvm/lower/El") -> false
  path.startsWith("org/jetbrains/kotlin/backend/jvm/lower/Sa") -> false
  path.startsWith("org/jetbrains/kotlin/backend/jvm/lower/ScriptFixLambdasTransformerC") -> false
  path.startsWith("org/jetbrains/kotlin/backend/jvm/lower/ScriptToClassTransformerC") -> false
  path.startsWith("org/jetbrains/kotlin/backend/jvm/lower/ScriptsToClassesS") -> false
  path.startsWith("org/jetbrains/kotlin/backend/jvm/lower/UpdateF") -> false
  path.startsWith("org/jetbrains/kotlin/backend/jvm/lower/indy/LambdaMetafactoryArguments.") -> false
  path.startsWith("org/jetbrains/kotlin/backend/jvm/lower/indy/N") -> false
  path.startsWith("org/jetbrains/kotlin/backend/jvm/lower/indy/R") -> false
  path.startsWith("org/jetbrains/kotlin/backend/jvm/lower/indy/SamDelegatingLambdaBl") -> false
  path.startsWith("org/jetbrains/kotlin/backend/jvm/mapping/IrC") -> false
  path.startsWith("org/jetbrains/kotlin/backend/jvm/mapping/P") -> false
  path.startsWith("org/jetbrains/kotlin/backend/jvm/metadata/M") -> false
  path.startsWith("org/jetbrains/kotlin/backend/jvm/serialization/I") -> false
  path.startsWith("org/jetbrains/kotlin/backend/wasm/WasmC") -> false
  path.startsWith("org/jetbrains/kotlin/backend/wasm/ir2wasm/S") -> false
  path.startsWith("org/jetbrains/kotlin/backend/wasm/lower/JsInteropFunctionsLoweringK") -> false
  path.startsWith("org/jetbrains/kotlin/backend/wasm/lower/O") -> false
  path.startsWith("org/jetbrains/kotlin/backend/wasm/utils/U") -> false
  path.startsWith("org/jetbrains/kotlin/cfg/Bl") -> false
  path.startsWith("org/jetbrains/kotlin/cfg/ControlFlowInfo.") -> false
  path.startsWith("org/jetbrains/kotlin/cfg/ControlFlowInformationProvider.") -> false
  path.startsWith("org/jetbrains/kotlin/cfg/ControlFlowProcessorK") -> false
  path.startsWith("org/jetbrains/kotlin/cfg/G") -> false
  path.startsWith("org/jetbrains/kotlin/cfg/R") -> false
  path.startsWith("org/jetbrains/kotlin/cfg/TailR") -> false
  path.startsWith("org/jetbrains/kotlin/cfg/WhenCheckerK") -> false
  path.startsWith("org/jetbrains/kotlin/cfg/pseudocode/S") -> false
  path.startsWith("org/jetbrains/kotlin/cfg/pseudocode/instructions/eval/AccessTarget\$B") -> false
  path.startsWith("org/jetbrains/kotlin/cfg/pseudocode/instructions/eval/AccessTarget\$D") -> false
  path.startsWith("org/jetbrains/kotlin/cfg/pseudocode/instructions/eval/AccessTarget.") -> false
  path.startsWith("org/jetbrains/kotlin/cfg/pseudocode/instructions/eval/MagicK") -> false
  path.startsWith("org/jetbrains/kotlin/cfg/pseudocodeTraverser/E") -> false
  path.startsWith("org/jetbrains/kotlin/cfg/variable/I") -> false
  path.startsWith("org/jetbrains/kotlin/cfg/variable/U") -> false
  path.startsWith("org/jetbrains/kotlin/checkers/Ab") -> false
  path.startsWith("org/jetbrains/kotlin/checkers/utils/Diagnostics") -> false
  path.startsWith("org/jetbrains/kotlin/checkers/utils/T") -> false
  path.startsWith("org/jetbrains/kotlin/cli/common/CLICompilerK") -> false
  path.startsWith("org/jetbrains/kotlin/cli/common/CLICon") -> false
  path.startsWith("org/jetbrains/kotlin/cli/common/Cl") -> false
  path.startsWith("org/jetbrains/kotlin/cli/common/E") -> false
  path.startsWith("org/jetbrains/kotlin/cli/common/Ga") -> false
  path.startsWith("org/jetbrains/kotlin/cli/common/GroupedKtSources.") -> false
  path.startsWith("org/jetbrains/kotlin/cli/common/J") -> false
  path.startsWith("org/jetbrains/kotlin/cli/common/en") -> false
  path.startsWith("org/jetbrains/kotlin/cli/common/messages/F") -> false
  path.startsWith("org/jetbrains/kotlin/cli/common/messages/MessageCollector.") -> false
  path.startsWith("org/jetbrains/kotlin/cli/common/messages/MessageCollectorU") -> false
  path.startsWith("org/jetbrains/kotlin/cli/js/D") -> false
  path.startsWith("org/jetbrains/kotlin/cli/jvm/compiler/CompileEnvironmentE") -> false
  path.startsWith("org/jetbrains/kotlin/cli/jvm/compiler/E") -> false
  path.startsWith("org/jetbrains/kotlin/cli/jvm/compiler/jarfs/B") -> false
  path.startsWith("org/jetbrains/kotlin/cli/jvm/compiler/jarfs/FastJarHandlerK") -> false
  path.startsWith("org/jetbrains/kotlin/cli/jvm/compiler/jarfs/FastJarVirtualFileK") -> false
  path.startsWith("org/jetbrains/kotlin/cli/jvm/config/C") -> false
  path.startsWith("org/jetbrains/kotlin/cli/jvm/config/Ja") -> false
  path.startsWith("org/jetbrains/kotlin/cli/jvm/config/JvmContentRoot.") -> false
  path.startsWith("org/jetbrains/kotlin/cli/jvm/config/JvmContentRootB") -> false
  path.startsWith("org/jetbrains/kotlin/cli/jvm/config/JvmM") -> false
  path.startsWith("org/jetbrains/kotlin/cli/jvm/config/K") -> false
  path.startsWith("org/jetbrains/kotlin/cli/jvm/javac/M") -> false
  path.startsWith("org/jetbrains/kotlin/cli/jvm/modules/JavaV") -> false
  path.startsWith("org/jetbrains/kotlin/cli/metadata/MetadataU") -> false
  path.startsWith("org/jetbrains/kotlin/codegen/AbstractA") -> false
  path.startsWith("org/jetbrains/kotlin/codegen/AccessorK") -> false
  path.startsWith("org/jetbrains/kotlin/codegen/ArgumentGeneratorK") -> false
  path.startsWith("org/jetbrains/kotlin/codegen/BaseExpressionCodegen.") -> false
  path.startsWith("org/jetbrains/kotlin/codegen/Bri") -> false
  path.startsWith("org/jetbrains/kotlin/codegen/ClassBuilderM") -> false
  path.startsWith("org/jetbrains/kotlin/codegen/CollectionStubMethodGeneratorK") -> false
  path.startsWith("org/jetbrains/kotlin/codegen/Comm") -> false
  path.startsWith("org/jetbrains/kotlin/codegen/Ir") -> false
  path.startsWith("org/jetbrains/kotlin/codegen/JvmK") -> false
  path.startsWith("org/jetbrains/kotlin/codegen/PackageCodegen.") -> false
  path.startsWith("org/jetbrains/kotlin/codegen/Ps") -> false
  path.startsWith("org/jetbrains/kotlin/codegen/SamC") -> false
  path.startsWith("org/jetbrains/kotlin/codegen/Stat") -> false
  path.startsWith("org/jetbrains/kotlin/codegen/SyntheticA") -> false
  path.startsWith("org/jetbrains/kotlin/codegen/SyntheticI") -> false
  path.startsWith("org/jetbrains/kotlin/codegen/context/Del") -> false
  path.startsWith("org/jetbrains/kotlin/codegen/context/LocalLookup\$1") -> false
  path.startsWith("org/jetbrains/kotlin/codegen/context/LocalLookup.") -> false
  path.startsWith("org/jetbrains/kotlin/codegen/context/ScriptContextK") -> false
  path.startsWith("org/jetbrains/kotlin/codegen/coroutines/CoroutineCon") -> false
  path.startsWith("org/jetbrains/kotlin/codegen/coroutines/Fr") -> false
  path.startsWith("org/jetbrains/kotlin/codegen/coroutines/Il") -> false
  path.startsWith("org/jetbrains/kotlin/codegen/coroutines/Spilla") -> false
  path.startsWith("org/jetbrains/kotlin/codegen/coroutines/SuspensionPointK") -> false
  path.startsWith("org/jetbrains/kotlin/codegen/coroutines/UnitV") -> false
  path.startsWith("org/jetbrains/kotlin/codegen/inline/Aload0B") -> false
  path.startsWith("org/jetbrains/kotlin/codegen/inline/CapturedParamD") -> false
  path.startsWith("org/jetbrains/kotlin/codegen/inline/Con") -> false
  path.startsWith("org/jetbrains/kotlin/codegen/inline/DefaultV") -> false
  path.startsWith("org/jetbrains/kotlin/codegen/inline/Defe") -> false
  path.startsWith("org/jetbrains/kotlin/codegen/inline/Ext") -> false
  path.startsWith("org/jetbrains/kotlin/codegen/inline/FieldS") -> false
  path.startsWith("org/jetbrains/kotlin/codegen/inline/FunctionalArgument.") -> false
  path.startsWith("org/jetbrains/kotlin/codegen/inline/FunctionalArgumentV") -> false
  path.startsWith("org/jetbrains/kotlin/codegen/inline/InlineCacheK") -> false
  path.startsWith("org/jetbrains/kotlin/codegen/inline/InlineCal") -> false
  path.startsWith("org/jetbrains/kotlin/codegen/inline/InlineE") -> false
  path.startsWith("org/jetbrains/kotlin/codegen/inline/InlineM") -> false
  path.startsWith("org/jetbrains/kotlin/codegen/inline/InplaceArgumentsMethodTransformerK") -> false
  path.startsWith("org/jetbrains/kotlin/codegen/inline/Inv") -> false
  path.startsWith("org/jetbrains/kotlin/codegen/inline/MethodB") -> false
  path.startsWith("org/jetbrains/kotlin/codegen/inline/MethodId") -> false
  path.startsWith("org/jetbrains/kotlin/codegen/inline/Pr") -> false
  path.startsWith("org/jetbrains/kotlin/codegen/inline/PsiInlineCodegenK") -> false
  path.startsWith("org/jetbrains/kotlin/codegen/inline/Reific") -> false
  path.startsWith("org/jetbrains/kotlin/codegen/inline/ReifiedTypeP") -> false
  path.startsWith("org/jetbrains/kotlin/codegen/inline/Sk") -> false
  path.startsWith("org/jetbrains/kotlin/codegen/inline/SourceP") -> false
  path.startsWith("org/jetbrains/kotlin/codegen/inline/TryCatchP") -> false
  path.startsWith("org/jetbrains/kotlin/codegen/inline/TypeParameterMapping.") -> false
  path.startsWith("org/jetbrains/kotlin/codegen/inline/coroutines/P") -> false
  path.startsWith("org/jetbrains/kotlin/codegen/intrinsics/EqualsK") -> false
  path.startsWith("org/jetbrains/kotlin/codegen/intrinsics/Ty") -> false
  path.startsWith("org/jetbrains/kotlin/codegen/optimization/CapturedVarsOptimizationMethodTransformerK") -> false
  path.startsWith("org/jetbrains/kotlin/codegen/optimization/LabelNormalizationMethodTransformerK") -> false
  path.startsWith("org/jetbrains/kotlin/codegen/optimization/common/M") -> false
  path.startsWith("org/jetbrains/kotlin/codegen/optimization/common/P") -> false
  path.startsWith("org/jetbrains/kotlin/codegen/optimization/common/ReferenceV") -> false
  path.startsWith("org/jetbrains/kotlin/codegen/optimization/common/VarF") -> false
  path.startsWith("org/jetbrains/kotlin/codegen/optimization/common/VariableLivenessF") -> false
  path.startsWith("org/jetbrains/kotlin/codegen/optimization/fixStack/D") -> false
  path.startsWith("org/jetbrains/kotlin/codegen/optimization/nullCheck/NullB") -> false
  path.startsWith("org/jetbrains/kotlin/codegen/optimization/nullCheck/Nullability.") -> false
  path.startsWith("org/jetbrains/kotlin/codegen/optimization/nullCheck/NullabilityInterpreterK") -> false
  path.startsWith("org/jetbrains/kotlin/codegen/optimization/nullCheck/NullabilityV") -> false
  path.startsWith("org/jetbrains/kotlin/codegen/optimization/nullCheck/RedundantNullCheckMethodTransformerK") -> false
  path.startsWith("org/jetbrains/kotlin/codegen/optimization/temporaryVals/TemporaryVal.") -> false
  path.startsWith("org/jetbrains/kotlin/codegen/range/comparison/ComparisonGenerator.") -> false
  path.startsWith("org/jetbrains/kotlin/codegen/range/comparison/L") -> false
  path.startsWith("org/jetbrains/kotlin/codegen/range/comparison/O") -> false
  path.startsWith("org/jetbrains/kotlin/codegen/range/comparison/R") -> false
  path.startsWith("org/jetbrains/kotlin/codegen/range/comparison/S") -> false
  path.startsWith("org/jetbrains/kotlin/codegen/serialization/JvmC") -> false
  path.startsWith("org/jetbrains/kotlin/codegen/signature/A") -> false
  path.startsWith("org/jetbrains/kotlin/codegen/signature/J") -> false
  path.startsWith("org/jetbrains/kotlin/codegen/state/BuilderFactoryForDuplicateSignatureDiagnosticsK") -> false
  path.startsWith("org/jetbrains/kotlin/codegen/state/Inf") -> false
  path.startsWith("org/jetbrains/kotlin/codegen/state/J") -> false
  path.startsWith("org/jetbrains/kotlin/codegen/state/KotlinTypeMapperB") -> false
  path.startsWith("org/jetbrains/kotlin/codegen/state/R") -> false
  path.startsWith("org/jetbrains/kotlin/codegen/state/SignatureDumpingBuilderFactoryK") -> false
  path.startsWith("org/jetbrains/kotlin/codegen/when/W") -> false
  path.startsWith("org/jetbrains/kotlin/compiler/plugin/A") -> false
  path.startsWith("org/jetbrains/kotlin/compiler/plugin/E") -> false
  path.startsWith("org/jetbrains/kotlin/contracts/ESD") -> false
  path.startsWith("org/jetbrains/kotlin/contracts/ESR") -> false
  path.startsWith("org/jetbrains/kotlin/contracts/ESV") -> false
  path.startsWith("org/jetbrains/kotlin/contracts/parsing/Contracts") -> false
  path.startsWith("org/jetbrains/kotlin/cor") -> false
  path.startsWith("org/jetbrains/kotlin/daemon/CompileServiceImplK") -> false
  path.startsWith("org/jetbrains/kotlin/daemon/KotlinCompileDaemonK") -> false
  path.startsWith("org/jetbrains/kotlin/daemon/report/B") -> false
  path.startsWith("org/jetbrains/kotlin/daemon/report/CompileI") -> false
  path.startsWith("org/jetbrains/kotlin/daemon/report/Compo") -> false
  path.startsWith("org/jetbrains/kotlin/daemon/report/R") -> false
  path.startsWith("org/jetbrains/kotlin/descriptors/Del") -> false
  path.startsWith("org/jetbrains/kotlin/descriptors/DescriptorU") -> false
  path.startsWith("org/jetbrains/kotlin/descriptors/annotations/AnnotationA") -> false
  path.startsWith("org/jetbrains/kotlin/descriptors/annotations/AnnotationW") -> false
  path.startsWith("org/jetbrains/kotlin/descriptors/annotations/T") -> false
  path.startsWith("org/jetbrains/kotlin/diagnostics/DiagnosticFactory\$") -> false
  path.startsWith("org/jetbrains/kotlin/diagnostics/DiagnosticFactory.") -> false
  path.startsWith("org/jetbrains/kotlin/diagnostics/Du") -> false
  path.startsWith("org/jetbrains/kotlin/diagnostics/G") -> false
  path.startsWith("org/jetbrains/kotlin/diagnostics/I") -> false
  path.startsWith("org/jetbrains/kotlin/diagnostics/OffsetsOnlyPositioningStrategyK") -> false
  path.startsWith("org/jetbrains/kotlin/diagnostics/Se") -> false
  path.startsWith("org/jetbrains/kotlin/diagnostics/T") -> false
  path.startsWith("org/jetbrains/kotlin/diagnostics/Unb") -> false
  path.startsWith("org/jetbrains/kotlin/diagnostics/UnreachableCodeLightTreeHelperK") -> false
  path.startsWith("org/jetbrains/kotlin/diagnostics/rendering/Dec") -> false
  path.startsWith("org/jetbrains/kotlin/diagnostics/rendering/DiagnosticRenderer.") -> false
  path.startsWith("org/jetbrains/kotlin/diagnostics/rendering/DiagnosticRendererU") -> false
  path.startsWith("org/jetbrains/kotlin/diagnostics/rendering/MultiR") -> false
  path.startsWith("org/jetbrains/kotlin/diagnostics/rendering/RenderersK") -> false
  path.startsWith("org/jetbrains/kotlin/diagnostics/rendering/RenderingContext.") -> false
  path.startsWith("org/jetbrains/kotlin/extensions/internal/I") -> false
  path.startsWith("org/jetbrains/kotlin/fileClasses/JvmFileClassI") -> false
  path.startsWith("org/jetbrains/kotlin/fileClasses/JvmFileClasse") -> false
  path.startsWith("org/jetbrains/kotlin/fileClasses/JvmM") -> false
  path.startsWith("org/jetbrains/kotlin/fileClasses/JvmS") -> false
  path.startsWith("org/jetbrains/kotlin/fileClasses/N") -> false
  path.startsWith("org/jetbrains/kotlin/fileClasses/O") -> false
  path.startsWith("org/jetbrains/kotlin/fileClasses/P") -> false
  path.startsWith("org/jetbrains/kotlin/fir/Con") -> false
  path.startsWith("org/jetbrains/kotlin/fir/Cor") -> false
  path.startsWith("org/jetbrains/kotlin/fir/DelegatedWrapperDataK") -> false
  path.startsWith("org/jetbrains/kotlin/fir/FirCo") -> false
  path.startsWith("org/jetbrains/kotlin/fir/FirEnumWhenTrackerComponent.") -> false
  path.startsWith("org/jetbrains/kotlin/fir/FirImpl") -> false
  path.startsWith("org/jetbrains/kotlin/fir/FirImportTrackerComponent.") -> false
  path.startsWith("org/jetbrains/kotlin/fir/FirLanguageSettingsComponent.") -> false
  path.startsWith("org/jetbrains/kotlin/fir/FirSessionC") -> false
  path.startsWith("org/jetbrains/kotlin/fir/H") -> false
  path.startsWith("org/jetbrains/kotlin/fir/Ini") -> false
  path.startsWith("org/jetbrains/kotlin/fir/Int") -> false
  path.startsWith("org/jetbrains/kotlin/fir/N") -> false
  path.startsWith("org/jetbrains/kotlin/fir/Ow") -> false
  path.startsWith("org/jetbrains/kotlin/fir/Priv") -> false
  path.startsWith("org/jetbrains/kotlin/fir/Se") -> false
  path.startsWith("org/jetbrains/kotlin/fir/Su") -> false
  path.startsWith("org/jetbrains/kotlin/fir/T") -> false
  path.startsWith("org/jetbrains/kotlin/fir/analysis/CheckersComponentI") -> false
  path.startsWith("org/jetbrains/kotlin/fir/analysis/cfa/FirCallsEffectAnalyzerK") -> false
  path.startsWith("org/jetbrains/kotlin/fir/analysis/cfa/util/Co") -> false
  path.startsWith("org/jetbrains/kotlin/fir/analysis/cfa/util/E") -> false
  path.startsWith("org/jetbrains/kotlin/fir/analysis/cfa/util/PathAwareControlFlowGraphVisitorK") -> false
  path.startsWith("org/jetbrains/kotlin/fir/analysis/cfa/util/PropertyInitializationInfoCollectorK") -> false
  path.startsWith("org/jetbrains/kotlin/fir/analysis/cfa/util/PropertyInitializationInfoK") -> false
  path.startsWith("org/jetbrains/kotlin/fir/analysis/cfa/util/T") -> false
  path.startsWith("org/jetbrains/kotlin/fir/analysis/checkers/Ca") -> false
  path.startsWith("org/jetbrains/kotlin/fir/analysis/checkers/Cons") -> false
  path.startsWith("org/jetbrains/kotlin/fir/analysis/checkers/FirSinceKotlinAccessibility\$A") -> false
  path.startsWith("org/jetbrains/kotlin/fir/analysis/checkers/FirSinceKotlinAccessibility\$NotAccessible.") -> false
  path.startsWith("org/jetbrains/kotlin/fir/analysis/checkers/FirSinceKotlinAccessibility.") -> false
  path.startsWith("org/jetbrains/kotlin/fir/analysis/checkers/Or") -> false
  path.startsWith("org/jetbrains/kotlin/fir/analysis/checkers/declaration/FirDeclarationCheckerA") -> false
  path.startsWith("org/jetbrains/kotlin/fir/analysis/checkers/expression/FirExpressionCheckerA") -> false
  path.startsWith("org/jetbrains/kotlin/fir/analysis/checkers/expression/S") -> false
  path.startsWith("org/jetbrains/kotlin/fir/analysis/checkers/expression/T") -> false
  path.startsWith("org/jetbrains/kotlin/fir/analysis/checkers/extended/UnusedCheckerK") -> false
  path.startsWith("org/jetbrains/kotlin/fir/analysis/checkers/type/FirTypeCheckerA") -> false
  path.startsWith("org/jetbrains/kotlin/fir/analysis/js/checkers/FirJsModuleK") -> false
  path.startsWith("org/jetbrains/kotlin/fir/analysis/js/checkers/expression/FirJsDynamicCallCheckerK") -> false
  path.startsWith("org/jetbrains/kotlin/fir/backend/CodeFragmentT") -> false
  path.startsWith("org/jetbrains/kotlin/fir/backend/ConversionT") -> false
  path.startsWith("org/jetbrains/kotlin/fir/backend/D") -> false
  path.startsWith("org/jetbrains/kotlin/fir/backend/PrimitiveCon") -> false
  path.startsWith("org/jetbrains/kotlin/fir/backend/jvm/FirJvmV") -> false
  path.startsWith("org/jetbrains/kotlin/fir/builder/Ch") -> false
  path.startsWith("org/jetbrains/kotlin/fir/caches/FirCache.") -> false
  path.startsWith("org/jetbrains/kotlin/fir/caches/FirCacheW") -> false
  path.startsWith("org/jetbrains/kotlin/fir/caches/FirCachesFactory.") -> false
  path.startsWith("org/jetbrains/kotlin/fir/caches/FirL") -> false
  path.startsWith("org/jetbrains/kotlin/fir/contracts/description/ConeContractC") -> false
  path.startsWith("org/jetbrains/kotlin/fir/contracts/description/ConeV") -> false
  path.startsWith("org/jetbrains/kotlin/fir/declarations/DelegateFieldsMapKe") -> false
  path.startsWith("org/jetbrains/kotlin/fir/declarations/Em") -> false
  path.startsWith("org/jetbrains/kotlin/fir/declarations/ExpectF") -> false
  path.startsWith("org/jetbrains/kotlin/fir/declarations/FirDeclarationDataK") -> false
  path.startsWith("org/jetbrains/kotlin/fir/declarations/FirPropertyB") -> false
  path.startsWith("org/jetbrains/kotlin/fir/declarations/FirResolveState.") -> false
  path.startsWith("org/jetbrains/kotlin/fir/declarations/FirTypeSpecificityComparatorProvider.") -> false
  path.startsWith("org/jetbrains/kotlin/fir/declarations/FirValueClassRepresentationKe") -> false
  path.startsWith("org/jetbrains/kotlin/fir/declarations/FirVersionRequirementsTableKey.") -> false
  path.startsWith("org/jetbrains/kotlin/fir/declarations/Fu") -> false
  path.startsWith("org/jetbrains/kotlin/fir/declarations/In") -> false
  path.startsWith("org/jetbrains/kotlin/fir/declarations/Is") -> false
  path.startsWith("org/jetbrains/kotlin/fir/declarations/SealedClassInheritorsKe") -> false
  path.startsWith("org/jetbrains/kotlin/fir/declarations/SealedClassInheritorsProviderIn") -> false
  path.startsWith("org/jetbrains/kotlin/fir/declarations/Si") -> false
  path.startsWith("org/jetbrains/kotlin/fir/declarations/U") -> false
  path.startsWith("org/jetbrains/kotlin/fir/declarations/utils/C") -> false
  path.startsWith("org/jetbrains/kotlin/fir/declarations/utils/DanglingTypeConstraints") -> false
  path.startsWith("org/jetbrains/kotlin/fir/declarations/utils/M") -> false
  path.startsWith("org/jetbrains/kotlin/fir/declarations/utils/S") -> false
  path.startsWith("org/jetbrains/kotlin/fir/descriptors/FirB") -> false
  path.startsWith("org/jetbrains/kotlin/fir/deserialization/AbstractFirDeserializedSymbolProviderK") -> false
  path.startsWith("org/jetbrains/kotlin/fir/diagnostics/ConeDa") -> false
  path.startsWith("org/jetbrains/kotlin/fir/diagnostics/ConeDe") -> false
  path.startsWith("org/jetbrains/kotlin/fir/diagnostics/ConeDiagnostic.") -> false
  path.startsWith("org/jetbrains/kotlin/fir/diagnostics/ConeDiagnosticWithN") -> false
  path.startsWith("org/jetbrains/kotlin/fir/diagnostics/ConeI") -> false
  path.startsWith("org/jetbrains/kotlin/fir/diagnostics/ConeN") -> false
  path.startsWith("org/jetbrains/kotlin/fir/diagnostics/ConeR") -> false
  path.startsWith("org/jetbrains/kotlin/fir/diagnostics/ConeT") -> false
  path.startsWith("org/jetbrains/kotlin/fir/diagnostics/ConeUns") -> false
  path.startsWith("org/jetbrains/kotlin/fir/diagnostics/D") -> false
  path.startsWith("org/jetbrains/kotlin/fir/expressions/ExhaustivenessStatus.") -> false
  path.startsWith("org/jetbrains/kotlin/fir/expressions/FirAnnotationR") -> false
  path.startsWith("org/jetbrains/kotlin/fir/expressions/FirFunctionCallO") -> false
  path.startsWith("org/jetbrains/kotlin/fir/extensions/FirDeclarationP") -> false
  path.startsWith("org/jetbrains/kotlin/fir/extensions/FirExtensionA") -> false
  path.startsWith("org/jetbrains/kotlin/fir/extensions/FirExtensionK") -> false
  path.startsWith("org/jetbrains/kotlin/fir/extensions/FirExtensionP") -> false
  path.startsWith("org/jetbrains/kotlin/fir/extensions/P") -> false
  path.startsWith("org/jetbrains/kotlin/fir/java/FirJavaT") -> false
  path.startsWith("org/jetbrains/kotlin/fir/java/FirJv") -> false
  path.startsWith("org/jetbrains/kotlin/fir/java/declarations/U") -> false
  path.startsWith("org/jetbrains/kotlin/fir/java/deserialization/P") -> false
  path.startsWith("org/jetbrains/kotlin/fir/lightTree/LightTreeParsingErrorListener.") -> false
  path.startsWith("org/jetbrains/kotlin/fir/resolve/Co") -> false
  path.startsWith("org/jetbrains/kotlin/fir/resolve/FirJavaS") -> false
  path.startsWith("org/jetbrains/kotlin/fir/resolve/FirTo") -> false
  path.startsWith("org/jetbrains/kotlin/fir/resolve/FirTypeResolu") -> false
  path.startsWith("org/jetbrains/kotlin/fir/resolve/ImplicitIntegerCoercionM") -> false
  path.startsWith("org/jetbrains/kotlin/fir/resolve/calls/Am") -> false
  path.startsWith("org/jetbrains/kotlin/fir/resolve/calls/CandidateCh") -> false
  path.startsWith("org/jetbrains/kotlin/fir/resolve/calls/CheckerSink.") -> false
  path.startsWith("org/jetbrains/kotlin/fir/resolve/calls/CheckerSinkK") -> false
  path.startsWith("org/jetbrains/kotlin/fir/resolve/calls/ConeOverloadConflictResolverK") -> false
  path.startsWith("org/jetbrains/kotlin/fir/resolve/calls/Er") -> false
  path.startsWith("org/jetbrains/kotlin/fir/resolve/calls/FirSyntheticNamesProvider.") -> false
  path.startsWith("org/jetbrains/kotlin/fir/resolve/calls/H") -> false
  path.startsWith("org/jetbrains/kotlin/fir/resolve/calls/InapplicableC") -> false
  path.startsWith("org/jetbrains/kotlin/fir/resolve/calls/InapplicableW") -> false
  path.startsWith("org/jetbrains/kotlin/fir/resolve/calls/LowerPriorityF") -> false
  path.startsWith("org/jetbrains/kotlin/fir/resolve/calls/LowerPriorityT") -> false
  path.startsWith("org/jetbrains/kotlin/fir/resolve/calls/Mu") -> false
  path.startsWith("org/jetbrains/kotlin/fir/resolve/calls/NoA") -> false
  path.startsWith("org/jetbrains/kotlin/fir/resolve/calls/NoC") -> false
  path.startsWith("org/jetbrains/kotlin/fir/resolve/calls/Prop") -> false
  path.startsWith("org/jetbrains/kotlin/fir/resolve/calls/ResolutionD") -> false
  path.startsWith("org/jetbrains/kotlin/fir/resolve/calls/ResolvedCallArgumentK") -> false
  path.startsWith("org/jetbrains/kotlin/fir/resolve/calls/Unsa") -> false
  path.startsWith("org/jetbrains/kotlin/fir/resolve/calls/Unsuc") -> false
  path.startsWith("org/jetbrains/kotlin/fir/resolve/calls/UnsupportedC") -> false
  path.startsWith("org/jetbrains/kotlin/fir/resolve/calls/VarargM") -> false
  path.startsWith("org/jetbrains/kotlin/fir/resolve/calls/VisibilityE") -> false
  path.startsWith("org/jetbrains/kotlin/fir/resolve/calls/tower/InvokeRes") -> false
  path.startsWith("org/jetbrains/kotlin/fir/resolve/calls/tower/P") -> false
  path.startsWith("org/jetbrains/kotlin/fir/resolve/dfa/DataFlowV") -> false
  path.startsWith("org/jetbrains/kotlin/fir/resolve/dfa/DfaI") -> false
  path.startsWith("org/jetbrains/kotlin/fir/resolve/dfa/FlowK") -> false
  path.startsWith("org/jetbrains/kotlin/fir/resolve/dfa/FlowPath\$D") -> false
  path.startsWith("org/jetbrains/kotlin/fir/resolve/dfa/FlowPath.") -> false
  path.startsWith("org/jetbrains/kotlin/fir/resolve/dfa/Im") -> false
  path.startsWith("org/jetbrains/kotlin/fir/resolve/dfa/Pro") -> false
  path.startsWith("org/jetbrains/kotlin/fir/resolve/dfa/cfg/Cf") -> false
  path.startsWith("org/jetbrains/kotlin/fir/resolve/dfa/cfg/EnterN") -> false
  path.startsWith("org/jetbrains/kotlin/fir/resolve/dfa/cfg/ExitN") -> false
  path.startsWith("org/jetbrains/kotlin/fir/resolve/dfa/cfg/N") -> false
  path.startsWith("org/jetbrains/kotlin/fir/resolve/dfa/cfg/U") -> false
  path.startsWith("org/jetbrains/kotlin/fir/resolve/diagnostics/ConeAmbiguousA") -> false
  path.startsWith("org/jetbrains/kotlin/fir/resolve/diagnostics/ConeAmbiguouslyResolvedAnnotationF") -> false
  path.startsWith("org/jetbrains/kotlin/fir/resolve/diagnostics/ConeContractDescriptionError\$IllegalEq") -> false
  path.startsWith("org/jetbrains/kotlin/fir/resolve/diagnostics/ConeContractDescriptionError\$NoA") -> false
  path.startsWith("org/jetbrains/kotlin/fir/resolve/diagnostics/ConeContractDescriptionError\$NoR") -> false
  path.startsWith("org/jetbrains/kotlin/fir/resolve/diagnostics/ConeContractDescriptionError\$NotC") -> false
  path.startsWith("org/jetbrains/kotlin/fir/resolve/diagnostics/ConeContractDescriptionError\$UnresolvedC") -> false
  path.startsWith("org/jetbrains/kotlin/fir/resolve/diagnostics/ConeContractDescriptionError.") -> false
  path.startsWith("org/jetbrains/kotlin/fir/resolve/diagnostics/ConeFo") -> false
  path.startsWith("org/jetbrains/kotlin/fir/resolve/diagnostics/ConeFunctionE") -> false
  path.startsWith("org/jetbrains/kotlin/fir/resolve/diagnostics/ConeIl") -> false
  path.startsWith("org/jetbrains/kotlin/fir/resolve/diagnostics/ConeIm") -> false
  path.startsWith("org/jetbrains/kotlin/fir/resolve/diagnostics/ConeIns") -> false
  path.startsWith("org/jetbrains/kotlin/fir/resolve/diagnostics/ConeNoCon") -> false
  path.startsWith("org/jetbrains/kotlin/fir/resolve/diagnostics/ConeUnk") -> false
  path.startsWith("org/jetbrains/kotlin/fir/resolve/diagnostics/ConeUnresolvedE") -> false
  path.startsWith("org/jetbrains/kotlin/fir/resolve/diagnostics/ConeUnresolvedN") -> false
  path.startsWith("org/jetbrains/kotlin/fir/resolve/diagnostics/ConeUnresolvedP") -> false
  path.startsWith("org/jetbrains/kotlin/fir/resolve/diagnostics/ConeUnresolvedR") -> false
  path.startsWith("org/jetbrains/kotlin/fir/resolve/diagnostics/ConeUnresolvedS") -> false
  path.startsWith("org/jetbrains/kotlin/fir/resolve/diagnostics/ConeVa") -> false
  path.startsWith("org/jetbrains/kotlin/fir/resolve/inference/ConeTypeVariableForLambdaP") -> false
  path.startsWith("org/jetbrains/kotlin/fir/resolve/inference/ConeTypeVariableForP") -> false
  path.startsWith("org/jetbrains/kotlin/fir/resolve/inference/Inp") -> false
  path.startsWith("org/jetbrains/kotlin/fir/resolve/inference/model/ConeB") -> false
  path.startsWith("org/jetbrains/kotlin/fir/resolve/inference/model/ConeD") -> false
  path.startsWith("org/jetbrains/kotlin/fir/resolve/inference/model/ConeExpe") -> false
  path.startsWith("org/jetbrains/kotlin/fir/resolve/inference/model/ConeF") -> false
  path.startsWith("org/jetbrains/kotlin/fir/resolve/providers/FirCachedSymbolNamesProviderK") -> false
  path.startsWith("org/jetbrains/kotlin/fir/resolve/providers/FirE") -> false
  path.startsWith("org/jetbrains/kotlin/fir/resolve/providers/FirN") -> false
  path.startsWith("org/jetbrains/kotlin/fir/resolve/providers/FirSymbolProviderI") -> false
  path.startsWith("org/jetbrains/kotlin/fir/resolve/substitution/Ch") -> false
  path.startsWith("org/jetbrains/kotlin/fir/resolve/substitution/ConeSubstitutor\$") -> false
  path.startsWith("org/jetbrains/kotlin/fir/resolve/substitution/ConeSubstitutor.") -> false
  path.startsWith("org/jetbrains/kotlin/fir/resolve/substitution/ConeSubstitutorK") -> false
  path.startsWith("org/jetbrains/kotlin/fir/resolve/substitution/NoS") -> false
  path.startsWith("org/jetbrains/kotlin/fir/resolve/transformers/Ad") -> false
  path.startsWith("org/jetbrains/kotlin/fir/resolve/transformers/B") -> false
  path.startsWith("org/jetbrains/kotlin/fir/resolve/transformers/ExpectedArgumentType\$E") -> false
  path.startsWith("org/jetbrains/kotlin/fir/resolve/transformers/ExpectedArgumentType\$N") -> false
  path.startsWith("org/jetbrains/kotlin/fir/resolve/transformers/ExpectedArgumentType.") -> false
  path.startsWith("org/jetbrains/kotlin/fir/resolve/transformers/Fo") -> false
  path.startsWith("org/jetbrains/kotlin/fir/resolve/transformers/L") -> false
  path.startsWith("org/jetbrains/kotlin/fir/resolve/transformers/N") -> false
  path.startsWith("org/jetbrains/kotlin/fir/resolve/transformers/PackageResolutionResult\$E") -> false
  path.startsWith("org/jetbrains/kotlin/fir/resolve/transformers/PackageResolutionResult.") -> false
  path.startsWith("org/jetbrains/kotlin/fir/resolve/transformers/Par") -> false
  path.startsWith("org/jetbrains/kotlin/fir/resolve/transformers/Pr") -> false
  path.startsWith("org/jetbrains/kotlin/fir/resolve/transformers/PublishedApiEffectiveVisibilityKe") -> false
  path.startsWith("org/jetbrains/kotlin/fir/resolve/transformers/SupertypeComputationStatus\$Computi") -> false
  path.startsWith("org/jetbrains/kotlin/fir/resolve/transformers/SupertypeComputationStatus\$N") -> false
  path.startsWith("org/jetbrains/kotlin/fir/resolve/transformers/SupertypeComputationStatus.") -> false
  path.startsWith("org/jetbrains/kotlin/fir/resolve/transformers/body/resolve/ImplicitBodyResolveComputationStatus\$Computi") -> false
  path.startsWith("org/jetbrains/kotlin/fir/resolve/transformers/body/resolve/ImplicitBodyResolveComputationStatus\$N") -> false
  path.startsWith("org/jetbrains/kotlin/fir/resolve/transformers/body/resolve/ImplicitBodyResolveComputationStatus.") -> false
  path.startsWith("org/jetbrains/kotlin/fir/resolve/transformers/contracts/FirContracts") -> false
  path.startsWith("org/jetbrains/kotlin/fir/resolve/transformers/plugin/CompilerRequiredAnnotationsH") -> false
  path.startsWith("org/jetbrains/kotlin/fir/resolve/transformers/plugin/FirAnnotationArgumentsResolveTransformerK") -> false
  path.startsWith("org/jetbrains/kotlin/fir/scopes/D") -> false
  path.startsWith("org/jetbrains/kotlin/fir/scopes/FakeOverrideSubstitutionK") -> false
  path.startsWith("org/jetbrains/kotlin/fir/scopes/impl/C") -> false
  path.startsWith("org/jetbrains/kotlin/fir/scopes/impl/FirDynamicScopeC") -> false
  path.startsWith("org/jetbrains/kotlin/fir/scopes/impl/ImportedFromObjectOrStaticC") -> false
  path.startsWith("org/jetbrains/kotlin/fir/scopes/impl/Is") -> false
  path.startsWith("org/jetbrains/kotlin/fir/scopes/impl/M") -> false
  path.startsWith("org/jetbrains/kotlin/fir/scopes/impl/O") -> false
  path.startsWith("org/jetbrains/kotlin/fir/serialization/constant/ConstValueProviderI") -> false
  path.startsWith("org/jetbrains/kotlin/fir/symbols/ConeClassL") -> false
  path.startsWith("org/jetbrains/kotlin/fir/symbols/ConeClassifierLookupTag.") -> false
  path.startsWith("org/jetbrains/kotlin/fir/symbols/FirLazyR") -> false
  path.startsWith("org/jetbrains/kotlin/fir/symbols/impl/FirClassLikeSymbolK") -> false
  path.startsWith("org/jetbrains/kotlin/fir/symbols/impl/L") -> false
  path.startsWith("org/jetbrains/kotlin/fir/types/ConeB") -> false
  path.startsWith("org/jetbrains/kotlin/fir/types/ConeE") -> false
  path.startsWith("org/jetbrains/kotlin/fir/types/ConeIntegerConstantOperatorType.") -> false
  path.startsWith("org/jetbrains/kotlin/fir/types/ConeIntegerLiteralConstantType.") -> false
  path.startsWith("org/jetbrains/kotlin/fir/types/ConeIntegerLiteralI") -> false
  path.startsWith("org/jetbrains/kotlin/fir/types/ConeIntegerLiteralType\$") -> false
  path.startsWith("org/jetbrains/kotlin/fir/types/ConeIntegerLiteralType.") -> false
  path.startsWith("org/jetbrains/kotlin/fir/types/ConeInter") -> false
  path.startsWith("org/jetbrains/kotlin/fir/types/ConeL") -> false
  path.startsWith("org/jetbrains/kotlin/fir/types/ConeTypes") -> false
  path.startsWith("org/jetbrains/kotlin/fir/types/D") -> false
  path.startsWith("org/jetbrains/kotlin/fir/types/P") -> false
  path.startsWith("org/jetbrains/kotlin/fir/types/U") -> false
  path.startsWith("org/jetbrains/kotlin/fir/types/impl/ConeC") -> false
  path.startsWith("org/jetbrains/kotlin/idea/F") -> false
  path.startsWith("org/jetbrains/kotlin/incremental/AbiSnapshot.") -> false
  path.startsWith("org/jetbrains/kotlin/incremental/Ba") -> false
  path.startsWith("org/jetbrains/kotlin/incremental/By") -> false
  path.startsWith("org/jetbrains/kotlin/incremental/Ca") -> false
  path.startsWith("org/jetbrains/kotlin/incremental/CompileS") -> false
  path.startsWith("org/jetbrains/kotlin/incremental/DirtyD") -> false
  path.startsWith("org/jetbrains/kotlin/incremental/F") -> false
  path.startsWith("org/jetbrains/kotlin/incremental/Im") -> false
  path.startsWith("org/jetbrains/kotlin/incremental/IncrementalJsCacheK") -> false
  path.startsWith("org/jetbrains/kotlin/incremental/N") -> false
  path.startsWith("org/jetbrains/kotlin/incremental/U") -> false
  path.startsWith("org/jetbrains/kotlin/incremental/classpathDiff/B") -> false
  path.startsWith("org/jetbrains/kotlin/incremental/classpathDiff/ClassI") -> false
  path.startsWith("org/jetbrains/kotlin/incremental/classpathDiff/E") -> false
  path.startsWith("org/jetbrains/kotlin/incremental/classpathDiff/L") -> false
  path.startsWith("org/jetbrains/kotlin/incremental/js/F") -> false
  path.startsWith("org/jetbrains/kotlin/incremental/js/IncrementalDataProvider.") -> false
  path.startsWith("org/jetbrains/kotlin/incremental/js/IncrementalDataProviderI") -> false
  path.startsWith("org/jetbrains/kotlin/incremental/js/IncrementalN") -> false
  path.startsWith("org/jetbrains/kotlin/incremental/js/Ir") -> false
  path.startsWith("org/jetbrains/kotlin/incremental/js/J") -> false
  path.startsWith("org/jetbrains/kotlin/incremental/js/T") -> false
  path.startsWith("org/jetbrains/kotlin/ir/B") -> false
  path.startsWith("org/jetbrains/kotlin/ir/O") -> false
  path.startsWith("org/jetbrains/kotlin/ir/S") -> false
  path.startsWith("org/jetbrains/kotlin/ir/backend/js/JsM") -> false
  path.startsWith("org/jetbrains/kotlin/ir/backend/js/Ko") -> false
  path.startsWith("org/jetbrains/kotlin/ir/backend/js/MainModule\$K") -> false
  path.startsWith("org/jetbrains/kotlin/ir/backend/js/MainModule.") -> false
  path.startsWith("org/jetbrains/kotlin/ir/backend/js/Pro") -> false
  path.startsWith("org/jetbrains/kotlin/ir/backend/js/R") -> false
  path.startsWith("org/jetbrains/kotlin/ir/backend/js/SourceMapsInfo\$") -> false
  path.startsWith("org/jetbrains/kotlin/ir/backend/js/SourceMapsInfo.") -> false
  path.startsWith("org/jetbrains/kotlin/ir/backend/js/W") -> false
  path.startsWith("org/jetbrains/kotlin/ir/backend/js/dce/I") -> false
  path.startsWith("org/jetbrains/kotlin/ir/backend/js/dce/R") -> false
  path.startsWith("org/jetbrains/kotlin/ir/backend/js/export/Er") -> false
  path.startsWith("org/jetbrains/kotlin/ir/backend/js/export/TransitiveExportCollectorK") -> false
  path.startsWith("org/jetbrains/kotlin/ir/backend/js/export/Ty") -> false
  path.startsWith("org/jetbrains/kotlin/ir/backend/js/ic/DirtyFileS") -> false
  path.startsWith("org/jetbrains/kotlin/ir/backend/js/ic/FileSignatureProvider.") -> false
  path.startsWith("org/jetbrains/kotlin/ir/backend/js/ic/IdSignatureSource.") -> false
  path.startsWith("org/jetbrains/kotlin/ir/backend/js/ic/Im") -> false
  path.startsWith("org/jetbrains/kotlin/ir/backend/js/ic/KotlinSourceFile\$") -> false
  path.startsWith("org/jetbrains/kotlin/ir/backend/js/ic/KotlinSourceFile.") -> false
  path.startsWith("org/jetbrains/kotlin/ir/backend/js/ic/KotlinSourceFileMa") -> false
  path.startsWith("org/jetbrains/kotlin/ir/backend/js/ic/KotlinSourceFileMu") -> false
  path.startsWith("org/jetbrains/kotlin/ir/backend/js/ic/St") -> false
  path.startsWith("org/jetbrains/kotlin/ir/backend/js/lower/AutoboxingTransformerK") -> false
  path.startsWith("org/jetbrains/kotlin/ir/backend/js/lower/ES6AddBoxParameterL") -> false
  path.startsWith("org/jetbrains/kotlin/ir/backend/js/lower/ES6ConstructorLoweringK") -> false
  path.startsWith("org/jetbrains/kotlin/ir/backend/js/lower/JsClassUsageInReflectionLoweringK") -> false
  path.startsWith("org/jetbrains/kotlin/ir/backend/js/lower/SC") -> false
  path.startsWith("org/jetbrains/kotlin/ir/backend/js/lower/calls/CallsT") -> false
  path.startsWith("org/jetbrains/kotlin/ir/backend/js/lower/calls/NumberOperatorCallsTransformerK") -> false
  path.startsWith("org/jetbrains/kotlin/ir/backend/js/lower/calls/PrimitiveT") -> false
  path.startsWith("org/jetbrains/kotlin/ir/backend/js/lower/calls/S") -> false
  path.startsWith("org/jetbrains/kotlin/ir/backend/js/lower/cleanup/B") -> false
  path.startsWith("org/jetbrains/kotlin/ir/backend/js/lower/serialization/ir/JsManglerD") -> false
  path.startsWith("org/jetbrains/kotlin/ir/backend/js/transformers/irToJs/CrossModuleI") -> false
  path.startsWith("org/jetbrains/kotlin/ir/backend/js/transformers/irToJs/CrossModuleT") -> false
  path.startsWith("org/jetbrains/kotlin/ir/backend/js/transformers/irToJs/JsAstUtils.") -> false
  path.startsWith("org/jetbrains/kotlin/ir/backend/js/transformers/irToJs/JsG") -> false
  path.startsWith("org/jetbrains/kotlin/ir/backend/js/transformers/irToJs/JsIrI") -> false
  path.startsWith("org/jetbrains/kotlin/ir/backend/js/transformers/irToJs/JsIrModule.") -> false
  path.startsWith("org/jetbrains/kotlin/ir/backend/js/transformers/irToJs/JsNameR") -> false
  path.startsWith("org/jetbrains/kotlin/ir/backend/js/transformers/irToJs/ModuleFragmentToExternalNameK") -> false
  path.startsWith("org/jetbrains/kotlin/ir/backend/js/transformers/irToJs/Sc") -> false
  path.startsWith("org/jetbrains/kotlin/ir/backend/js/utils/C") -> false
  path.startsWith("org/jetbrains/kotlin/ir/backend/js/utils/IrNamer.") -> false
  path.startsWith("org/jetbrains/kotlin/ir/backend/js/utils/JsA") -> false
  path.startsWith("org/jetbrains/kotlin/ir/backend/js/utils/Mu") -> false
  path.startsWith("org/jetbrains/kotlin/ir/backend/js/utils/Namer") -> false
  path.startsWith("org/jetbrains/kotlin/ir/backend/js/utils/O") -> false
  path.startsWith("org/jetbrains/kotlin/ir/backend/js/utils/R") -> false
  path.startsWith("org/jetbrains/kotlin/ir/backend/js/utils/serialization/C") -> false
  path.startsWith("org/jetbrains/kotlin/ir/backend/js/utils/serialization/D") -> false
  path.startsWith("org/jetbrains/kotlin/ir/backend/js/utils/serialization/I") -> false
  path.startsWith("org/jetbrains/kotlin/ir/backend/js/utils/serialization/S") -> false
  path.startsWith("org/jetbrains/kotlin/ir/builders/IrBuilder.") -> false
  path.startsWith("org/jetbrains/kotlin/ir/builders/IrGenerator.") -> false
  path.startsWith("org/jetbrains/kotlin/ir/declarations/S") -> false
  path.startsWith("org/jetbrains/kotlin/ir/declarations/impl/IrM") -> false
  path.startsWith("org/jetbrains/kotlin/ir/declarations/impl/IrVar") -> false
  path.startsWith("org/jetbrains/kotlin/ir/declarations/lazy/IrM") -> false
  path.startsWith("org/jetbrains/kotlin/ir/declarations/lazy/S") -> false
  path.startsWith("org/jetbrains/kotlin/ir/descriptors/IrDescriptorBasedFunctionFactoryK") -> false
  path.startsWith("org/jetbrains/kotlin/ir/descriptors/IrS") -> false
  path.startsWith("org/jetbrains/kotlin/ir/expressions/impl/IrCat") -> false
  path.startsWith("org/jetbrains/kotlin/ir/expressions/impl/IrCl") -> false
  path.startsWith("org/jetbrains/kotlin/ir/expressions/impl/IrCom") -> false
  path.startsWith("org/jetbrains/kotlin/ir/expressions/impl/IrConstantA") -> false
  path.startsWith("org/jetbrains/kotlin/ir/expressions/impl/IrConstantP") -> false
  path.startsWith("org/jetbrains/kotlin/ir/expressions/impl/IrCont") -> false
  path.startsWith("org/jetbrains/kotlin/ir/expressions/impl/IrDo") -> false
  path.startsWith("org/jetbrains/kotlin/ir/expressions/impl/IrEl") -> false
  path.startsWith("org/jetbrains/kotlin/ir/expressions/impl/IrL") -> false
  path.startsWith("org/jetbrains/kotlin/ir/expressions/impl/IrP") -> false
  path.startsWith("org/jetbrains/kotlin/ir/expressions/impl/IrV") -> false
  path.startsWith("org/jetbrains/kotlin/ir/interpreter/Co") -> false
  path.startsWith("org/jetbrains/kotlin/ir/interpreter/Cu") -> false
  path.startsWith("org/jetbrains/kotlin/ir/interpreter/Instruction.") -> false
  path.startsWith("org/jetbrains/kotlin/ir/interpreter/IrInterpreterC") -> false
  path.startsWith("org/jetbrains/kotlin/ir/interpreter/S") -> false
  path.startsWith("org/jetbrains/kotlin/ir/interpreter/proxy/reflection/F") -> false
  path.startsWith("org/jetbrains/kotlin/ir/interpreter/stack/D") -> false
  path.startsWith("org/jetbrains/kotlin/ir/interpreter/stack/S") -> false
  path.startsWith("org/jetbrains/kotlin/ir/interpreter/state/State.") -> false
  path.startsWith("org/jetbrains/kotlin/ir/interpreter/state/StateW") -> false
  path.startsWith("org/jetbrains/kotlin/ir/linkage/IrP") -> false
  path.startsWith("org/jetbrains/kotlin/ir/linkage/partial/PartialLinkageCase\$D") -> false
  path.startsWith("org/jetbrains/kotlin/ir/linkage/partial/PartialLinkageCase\$ExpressionHasD") -> false
  path.startsWith("org/jetbrains/kotlin/ir/linkage/partial/PartialLinkageCase\$ExpressionHasW") -> false
  path.startsWith("org/jetbrains/kotlin/ir/linkage/partial/PartialLinkageCase\$S") -> false
  path.startsWith("org/jetbrains/kotlin/ir/linkage/partial/PartialLinkageCase.") -> false
  path.startsWith("org/jetbrains/kotlin/ir/linkage/partial/PartialLinkageUtils.") -> false
  path.startsWith("org/jetbrains/kotlin/ir/linkage/partial/PartialLinkageUtilsK") -> false
  path.startsWith("org/jetbrains/kotlin/ir/linkage/partial/Partiall") -> false
  path.startsWith("org/jetbrains/kotlin/ir/symbols/F") -> false
  path.startsWith("org/jetbrains/kotlin/ir/symbols/impl/D") -> false
  path.startsWith("org/jetbrains/kotlin/ir/types/A") -> false
  path.startsWith("org/jetbrains/kotlin/ir/types/IrCh") -> false
  path.startsWith("org/jetbrains/kotlin/ir/types/IrD") -> false
  path.startsWith("org/jetbrains/kotlin/ir/types/IrE") -> false
  path.startsWith("org/jetbrains/kotlin/ir/types/IrType.") -> false
  path.startsWith("org/jetbrains/kotlin/ir/types/IrTypeC") -> false
  path.startsWith("org/jetbrains/kotlin/ir/types/IrTypePro") -> false
  path.startsWith("org/jetbrains/kotlin/ir/types/IrTypeSystemContext\$W") -> false
  path.startsWith("org/jetbrains/kotlin/ir/types/IrTypeSystemContext\$g") -> false
  path.startsWith("org/jetbrains/kotlin/ir/types/IrTypeSystemContext.") -> false
  path.startsWith("org/jetbrains/kotlin/ir/types/IrTypeSystemContextK") -> false
  path.startsWith("org/jetbrains/kotlin/ir/types/impl/IrA") -> false
  path.startsWith("org/jetbrains/kotlin/ir/types/impl/IrSimpleTypeB") -> false
  path.startsWith("org/jetbrains/kotlin/ir/types/impl/IrSimpleTypeImpl.") -> false
  path.startsWith("org/jetbrains/kotlin/ir/types/impl/IrSt") -> false
  path.startsWith("org/jetbrains/kotlin/ir/types/impl/IrU") -> false
  path.startsWith("org/jetbrains/kotlin/ir/types/impl/R") -> false
  path.startsWith("org/jetbrains/kotlin/ir/util/B") -> false
  path.startsWith("org/jetbrains/kotlin/ir/util/DeclarationP") -> false
  path.startsWith("org/jetbrains/kotlin/ir/util/Del") -> false
  path.startsWith("org/jetbrains/kotlin/ir/util/DescriptorB") -> false
  path.startsWith("org/jetbrains/kotlin/ir/util/DescriptorSymbolTableExtensionK") -> false
  path.startsWith("org/jetbrains/kotlin/ir/util/DescriptorT") -> false
  path.startsWith("org/jetbrains/kotlin/ir/util/Dese") -> false
  path.startsWith("org/jetbrains/kotlin/ir/util/DumpIrTreeO") -> false
  path.startsWith("org/jetbrains/kotlin/ir/util/Em") -> false
  path.startsWith("org/jetbrains/kotlin/ir/util/FakeOverrides") -> false
  path.startsWith("org/jetbrains/kotlin/ir/util/KotlinLikeDumpO") -> false
  path.startsWith("org/jetbrains/kotlin/ir/util/L") -> false
  path.startsWith("org/jetbrains/kotlin/ir/util/Sc") -> false
  path.startsWith("org/jetbrains/kotlin/ir/util/Se") -> false
  path.startsWith("org/jetbrains/kotlin/ir/util/SymbolTableExtensionK") -> false
  path.startsWith("org/jetbrains/kotlin/ir/util/SymbolTableI") -> false
  path.startsWith("org/jetbrains/kotlin/ir/util/Tr") -> false
  path.startsWith("org/jetbrains/kotlin/ir/util/TypeP") -> false
  path.startsWith("org/jetbrains/kotlin/ir/util/V") -> false
  path.startsWith("org/jetbrains/kotlin/javac/JavacO") -> false
  path.startsWith("org/jetbrains/kotlin/javac/resolve/ClassifierResolverK") -> false
  path.startsWith("org/jetbrains/kotlin/javac/resolve/ResolveHelperK") -> false
  path.startsWith("org/jetbrains/kotlin/javac/wrappers/symbols/SymbolBasedPa") -> false
  path.startsWith("org/jetbrains/kotlin/javax") -> false
  path.startsWith("org/jetbrains/kotlin/js/S") -> false
  path.startsWith("org/jetbrains/kotlin/js/analyze/S") -> false
  path.startsWith("org/jetbrains/kotlin/js/backend/N") -> false
  path.startsWith("org/jetbrains/kotlin/js/backend/S") -> false
  path.startsWith("org/jetbrains/kotlin/js/backend/ast/D") -> false
  path.startsWith("org/jetbrains/kotlin/js/backend/ast/R") -> false
  path.startsWith("org/jetbrains/kotlin/js/backend/ast/S") -> false
  path.startsWith("org/jetbrains/kotlin/js/backend/ast/metadata/B") -> false
  path.startsWith("org/jetbrains/kotlin/js/backend/ast/metadata/L") -> false
  path.startsWith("org/jetbrains/kotlin/js/backend/ast/metadata/MetadataProperty") -> false
  path.startsWith("org/jetbrains/kotlin/js/backend/ast/metadata/T") -> false
  path.startsWith("org/jetbrains/kotlin/js/config/JS") -> false
  path.startsWith("org/jetbrains/kotlin/js/coroutine/CoroutineBl") -> false
  path.startsWith("org/jetbrains/kotlin/js/coroutine/CoroutineM") -> false
  path.startsWith("org/jetbrains/kotlin/js/dce/DC") -> false
  path.startsWith("org/jetbrains/kotlin/js/dce/DeadCodeEliminationS") -> false
  path.startsWith("org/jetbrains/kotlin/js/dce/S") -> false
  path.startsWith("org/jetbrains/kotlin/js/facade/F") -> false
  path.startsWith("org/jetbrains/kotlin/js/facade/TranslationUnit\$B") -> false
  path.startsWith("org/jetbrains/kotlin/js/facade/TranslationUnit.") -> false
  path.startsWith("org/jetbrains/kotlin/js/facade/exceptions/TranslationE") -> false
  path.startsWith("org/jetbrains/kotlin/js/facade/exceptions/U") -> false
  path.startsWith("org/jetbrains/kotlin/js/inline/InlineF") -> false
  path.startsWith("org/jetbrains/kotlin/js/inline/Inlinea") -> false
  path.startsWith("org/jetbrains/kotlin/js/inline/JsC") -> false
  path.startsWith("org/jetbrains/kotlin/js/inline/S") -> false
  path.startsWith("org/jetbrains/kotlin/js/inline/clean/N") -> false
  path.startsWith("org/jetbrains/kotlin/js/inline/clean/Ref") -> false
  path.startsWith("org/jetbrains/kotlin/js/inline/clean/Sc") -> false
  path.startsWith("org/jetbrains/kotlin/js/inline/clean/Tr") -> false
  path.startsWith("org/jetbrains/kotlin/js/inline/util/Collecti") -> false
  path.startsWith("org/jetbrains/kotlin/js/inline/util/c") -> false
  path.startsWith("org/jetbrains/kotlin/js/inline/util/rewriters/C") -> false
  path.startsWith("org/jetbrains/kotlin/js/inline/util/rewriters/L") -> false
  path.startsWith("org/jetbrains/kotlin/js/inline/util/rewriters/T") -> false
  path.startsWith("org/jetbrains/kotlin/js/naming/S") -> false
  path.startsWith("org/jetbrains/kotlin/js/patterns/D") -> false
  path.startsWith("org/jetbrains/kotlin/js/patterns/N") -> false
  path.startsWith("org/jetbrains/kotlin/js/resolve/JsPlatform\$") -> false
  path.startsWith("org/jetbrains/kotlin/js/resolve/JsPlatform.") -> false
  path.startsWith("org/jetbrains/kotlin/js/resolve/diagnostics/JsReflectionAPICallCheckerK") -> false
  path.startsWith("org/jetbrains/kotlin/js/resolve/diagnostics/JsRen") -> false
  path.startsWith("org/jetbrains/kotlin/js/sourceMap/SourceMapBuilder.") -> false
  path.startsWith("org/jetbrains/kotlin/js/sourceMap/SourceMapM") -> false
  path.startsWith("org/jetbrains/kotlin/js/sourceMap/U") -> false
  path.startsWith("org/jetbrains/kotlin/js/translate/callTranslator/E") -> false
  path.startsWith("org/jetbrains/kotlin/js/translate/context/I") -> false
  path.startsWith("org/jetbrains/kotlin/js/translate/expression/Cap") -> false
  path.startsWith("org/jetbrains/kotlin/js/translate/expression/InlineMetadataK") -> false
  path.startsWith("org/jetbrains/kotlin/js/translate/expression/RangeT") -> false
  path.startsWith("org/jetbrains/kotlin/js/translate/expression/WhenTranslatorK") -> false
  path.startsWith("org/jetbrains/kotlin/js/translate/general/D") -> false
  path.startsWith("org/jetbrains/kotlin/js/translate/general/F") -> false
  path.startsWith("org/jetbrains/kotlin/js/translate/general/S") -> false
  path.startsWith("org/jetbrains/kotlin/js/translate/reference/AccessTranslato") -> false
  path.startsWith("org/jetbrains/kotlin/js/translate/utils/mutator/M") -> false
  path.startsWith("org/jetbrains/kotlin/lexer/KotlinLexerE") -> false
  path.startsWith("org/jetbrains/kotlin/library/L") -> false
  path.startsWith("org/jetbrains/kotlin/library/R") -> false
  path.startsWith("org/jetbrains/kotlin/library/abi/E") -> false
  path.startsWith("org/jetbrains/kotlin/library/abi/LibraryAbi.") -> false
  path.startsWith("org/jetbrains/kotlin/library/abi/LibraryAbiRen") -> false
  path.startsWith("org/jetbrains/kotlin/library/abi/LibraryM") -> false
  path.startsWith("org/jetbrains/kotlin/library/abi/impl/C") -> false
  path.startsWith("org/jetbrains/kotlin/library/abi/impl/D") -> false
  path.startsWith("org/jetbrains/kotlin/library/abi/impl/E") -> false
  path.startsWith("org/jetbrains/kotlin/library/e") -> false
  path.startsWith("org/jetbrains/kotlin/load/java/JavaClassFinder\$") -> false
  path.startsWith("org/jetbrains/kotlin/load/java/JavaClassFinder.") -> false
  path.startsWith("org/jetbrains/kotlin/load/java/JavaM") -> false
  path.startsWith("org/jetbrains/kotlin/load/java/P") -> false
  path.startsWith("org/jetbrains/kotlin/load/java/U") -> false
  path.startsWith("org/jetbrains/kotlin/load/java/components/SignaturePropagator.") -> false
  path.startsWith("org/jetbrains/kotlin/load/java/components/Ty") -> false
  path.startsWith("org/jetbrains/kotlin/load/java/sam/JavaBasedSamConversionR") -> false
  path.startsWith("org/jetbrains/kotlin/load/java/structure/impl/JavaL") -> false
  path.startsWith("org/jetbrains/kotlin/load/java/structure/impl/classFiles/BinaryJavaF") -> false
  path.startsWith("org/jetbrains/kotlin/load/java/structure/impl/classFiles/BinaryJavaMo") -> false
  path.startsWith("org/jetbrains/kotlin/load/java/structure/impl/classFiles/BinaryJavaR") -> false
  path.startsWith("org/jetbrains/kotlin/load/java/structure/impl/classFiles/BinaryJavaT") -> false
  path.startsWith("org/jetbrains/kotlin/load/java/structure/impl/classFiles/BinaryJavaV") -> false
  path.startsWith("org/jetbrains/kotlin/load/java/structure/impl/classFiles/ClassifierResolutionContextK") -> false
  path.startsWith("org/jetbrains/kotlin/load/java/structure/impl/classFiles/Co") -> false
  path.startsWith("org/jetbrains/kotlin/load/java/structure/impl/classFiles/J") -> false
  path.startsWith("org/jetbrains/kotlin/load/java/structure/impl/classFiles/PlainJavaE") -> false
  path.startsWith("org/jetbrains/kotlin/load/java/structure/impl/classFiles/PlainJavaL") -> false
  path.startsWith("org/jetbrains/kotlin/load/java/structure/impl/classFiles/PlainJavaP") -> false
  path.startsWith("org/jetbrains/kotlin/load/java/structure/impl/classFiles/PlainJavaW") -> false
  path.startsWith("org/jetbrains/kotlin/load/kotlin/I") -> false
  path.startsWith("org/jetbrains/kotlin/load/kotlin/ModuleM") -> false
  path.startsWith("org/jetbrains/kotlin/load/kotlin/ModuleN") -> false
  path.startsWith("org/jetbrains/kotlin/load/kotlin/ModuleVisibilityManager.") -> false
  path.startsWith("org/jetbrains/kotlin/load/kotlin/PackageA") -> false
  path.startsWith("org/jetbrains/kotlin/parsing/C") -> false
  path.startsWith("org/jetbrains/kotlin/parsing/TokenStreamPr") -> false
  path.startsWith("org/jetbrains/kotlin/progress/I") -> false
  path.startsWith("org/jetbrains/kotlin/psi/A") -> false
  path.startsWith("org/jetbrains/kotlin/psi/I") -> false
  path.startsWith("org/jetbrains/kotlin/psi/KtNamed.") -> false
  path.startsWith("org/jetbrains/kotlin/psi/KtSta") -> false
  path.startsWith("org/jetbrains/kotlin/psi/NotNullableU") -> false
  path.startsWith("org/jetbrains/kotlin/psi/Pa") -> false
  path.startsWith("org/jetbrains/kotlin/psi/U") -> false
  path.startsWith("org/jetbrains/kotlin/psi/stubs/C") -> false
  path.startsWith("org/jetbrains/kotlin/psi/stubs/KotlinClassi") -> false
  path.startsWith("org/jetbrains/kotlin/psi/stubs/KotlinStubV") -> false
  path.startsWith("org/jetbrains/kotlin/psi/stubs/S") -> false
  path.startsWith("org/jetbrains/kotlin/psi/stubs/impl/A") -> false
  path.startsWith("org/jetbrains/kotlin/psi/stubs/impl/E") -> false
  path.startsWith("org/jetbrains/kotlin/psi/stubs/impl/KC") -> false
  path.startsWith("org/jetbrains/kotlin/psi/stubs/impl/KotlinConstantValueKi") -> false
  path.startsWith("org/jetbrains/kotlin/psi/stubs/impl/KotlinContractC") -> false
  path.startsWith("org/jetbrains/kotlin/psi/stubs/impl/KotlinFl") -> false
  path.startsWith("org/jetbrains/kotlin/psi/stubs/impl/KotlinStubBaseImplK") -> false
  path.startsWith("org/jetbrains/kotlin/psi/stubs/impl/KotlinTypeB") -> false
  path.startsWith("org/jetbrains/kotlin/psi/stubs/impl/KotlinTypeParameterT") -> false
  path.startsWith("org/jetbrains/kotlin/psi/stubs/impl/U") -> false
  path.startsWith("org/jetbrains/kotlin/psi2ir/Psi2IrC") -> false
  path.startsWith("org/jetbrains/kotlin/psi2ir/Psi2IrP") -> false
  path.startsWith("org/jetbrains/kotlin/psi2ir/descriptors/IrBuiltInsOverDescriptorsK") -> false
  path.startsWith("org/jetbrains/kotlin/psi2ir/generators/DescriptorS") -> false
  path.startsWith("org/jetbrains/kotlin/psi2ir/generators/PropertyGeneratorK") -> false
  path.startsWith("org/jetbrains/kotlin/psi2ir/generators/fragments/FragmentCon") -> false
  path.startsWith("org/jetbrains/kotlin/psi2ir/intermediate/B") -> false
  path.startsWith("org/jetbrains/kotlin/psi2ir/intermediate/CallE") -> false
  path.startsWith("org/jetbrains/kotlin/psi2ir/intermediate/CallR") -> false
  path.startsWith("org/jetbrains/kotlin/psi2ir/intermediate/Dy") -> false
  path.startsWith("org/jetbrains/kotlin/psi2ir/intermediate/Exp") -> false
  path.startsWith("org/jetbrains/kotlin/psi2ir/intermediate/LValue.") -> false
  path.startsWith("org/jetbrains/kotlin/psi2ir/intermediate/Si") -> false
  path.startsWith("org/jetbrains/kotlin/psi2ir/intermediate/T") -> false
  path.startsWith("org/jetbrains/kotlin/psi2ir/intermediate/V") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/AnnotationCheckerK") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/Annotations") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/Ar") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/Compa") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/CompilerD") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/DataClassR") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/DeclarationS") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/DeclarationsCheckerK") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/DescriptorU") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/Fo") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/FunctionI") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/Ma") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/ModuleP") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/NonR") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/Pa") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/PlatformConfigurator.") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/Pr") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/QualifiedExpressionResolverK") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/Qualifier") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/Req") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/Se") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/Su") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/TargetA") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/TargetP") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/TopDownAnalysisM") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/Tr") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/Us") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/VarianceCo") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/Vi") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/Co") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/DiagnosticReporterByTrackingStrategyK") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/T") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/checkers/AbstractReflectionApiCallCheckerK") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/checkers/CapturingInClosureCheckerK") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/checkers/ConstructorHeaderCallCheckerK") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/checkers/RttiO") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/components/Ap") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/components/BuiltInsProvider.") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/components/CallableReferenceAd") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/components/ClassicTypeSystemContextForCS.") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/components/CompletionModeCalculatorK") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/components/Im") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/components/Inp") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/components/PostponedArgumentsAnalyzerC") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/components/SuspendC") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/context/CallPosition\$C") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/context/CallPosition\$U") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/context/CallPosition.") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/context/Can") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/context/Ch") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/context/Co") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/inference/BuilderInferenceD") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/inference/Can") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/inference/Com") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/inference/ConstraintC") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/inference/ConstraintSystem.") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/inference/ConstraintSystemO") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/inference/ConstraintSystemS") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/inference/ConstraintSystemT") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/inference/E") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/inference/NewConstraintSystemK") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/inference/P") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/inference/TypeI") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/inference/TypeT") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/inference/TypeVariable.") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/inference/components/ConstraintC") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/inference/components/ConstraintInjectorK") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/inference/components/ConstraintSystemCompletionContext\$h") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/inference/components/ConstraintSystemCompletionM") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/inference/components/ConstraintSystemU") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/inference/components/E") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/inference/components/NewTypeSubstitutor.") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/inference/components/NewTypeSubstitutorB") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/inference/components/PostponedArgumentInputTypesResolverK") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/inference/components/TypeVariableDirectionCalculator\$N") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/inference/components/TypeVariableDirectionCalculator\$R") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/inference/components/TypeVariableDirectionCalculator\$W") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/inference/components/TypeVariableDirectionCalculator\$g") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/inference/components/TypeVariableDirectionCalculatorK") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/inference/model/BuilderInferenceP") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/inference/model/BuilderInferenceSubstitutionConstraintPosition.") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/inference/model/CallableReferenceConstraintPosition.") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/inference/model/Cap") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/inference/model/DeclaredUpperBoundConstraintPosition.") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/inference/model/DelegatedPropertyConstraintPosition.") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/inference/model/ExpectedTypeConstraintPosition.") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/inference/model/Inc") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/inference/model/InjectedAnotherStubTypeConstraintPosition.") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/inference/model/LH") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/inference/model/LambdaArgumentConstraintPosition.") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/inference/model/Lo") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/inference/model/NewConstraintE") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/inference/model/NewConstraintM") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/inference/model/NewConstraintW") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/inference/model/NewT") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/inference/model/ReceiverConstraintPosition.") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/inference/model/S") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/inference/model/V") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/model/AbstractF") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/model/AbstractS") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/model/ArgumentMapping.") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/model/ArgumentP") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/model/ArgumentU") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/model/CandidateC") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/model/Col") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/model/Di") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/model/En") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/model/ExpressionK") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/model/Fa") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/model/G") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/model/KotlinCallA") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/model/KotlinCo") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/model/LambdaWithTypeVariableAsExpectedTypeM") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/model/Mi") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/model/NoC") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/model/NoV") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/model/NonV") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/model/NoneCan") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/model/Postpona") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/model/PostponedA") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/model/PostponedCallableReferenceM") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/model/Q") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/model/ResolutionAtom.") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/model/ResolvedA") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/model/ResolvedCallableReferenceAt") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/model/ResolvedCo") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/model/ResolvedE") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/model/ResolvedT") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/model/Sa") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/model/SimpleCandidateFactoryK") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/model/SimpleK") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/model/SimpleT") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/model/Sup") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/model/VarargA") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/model/W") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/results/FlatSignature\$") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/results/FlatSignature.") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/results/FlatSignatureU") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/results/Overloada") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/results/ResolutionS") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/results/Sim") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/results/Sp") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/smartcasts/DataFlowValue.") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/smartcasts/DataFlowValueKt") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/smartcasts/IdentifierInfo\$ER") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/smartcasts/IdentifierInfo\$En") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/smartcasts/IdentifierInfo\$Pa") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/smartcasts/IdentifierInfo\$Q") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/smartcasts/IdentifierInfo\$R") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/smartcasts/IdentifierInfo\$S") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/smartcasts/IdentifierInfo\$V") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/smartcasts/IdentifierInfo.") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/smartcasts/Im") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/smartcasts/SmartCastU") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/tasks/DynamicCalls") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/tasks/E") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/tasks/S") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/tower/Expl") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/tower/Inf") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/tower/Inn") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/tower/InvokeC") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/tower/InvokeExtensionS") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/tower/Kn") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/tower/Lo") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/tower/Nes") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/tower/ResolutionD") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/tower/ResolvedU") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/tower/Sa") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/tower/ScopeB") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/tower/ScopeTowerL") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/tower/ScopeTowerProcessor.") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/tower/ScopeW") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/tower/SimpleS") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/tower/Sy") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/tower/TowerL") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/tower/TowerU") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/util/I") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/calls/util/ResolveA") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/checkers/ExpectedActualDeclarationCheckerK") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/checkers/ExplicitApiDeclarationCheckerK") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/checkers/Ki") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/checkers/OptInMarkerDeclarationAnnotationCheckerK") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/checkers/OptInN") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/checkers/PrimitiveNumericComparisonI") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/checkers/ResultClassInReturnTypeCheckerK") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/checkers/SuspendLimitationsCheckerK") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/checkers/ValueClassDeclarationCheckerK") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/constants/Ch") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/constants/Cl") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/constants/CompileTimeConstant.") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/constants/CompileTimeConstantK") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/constants/D") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/constants/F") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/constants/L") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/constants/N") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/constants/P") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/constants/evaluate/Com") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/deprecation/DeprecatedByO") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/deprecation/DeprecationI") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/deprecation/DeprecationL") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/deprecation/S") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/diagnostics/SimpleG") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/extensions/Exte") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/inline/InlineO") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/jvm/Com") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/jvm/E") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/jvm/I") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/jvm/Ja") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/jvm/Jd") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/jvm/JvmAdditionalClassPartsProviderK") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/jvm/JvmCl") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/jvm/JvmCom") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/jvm/JvmDi") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/jvm/JvmPlatformA") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/jvm/JvmPlatformO") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/jvm/JvmPr") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/jvm/KotlinF") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/jvm/KotlinS") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/jvm/T") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/jvm/checkers/BadInheritedJavaSignaturesCheckerK") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/jvm/checkers/Da") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/jvm/checkers/Dec") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/jvm/checkers/Enh") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/jvm/checkers/JavaNullabilityCheckerK") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/jvm/diagnostics/JvmDeclarationOriginKi") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/jvm/diagnostics/M") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/jvm/diagnostics/R") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/jvm/modules/JavaModuleK") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/jvm/platform/JvmPlatform\$") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/jvm/platform/JvmPlatform.") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/konan/diagnostics/NativeP") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/konan/diagnostics/O") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/lazy/FileScopeFactoryK") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/lazy/LazyE") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/lazy/ResolveSessionU") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/lazy/descriptors/ClassResolutionScopesSupport.") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/multiplatform/O") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/ref") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/scopes/Th") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/scopes/receivers/A") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/scopes/receivers/Ca") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/scopes/receivers/D") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/scopes/receivers/Ext") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/scopes/receivers/S") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/scopes/receivers/Th") -> false
  path.startsWith("org/jetbrains/kotlin/resolve/scopes/receivers/Tr") -> false
  path.startsWith("org/jetbrains/kotlin/scripting/I") -> false
  path.startsWith("org/jetbrains/kotlin/scripting/U") -> false
  path.startsWith("org/jetbrains/kotlin/scripting/compiler/plugin/JvmCliScriptEvaluationExtensionK") -> false
  path.startsWith("org/jetbrains/kotlin/scripting/compiler/plugin/ScriptC") -> false
  path.startsWith("org/jetbrains/kotlin/scripting/compiler/plugin/impl/Compile") -> false
  path.startsWith("org/jetbrains/kotlin/scripting/compiler/plugin/impl/I") -> false
  path.startsWith("org/jetbrains/kotlin/scripting/compiler/plugin/impl/KJvmReplCompilerBaseK") -> false
  path.startsWith("org/jetbrains/kotlin/scripting/compiler/plugin/impl/ReplN") -> false
  path.startsWith("org/jetbrains/kotlin/scripting/compiler/plugin/repl/GenericReplCheckerK") -> false
  path.startsWith("org/jetbrains/kotlin/scripting/compiler/plugin/repl/I") -> false
  path.startsWith("org/jetbrains/kotlin/scripting/compiler/plugin/repl/ReplCodeAnalyzerK") -> false
  path.startsWith("org/jetbrains/kotlin/scripting/compiler/plugin/repl/S") -> false
  path.startsWith("org/jetbrains/kotlin/scripting/compiler/plugin/repl/reader/ConsoleReplCommandReader\$") -> false
  path.startsWith("org/jetbrains/kotlin/scripting/definitions/As") -> false
  path.startsWith("org/jetbrains/kotlin/scripting/definitions/LazyScriptDefinitionFromDiscoveredClassK") -> false
  path.startsWith("org/jetbrains/kotlin/scripting/definitions/ScriptCompilationConfigurationFromDefinitionK") -> false
  path.startsWith("org/jetbrains/kotlin/scripting/definitions/ScriptCon") -> false
  path.startsWith("org/jetbrains/kotlin/scripting/definitions/Si") -> false
  path.startsWith("org/jetbrains/kotlin/scripting/resolve/D") -> false
  path.startsWith("org/jetbrains/kotlin/scripting/resolve/I") -> false
  path.startsWith("org/jetbrains/kotlin/scripting/resolve/KotlinScriptDefinitionFromAnnotatedTemplateK") -> false
  path.startsWith("org/jetbrains/kotlin/scripting/resolve/Le") -> false
  path.startsWith("org/jetbrains/kotlin/scripting/resolve/Rep") -> false
  path.startsWith("org/jetbrains/kotlin/scripting/resolve/Res") -> false
  path.startsWith("org/jetbrains/kotlin/scripting/resolve/ScriptCompilationConfigurationWrapper.") -> false
  path.startsWith("org/jetbrains/kotlin/scripting/resolve/ScriptD") -> false
  path.startsWith("org/jetbrains/kotlin/scripting/resolve/ScriptP") -> false
  path.startsWith("org/jetbrains/kotlin/serialization/DescriptorA") -> false
  path.startsWith("org/jetbrains/kotlin/serialization/SerializerExtensionP") -> false
  path.startsWith("org/jetbrains/kotlin/serialization/St") -> false
  path.startsWith("org/jetbrains/kotlin/serialization/js/D") -> false
  path.startsWith("org/jetbrains/kotlin/serialization/js/KotlinJavaS") -> false
  path.startsWith("org/jetbrains/kotlin/serialization/js/M") -> false
  path.startsWith("org/jetbrains/kotlin/serialization/js/P") -> false
  path.startsWith("org/jetbrains/kotlin/storage/Can") -> false
  path.startsWith("org/jetbrains/kotlin/storage/D") -> false
  path.startsWith("org/jetbrains/kotlin/storage/Em") -> false
  path.startsWith("org/jetbrains/kotlin/storage/Locks") -> false
  path.startsWith("org/jetbrains/kotlin/storage/O") -> false
  path.startsWith("org/jetbrains/kotlin/synthetic/JavaSyntheticPropertiesScopeK") -> false
  path.startsWith("org/jetbrains/kotlin/synthetic/SamAdapterE") -> false
  path.startsWith("org/jetbrains/kotlin/types/Cu") -> false
  path.startsWith("org/jetbrains/kotlin/types/Defa") -> false
  path.startsWith("org/jetbrains/kotlin/types/Des") -> false
  path.startsWith("org/jetbrains/kotlin/types/Em") -> false
  path.startsWith("org/jetbrains/kotlin/types/Ex") -> false
  path.startsWith("org/jetbrains/kotlin/types/Raw") -> false
  path.startsWith("org/jetbrains/kotlin/types/WrappedType.") -> false
  path.startsWith("org/jetbrains/kotlin/types/expressions/Ca") -> false
  path.startsWith("org/jetbrains/kotlin/types/expressions/Coe") -> false
  path.startsWith("org/jetbrains/kotlin/types/expressions/DoubleColonLHS\$E") -> false
  path.startsWith("org/jetbrains/kotlin/types/expressions/DoubleColonLHS.") -> false
  path.startsWith("org/jetbrains/kotlin/types/expressions/FakeCallK") -> false
  path.startsWith("org/jetbrains/kotlin/types/expressions/FunctionsTypingVisitorK") -> false
  path.startsWith("org/jetbrains/kotlin/types/expressions/K") -> false
  path.startsWith("org/jetbrains/kotlin/types/ext") -> false
  path.startsWith("org/jetbrains/kotlin/util/At") -> false
  path.startsWith("org/jetbrains/kotlin/util/B") -> false
  path.startsWith("org/jetbrains/kotlin/util/Du") -> false
  path.startsWith("org/jetbrains/kotlin/util/Exc") -> false
  path.startsWith("org/jetbrains/kotlin/util/Im") -> false
  path.startsWith("org/jetbrains/kotlin/util/Infi") -> false
  path.startsWith("org/jetbrains/kotlin/util/Is") -> false
  path.startsWith("org/jetbrains/kotlin/util/Lo") -> false
  path.startsWith("org/jetbrains/kotlin/util/Pri") -> false
  path.startsWith("org/jetbrains/kotlin/util/Prot") -> false
  path.startsWith("org/jetbrains/kotlin/util/Si") -> false
  path.startsWith("org/jetbrains/kotlin/util/U") -> false
  path.startsWith("org/jetbrains/kotlin/util/j") -> false
  path.startsWith("org/jetbrains/kotlin/util/slicedMap/A") -> false
  path.startsWith("org/jetbrains/kotlin/util/slicedMap/D") -> false
  path.startsWith("org/jetbrains/kotlin/util/slicedMap/K") -> false
  path.startsWith("org/jetbrains/kotlin/util/slicedMap/W") -> false
  path.startsWith("org/jetbrains/kotlin/utils/E") -> false
  path.startsWith("org/jetbrains/kotlin/utils/JsLibrary.") -> false
  path.startsWith("org/jetbrains/kotlin/utils/KotlinJavascriptMetadata.") -> false
  path.startsWith("org/jetbrains/kotlin/utils/Lo") -> false
  path.startsWith("org/jetbrains/kotlin/utils/c") -> false
  path.startsWith("org/jetbrains/kotlin/utils/exceptions/P") -> false
  path.startsWith("org/jetbrains/kotlin/utils/f") -> false
  path.startsWith("org/jetbrains/kotlin/utils/i") -> false
  path.startsWith("org/jetbrains/kotlin/utils/s") -> false
  path.startsWith("org/jetbrains/kotlin/wasm/resolve/WasmPlatformAnalyzerServicesK") -> false
  path.startsWith("org/jetbrains/kotlin/wasm/resolve/diagnostics/WasmJsInteropTypesCheckerK") -> false

  else -> true
}